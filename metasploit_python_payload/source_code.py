exec(__import__('base64').b64decode(__import__('codecs').getencoder('utf-8')('IyEvdXNyL2Jpbi9weXRob24KaW1wb3J0IGJpbmFzY2lpCmltcG9ydCBjb2RlCmltcG9ydCBvcwppbXBvcnQgcGxhdGZvcm0KaW1wb3J0IHJhbmRvbQppbXBvcnQgcmUKaW1wb3J0IHNlbGVjdAppbXBvcnQgc29ja2V0CmltcG9ydCBzdHJ1Y3QKaW1wb3J0IHN1YnByb2Nlc3MKaW1wb3J0IHN5cwppbXBvcnQgdGhyZWFkaW5nCmltcG9ydCB0aW1lCmltcG9ydCB0cmFjZWJhY2sKCnRyeToKICAgIGltcG9ydCBjdHlwZXMKZXhjZXB0IEltcG9ydEVycm9yOgogICAgaGFzX3dpbmRsbCA9IEZhbHNlCmVsc2U6CiAgICBoYXNfd2luZGxsID0gaGFzYXR0cihjdHlwZXMsICd3aW5kbGwnKQoKdHJ5OgogICAgdXJsbGliX2ltcG9ydHMgPSBbJ1Byb3h5QmFzaWNBdXRoSGFuZGxlcicsICdQcm94eUhhbmRsZXInLCAnSFRUUFNIYW5kbGVyJywgJ1JlcXVlc3QnLCAnYnVpbGRfb3BlbmVyJywgJ2luc3RhbGxfb3BlbmVyJywgJ3VybG9wZW4nXQogICAgaWYgc3lzLnZlcnNpb25faW5mb1swXSA8IDM6CiAgICAgICAgdXJsbGliID0gX19pbXBvcnRfXygndXJsbGliMicsIGZyb21saXN0PXVybGxpYl9pbXBvcnRzKQogICAgZWxzZToKICAgICAgICB1cmxsaWIgPSBfX2ltcG9ydF9fKCd1cmxsaWIucmVxdWVzdCcsIGZyb21saXN0PXVybGxpYl9pbXBvcnRzKQpleGNlcHQgSW1wb3J0RXJyb3I6CiAgICBoYXNfdXJsbGliID0gRmFsc2UKZWxzZToKICAgIGhhc191cmxsaWIgPSBUcnVlCgppZiBzeXMudmVyc2lvbl9pbmZvWzBdIDwgMzoKICAgIGlzX3N0ciA9IGxhbWJkYSBvYmo6IGlzc3ViY2xhc3Mob2JqLl9fY2xhc3NfXywgc3RyKQogICAgaXNfYnl0ZXMgPSBsYW1iZGEgb2JqOiBpc3N1YmNsYXNzKG9iai5fX2NsYXNzX18sIHN0cikKICAgIGJ5dGVzID0gbGFtYmRhICphcmdzOiBzdHIoKmFyZ3NbOjFdKQogICAgTlVMTF9CWVRFID0gJ1x4MDAnCiAgICB1bmljb2RlID0gbGFtYmRhIHg6ICh4LmRlY29kZSgnVVRGLTgnKSBpZiBpc2luc3RhbmNlKHgsIHN0cikgZWxzZSB4KQplbHNlOgogICAgaWYgaXNpbnN0YW5jZShfX2J1aWx0aW5zX18sIGRpY3QpOgogICAgICAgIGlzX3N0ciA9IGxhbWJkYSBvYmo6IGlzc3ViY2xhc3Mob2JqLl9fY2xhc3NfXywgX19idWlsdGluc19fWydzdHInXSkKICAgICAgICBzdHIgPSBsYW1iZGEgeDogX19idWlsdGluc19fWydzdHInXSh4LCAqKCgpIGlmIGlzaW5zdGFuY2UoeCwgKGZsb2F0LCBpbnQpKSBlbHNlICgnVVRGLTgnLCkpKQogICAgZWxzZToKICAgICAgICBpc19zdHIgPSBsYW1iZGEgb2JqOiBpc3N1YmNsYXNzKG9iai5fX2NsYXNzX18sIF9fYnVpbHRpbnNfXy5zdHIpCiAgICAgICAgc3RyID0gbGFtYmRhIHg6IF9fYnVpbHRpbnNfXy5zdHIoeCwgKigoKSBpZiBpc2luc3RhbmNlKHgsIChmbG9hdCwgaW50KSkgZWxzZSAoJ1VURi04JywpKSkKICAgIGlzX2J5dGVzID0gbGFtYmRhIG9iajogaXNzdWJjbGFzcyhvYmouX19jbGFzc19fLCBieXRlcykKICAgIE5VTExfQllURSA9IGJ5dGVzKCdceDAwJywgJ1VURi04JykKICAgIGxvbmcgPSBpbnQKICAgIHVuaWNvZGUgPSBsYW1iZGEgeDogKHguZGVjb2RlKCdVVEYtOCcpIGlmIGlzaW5zdGFuY2UoeCwgYnl0ZXMpIGVsc2UgeCkKCiMgcmVzZWVkIHRoZSByYW5kb20gZ2VuZXJhdG9yLgpyYW5kb20uc2VlZCgpCgojCiMgQ29uc3RhbnRzCiMKCiMgdGhlc2UgdmFsdWVzIHdpbGwgYmUgcGF0Y2hlZCwgRE8gTk9UIENIQU5HRSBUSEVNCkRFQlVHR0lORyA9IEZhbHNlClRSWV9UT19GT1JLID0gVHJ1ZQpIVFRQX0NPTk5FQ1RJT05fVVJMID0gTm9uZQpIVFRQX1BST1hZID0gTm9uZQpIVFRQX1VTRVJfQUdFTlQgPSBOb25lCkhUVFBfQ09PS0lFID0gTm9uZQpIVFRQX0hPU1QgPSBOb25lCkhUVFBfUkVGRVJFUiA9IE5vbmUKUEFZTE9BRF9VVUlEID0gJzI2OGI2MmJlNmY3ZTU4NTJiNjdjYTM2OGQ3NWYxYTgyJwpTRVNTSU9OX0dVSUQgPSAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnClNFU1NJT05fQ09NTVVOSUNBVElPTl9USU1FT1VUID0gMzAwClNFU1NJT05fRVhQSVJBVElPTl9USU1FT1VUID0gNjA0ODAwClNFU1NJT05fUkVUUllfVE9UQUwgPSAzNjAwClNFU1NJT05fUkVUUllfV0FJVCA9IDEwCgpQQUNLRVRfVFlQRV9SRVFVRVNUICAgICAgICA9IDAKUEFDS0VUX1RZUEVfUkVTUE9OU0UgICAgICAgPSAxClBBQ0tFVF9UWVBFX1BMQUlOX1JFUVVFU1QgID0gMTAKUEFDS0VUX1RZUEVfUExBSU5fUkVTUE9OU0UgPSAxMQoKRVJST1JfU1VDQ0VTUyA9IDAKIyBub3QgZGVmaW5lZCBpbiBvcmlnaW5hbCBDIGltcGxlbWVudGF0aW9uCkVSUk9SX0ZBSUxVUkUgPSAxCkVSUk9SX0ZBSUxVUkVfUFlUSE9OID0gMgpFUlJPUl9GQUlMVVJFX1dJTkRPV1MgPSAzCgpDSEFOTkVMX0NMQVNTX0JVRkZFUkVEID0gMApDSEFOTkVMX0NMQVNTX1NUUkVBTSAgID0gMQpDSEFOTkVMX0NMQVNTX0RBVEFHUkFNID0gMgpDSEFOTkVMX0NMQVNTX1BPT0wgICAgID0gMwoKIwojIFRMViBNZXRhIFR5cGVzCiMKVExWX01FVEFfVFlQRV9OT05FICAgICAgID0gKCAgIDAgICApClRMVl9NRVRBX1RZUEVfU1RSSU5HICAgICA9ICgxIDw8IDE2KQpUTFZfTUVUQV9UWVBFX1VJTlQgICAgICAgPSAoMSA8PCAxNykKVExWX01FVEFfVFlQRV9SQVcgICAgICAgID0gKDEgPDwgMTgpClRMVl9NRVRBX1RZUEVfQk9PTCAgICAgICA9ICgxIDw8IDE5KQpUTFZfTUVUQV9UWVBFX1FXT1JEICAgICAgPSAoMSA8PCAyMCkKVExWX01FVEFfVFlQRV9DT01QUkVTU0VEID0gKDEgPDwgMjkpClRMVl9NRVRBX1RZUEVfR1JPVVAgICAgICA9ICgxIDw8IDMwKQpUTFZfTUVUQV9UWVBFX0NPTVBMRVggICAgPSAoMSA8PCAzMSkKIyBub3QgZGVmaW5lZCBpbiBvcmlnaW5hbApUTFZfTUVUQV9UWVBFX01BU0sgPSAoMTw8MzEpKygxPDwzMCkrKDE8PDI5KSsoMTw8MTkpKygxPDwxOCkrKDE8PDE3KSsoMTw8MTYpCgojCiMgVExWIGJhc2Ugc3RhcnRpbmcgcG9pbnRzCiMKVExWX1JFU0VSVkVEICAgPSAwClRMVl9FWFRFTlNJT05TID0gMjAwMDAKVExWX1VTRVIgICAgICAgPSA0MDAwMApUTFZfVEVNUCAgICAgICA9IDYwMDAwCgojCiMgVExWIFNwZWNpZmljIFR5cGVzCiMKVExWX1RZUEVfQU5ZICAgICAgICAgICAgICAgICAgID0gVExWX01FVEFfVFlQRV9OT05FICAgIHwgMApUTFZfVFlQRV9DT01NQU5EX0lEICAgICAgICAgICAgPSBUTFZfTUVUQV9UWVBFX1VJTlQgICAgfCAxClRMVl9UWVBFX1JFUVVFU1RfSUQgICAgICAgICAgICA9IFRMVl9NRVRBX1RZUEVfU1RSSU5HICB8IDIKVExWX1RZUEVfRVhDRVBUSU9OICAgICAgICAgICAgID0gVExWX01FVEFfVFlQRV9HUk9VUCAgIHwgMwpUTFZfVFlQRV9SRVNVTFQgICAgICAgICAgICAgICAgPSBUTFZfTUVUQV9UWVBFX1VJTlQgICAgfCA0CgpUTFZfVFlQRV9TVFJJTkcgICAgICAgICAgICAgICAgPSBUTFZfTUVUQV9UWVBFX1NUUklORyAgfCAxMApUTFZfVFlQRV9VSU5UICAgICAgICAgICAgICAgICAgPSBUTFZfTUVUQV9UWVBFX1VJTlQgICAgfCAxMQpUTFZfVFlQRV9CT09MICAgICAgICAgICAgICAgICAgPSBUTFZfTUVUQV9UWVBFX0JPT0wgICAgfCAxMgoKVExWX1RZUEVfTEVOR1RIICAgICAgICAgICAgICAgID0gVExWX01FVEFfVFlQRV9VSU5UICAgIHwgMjUKVExWX1RZUEVfREFUQSAgICAgICAgICAgICAgICAgID0gVExWX01FVEFfVFlQRV9SQVcgICAgIHwgMjYKVExWX1RZUEVfRkxBR1MgICAgICAgICAgICAgICAgID0gVExWX01FVEFfVFlQRV9VSU5UICAgIHwgMjcKClRMVl9UWVBFX0NIQU5ORUxfSUQgICAgICAgICAgICA9IFRMVl9NRVRBX1RZUEVfVUlOVCAgICB8IDUwClRMVl9UWVBFX0NIQU5ORUxfVFlQRSAgICAgICAgICA9IFRMVl9NRVRBX1RZUEVfU1RSSU5HICB8IDUxClRMVl9UWVBFX0NIQU5ORUxfREFUQSAgICAgICAgICA9IFRMVl9NRVRBX1RZUEVfUkFXICAgICB8IDUyClRMVl9UWVBFX0NIQU5ORUxfREFUQV9HUk9VUCAgICA9IFRMVl9NRVRBX1RZUEVfR1JPVVAgICB8IDUzClRMVl9UWVBFX0NIQU5ORUxfQ0xBU1MgICAgICAgICA9IFRMVl9NRVRBX1RZUEVfVUlOVCAgICB8IDU0ClRMVl9UWVBFX0NIQU5ORUxfUEFSRU5USUQgICAgICA9IFRMVl9NRVRBX1RZUEVfVUlOVCAgICB8IDU1CgpUTFZfVFlQRV9TRUVLX1dIRU5DRSAgICAgICAgICAgPSBUTFZfTUVUQV9UWVBFX1VJTlQgICAgfCA3MApUTFZfVFlQRV9TRUVLX09GRlNFVCAgICAgICAgICAgPSBUTFZfTUVUQV9UWVBFX1VJTlQgICAgfCA3MQpUTFZfVFlQRV9TRUVLX1BPUyAgICAgICAgICAgICAgPSBUTFZfTUVUQV9UWVBFX1VJTlQgICAgfCA3MgoKVExWX1RZUEVfRVhDRVBUSU9OX0NPREUgICAgICAgID0gVExWX01FVEFfVFlQRV9VSU5UICAgIHwgMzAwClRMVl9UWVBFX0VYQ0VQVElPTl9TVFJJTkcgICAgICA9IFRMVl9NRVRBX1RZUEVfU1RSSU5HICB8IDMwMQoKVExWX1RZUEVfTElCUkFSWV9QQVRIICAgICAgICAgID0gVExWX01FVEFfVFlQRV9TVFJJTkcgIHwgNDAwClRMVl9UWVBFX1RBUkdFVF9QQVRIICAgICAgICAgICA9IFRMVl9NRVRBX1RZUEVfU1RSSU5HICB8IDQwMQoKVExWX1RZUEVfVFJBTlNfVFlQRSAgICAgICAgICAgID0gVExWX01FVEFfVFlQRV9VSU5UICAgIHwgNDMwClRMVl9UWVBFX1RSQU5TX1VSTCAgICAgICAgICAgICA9IFRMVl9NRVRBX1RZUEVfU1RSSU5HICB8IDQzMQpUTFZfVFlQRV9UUkFOU19VQSAgICAgICAgICAgICAgPSBUTFZfTUVUQV9UWVBFX1NUUklORyAgfCA0MzIKVExWX1RZUEVfVFJBTlNfQ09NTV9USU1FT1VUICAgID0gVExWX01FVEFfVFlQRV9VSU5UICAgIHwgNDMzClRMVl9UWVBFX1RSQU5TX1NFU1NJT05fRVhQICAgICA9IFRMVl9NRVRBX1RZUEVfVUlOVCAgICB8IDQzNApUTFZfVFlQRV9UUkFOU19DRVJUX0hBU0ggICAgICAgPSBUTFZfTUVUQV9UWVBFX1JBVyAgICAgfCA0MzUKVExWX1RZUEVfVFJBTlNfUFJPWFlfSE9TVCAgICAgID0gVExWX01FVEFfVFlQRV9TVFJJTkcgIHwgNDM2ClRMVl9UWVBFX1RSQU5TX1BST1hZX1VTRVIgICAgICA9IFRMVl9NRVRBX1RZUEVfU1RSSU5HICB8IDQzNwpUTFZfVFlQRV9UUkFOU19QUk9YWV9QQVNTICAgICAgPSBUTFZfTUVUQV9UWVBFX1NUUklORyAgfCA0MzgKVExWX1RZUEVfVFJBTlNfUkVUUllfVE9UQUwgICAgID0gVExWX01FVEFfVFlQRV9VSU5UICAgIHwgNDM5ClRMVl9UWVBFX1RSQU5TX1JFVFJZX1dBSVQgICAgICA9IFRMVl9NRVRBX1RZUEVfVUlOVCAgICB8IDQ0MApUTFZfVFlQRV9UUkFOU19IRUFERVJTICAgICAgICAgPSBUTFZfTUVUQV9UWVBFX1NUUklORyAgfCA0NDEKVExWX1RZUEVfVFJBTlNfR1JPVVAgICAgICAgICAgID0gVExWX01FVEFfVFlQRV9HUk9VUCAgIHwgNDQyCgpUTFZfVFlQRV9NQUNISU5FX0lEICAgICAgICAgICAgPSBUTFZfTUVUQV9UWVBFX1NUUklORyAgfCA0NjAKVExWX1RZUEVfVVVJRCAgICAgICAgICAgICAgICAgID0gVExWX01FVEFfVFlQRV9SQVcgICAgIHwgNDYxClRMVl9UWVBFX1NFU1NJT05fR1VJRCAgICAgICAgICA9IFRMVl9NRVRBX1RZUEVfUkFXICAgICB8IDQ2MgoKVExWX1RZUEVfUlNBX1BVQl9LRVkgICAgICAgICAgID0gVExWX01FVEFfVFlQRV9SQVcgICAgIHwgNTUwClRMVl9UWVBFX1NZTV9LRVlfVFlQRSAgICAgICAgICA9IFRMVl9NRVRBX1RZUEVfVUlOVCAgICB8IDU1MQpUTFZfVFlQRV9TWU1fS0VZICAgICAgICAgICAgICAgPSBUTFZfTUVUQV9UWVBFX1JBVyAgICAgfCA1NTIKVExWX1RZUEVfRU5DX1NZTV9LRVkgICAgICAgICAgID0gVExWX01FVEFfVFlQRV9SQVcgICAgIHwgNTUzCgpUTFZfVFlQRV9QRUVSX0hPU1QgICAgICAgICAgICAgPSBUTFZfTUVUQV9UWVBFX1NUUklORyAgfCAxNTAwClRMVl9UWVBFX1BFRVJfUE9SVCAgICAgICAgICAgICA9IFRMVl9NRVRBX1RZUEVfVUlOVCAgICB8IDE1MDEKVExWX1RZUEVfTE9DQUxfSE9TVCAgICAgICAgICAgID0gVExWX01FVEFfVFlQRV9TVFJJTkcgIHwgMTUwMgpUTFZfVFlQRV9MT0NBTF9QT1JUICAgICAgICAgICAgPSBUTFZfTUVUQV9UWVBFX1VJTlQgICAgfCAxNTAzCgoKRVhQT1JURURfU1lNQk9MUyA9IHt9CkVYUE9SVEVEX1NZTUJPTFNbJ0RFQlVHR0lORyddID0gREVCVUdHSU5HCgpFTkNfTk9ORSA9IDAKRU5DX0FFUzI1NiA9IDEKCiMgUGFja2V0IGhlYWRlciBzaXplcwpQQUNLRVRfWE9SX0tFWV9TSVpFID0gNApQQUNLRVRfU0VTU0lPTl9HVUlEX1NJWkUgPSAxNgpQQUNLRVRfRU5DUllQVF9GTEFHX1NJWkUgPSA0ClBBQ0tFVF9MRU5HVEhfU0laRSA9IDQKUEFDS0VUX1RZUEVfU0laRSA9IDQKUEFDS0VUX0xFTkdUSF9PRkYgPSAoUEFDS0VUX1hPUl9LRVlfU0laRSArIFBBQ0tFVF9TRVNTSU9OX0dVSURfU0laRSArCiAgICAgICAgUEFDS0VUX0VOQ1JZUFRfRkxBR19TSVpFKQpQQUNLRVRfSEVBREVSX1NJWkUgPSAoUEFDS0VUX1hPUl9LRVlfU0laRSArIFBBQ0tFVF9TRVNTSU9OX0dVSURfU0laRSArCiAgICAgICAgUEFDS0VUX0VOQ1JZUFRfRkxBR19TSVpFICsgUEFDS0VUX0xFTkdUSF9TSVpFICsgUEFDS0VUX1RZUEVfU0laRSkKCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiMgLS0tIFRISVMgQ09OVEVOVCBXQVMgR0VORVJBVEVEIEJZIEEgVE9PTCBAIDIwMjAtMDUtMDEgMDU6Mjk6NTkgVVRDCkVYVEVOU0lPTl9JRF9DT1JFID0gMApFWFRFTlNJT05fSURfU1REQVBJID0gMTAwMApDT01NQU5EX0lEUyA9ICgKICAgICgxLCAnY29yZV9jaGFubmVsX2Nsb3NlJyksCiAgICAoMiwgJ2NvcmVfY2hhbm5lbF9lb2YnKSwKICAgICgzLCAnY29yZV9jaGFubmVsX2ludGVyYWN0JyksCiAgICAoNCwgJ2NvcmVfY2hhbm5lbF9vcGVuJyksCiAgICAoNSwgJ2NvcmVfY2hhbm5lbF9yZWFkJyksCiAgICAoNiwgJ2NvcmVfY2hhbm5lbF9zZWVrJyksCiAgICAoNywgJ2NvcmVfY2hhbm5lbF90ZWxsJyksCiAgICAoOCwgJ2NvcmVfY2hhbm5lbF93cml0ZScpLAogICAgKDksICdjb3JlX2NvbnNvbGVfd3JpdGUnKSwKICAgICgxMCwgJ2NvcmVfZW51bWV4dGNtZCcpLAogICAgKDExLCAnY29yZV9nZXRfc2Vzc2lvbl9ndWlkJyksCiAgICAoMTIsICdjb3JlX2xvYWRsaWInKSwKICAgICgxMywgJ2NvcmVfbWFjaGluZV9pZCcpLAogICAgKDE0LCAnY29yZV9taWdyYXRlJyksCiAgICAoMTUsICdjb3JlX25hdGl2ZV9hcmNoJyksCiAgICAoMTYsICdjb3JlX25lZ290aWF0ZV90bHZfZW5jcnlwdGlvbicpLAogICAgKDE3LCAnY29yZV9wYXRjaF91cmwnKSwKICAgICgxOCwgJ2NvcmVfcGl2b3RfYWRkJyksCiAgICAoMTksICdjb3JlX3Bpdm90X3JlbW92ZScpLAogICAgKDIwLCAnY29yZV9waXZvdF9zZXNzaW9uX2RpZWQnKSwKICAgICgyMSwgJ2NvcmVfc2V0X3Nlc3Npb25fZ3VpZCcpLAogICAgKDIyLCAnY29yZV9zZXRfdXVpZCcpLAogICAgKDIzLCAnY29yZV9zaHV0ZG93bicpLAogICAgKDI0LCAnY29yZV90cmFuc3BvcnRfYWRkJyksCiAgICAoMjUsICdjb3JlX3RyYW5zcG9ydF9jaGFuZ2UnKSwKICAgICgyNiwgJ2NvcmVfdHJhbnNwb3J0X2dldGNlcnRoYXNoJyksCiAgICAoMjcsICdjb3JlX3RyYW5zcG9ydF9saXN0JyksCiAgICAoMjgsICdjb3JlX3RyYW5zcG9ydF9uZXh0JyksCiAgICAoMjksICdjb3JlX3RyYW5zcG9ydF9wcmV2JyksCiAgICAoMzAsICdjb3JlX3RyYW5zcG9ydF9yZW1vdmUnKSwKICAgICgzMSwgJ2NvcmVfdHJhbnNwb3J0X3NldGNlcnRoYXNoJyksCiAgICAoMzIsICdjb3JlX3RyYW5zcG9ydF9zZXRfdGltZW91dHMnKSwKICAgICgzMywgJ2NvcmVfdHJhbnNwb3J0X3NsZWVwJyksCiAgICAoMTAwMSwgJ3N0ZGFwaV9mc19jaGRpcicpLAogICAgKDEwMDIsICdzdGRhcGlfZnNfY2htb2QnKSwKICAgICgxMDAzLCAnc3RkYXBpX2ZzX2RlbGV0ZV9kaXInKSwKICAgICgxMDA0LCAnc3RkYXBpX2ZzX2RlbGV0ZV9maWxlJyksCiAgICAoMTAwNSwgJ3N0ZGFwaV9mc19maWxlX2NvcHknKSwKICAgICgxMDA2LCAnc3RkYXBpX2ZzX2ZpbGVfZXhwYW5kX3BhdGgnKSwKICAgICgxMDA3LCAnc3RkYXBpX2ZzX2ZpbGVfbW92ZScpLAogICAgKDEwMDgsICdzdGRhcGlfZnNfZ2V0d2QnKSwKICAgICgxMDA5LCAnc3RkYXBpX2ZzX2xzJyksCiAgICAoMTAxMCwgJ3N0ZGFwaV9mc19tZDUnKSwKICAgICgxMDExLCAnc3RkYXBpX2ZzX21rZGlyJyksCiAgICAoMTAxMiwgJ3N0ZGFwaV9mc19tb3VudF9zaG93JyksCiAgICAoMTAxMywgJ3N0ZGFwaV9mc19zZWFyY2gnKSwKICAgICgxMDE0LCAnc3RkYXBpX2ZzX3NlcGFyYXRvcicpLAogICAgKDEwMTUsICdzdGRhcGlfZnNfc2hhMScpLAogICAgKDEwMTYsICdzdGRhcGlfZnNfc3RhdCcpLAogICAgKDEwMTcsICdzdGRhcGlfbmV0X2NvbmZpZ19hZGRfcm91dGUnKSwKICAgICgxMDE4LCAnc3RkYXBpX25ldF9jb25maWdfZ2V0X2FycF90YWJsZScpLAogICAgKDEwMTksICdzdGRhcGlfbmV0X2NvbmZpZ19nZXRfaW50ZXJmYWNlcycpLAogICAgKDEwMjAsICdzdGRhcGlfbmV0X2NvbmZpZ19nZXRfbmV0c3RhdCcpLAogICAgKDEwMjEsICdzdGRhcGlfbmV0X2NvbmZpZ19nZXRfcHJveHknKSwKICAgICgxMDIyLCAnc3RkYXBpX25ldF9jb25maWdfZ2V0X3JvdXRlcycpLAogICAgKDEwMjMsICdzdGRhcGlfbmV0X2NvbmZpZ19yZW1vdmVfcm91dGUnKSwKICAgICgxMDI0LCAnc3RkYXBpX25ldF9yZXNvbHZlX2hvc3QnKSwKICAgICgxMDI1LCAnc3RkYXBpX25ldF9yZXNvbHZlX2hvc3RzJyksCiAgICAoMTAyNiwgJ3N0ZGFwaV9uZXRfc29ja2V0X3RjcF9zaHV0ZG93bicpLAogICAgKDEwMjcsICdzdGRhcGlfbmV0X3RjcF9jaGFubmVsX29wZW4nKSwKICAgICgxMDI4LCAnc3RkYXBpX3JhaWxndW5fYXBpJyksCiAgICAoMTAyOSwgJ3N0ZGFwaV9yYWlsZ3VuX2FwaV9tdWx0aScpLAogICAgKDEwMzAsICdzdGRhcGlfcmFpbGd1bl9tZW1yZWFkJyksCiAgICAoMTAzMSwgJ3N0ZGFwaV9yYWlsZ3VuX21lbXdyaXRlJyksCiAgICAoMTAzMiwgJ3N0ZGFwaV9yZWdpc3RyeV9jaGVja19rZXlfZXhpc3RzJyksCiAgICAoMTAzMywgJ3N0ZGFwaV9yZWdpc3RyeV9jbG9zZV9rZXknKSwKICAgICgxMDM0LCAnc3RkYXBpX3JlZ2lzdHJ5X2NyZWF0ZV9rZXknKSwKICAgICgxMDM1LCAnc3RkYXBpX3JlZ2lzdHJ5X2RlbGV0ZV9rZXknKSwKICAgICgxMDM2LCAnc3RkYXBpX3JlZ2lzdHJ5X2RlbGV0ZV92YWx1ZScpLAogICAgKDEwMzcsICdzdGRhcGlfcmVnaXN0cnlfZW51bV9rZXknKSwKICAgICgxMDM4LCAnc3RkYXBpX3JlZ2lzdHJ5X2VudW1fa2V5X2RpcmVjdCcpLAogICAgKDEwMzksICdzdGRhcGlfcmVnaXN0cnlfZW51bV92YWx1ZScpLAogICAgKDEwNDAsICdzdGRhcGlfcmVnaXN0cnlfZW51bV92YWx1ZV9kaXJlY3QnKSwKICAgICgxMDQxLCAnc3RkYXBpX3JlZ2lzdHJ5X2xvYWRfa2V5JyksCiAgICAoMTA0MiwgJ3N0ZGFwaV9yZWdpc3RyeV9vcGVuX2tleScpLAogICAgKDEwNDMsICdzdGRhcGlfcmVnaXN0cnlfb3Blbl9yZW1vdGVfa2V5JyksCiAgICAoMTA0NCwgJ3N0ZGFwaV9yZWdpc3RyeV9xdWVyeV9jbGFzcycpLAogICAgKDEwNDUsICdzdGRhcGlfcmVnaXN0cnlfcXVlcnlfdmFsdWUnKSwKICAgICgxMDQ2LCAnc3RkYXBpX3JlZ2lzdHJ5X3F1ZXJ5X3ZhbHVlX2RpcmVjdCcpLAogICAgKDEwNDcsICdzdGRhcGlfcmVnaXN0cnlfc2V0X3ZhbHVlJyksCiAgICAoMTA0OCwgJ3N0ZGFwaV9yZWdpc3RyeV9zZXRfdmFsdWVfZGlyZWN0JyksCiAgICAoMTA0OSwgJ3N0ZGFwaV9yZWdpc3RyeV91bmxvYWRfa2V5JyksCiAgICAoMTA1MCwgJ3N0ZGFwaV9zeXNfY29uZmlnX2RyaXZlcl9saXN0JyksCiAgICAoMTA1MSwgJ3N0ZGFwaV9zeXNfY29uZmlnX2Ryb3BfdG9rZW4nKSwKICAgICgxMDUyLCAnc3RkYXBpX3N5c19jb25maWdfZ2V0ZW52JyksCiAgICAoMTA1MywgJ3N0ZGFwaV9zeXNfY29uZmlnX2dldHByaXZzJyksCiAgICAoMTA1NCwgJ3N0ZGFwaV9zeXNfY29uZmlnX2dldHNpZCcpLAogICAgKDEwNTUsICdzdGRhcGlfc3lzX2NvbmZpZ19nZXR1aWQnKSwKICAgICgxMDU2LCAnc3RkYXBpX3N5c19jb25maWdfbG9jYWx0aW1lJyksCiAgICAoMTA1NywgJ3N0ZGFwaV9zeXNfY29uZmlnX3JldjJzZWxmJyksCiAgICAoMTA1OCwgJ3N0ZGFwaV9zeXNfY29uZmlnX3N0ZWFsX3Rva2VuJyksCiAgICAoMTA1OSwgJ3N0ZGFwaV9zeXNfY29uZmlnX3N5c2luZm8nKSwKICAgICgxMDYwLCAnc3RkYXBpX3N5c19ldmVudGxvZ19jbGVhcicpLAogICAgKDEwNjEsICdzdGRhcGlfc3lzX2V2ZW50bG9nX2Nsb3NlJyksCiAgICAoMTA2MiwgJ3N0ZGFwaV9zeXNfZXZlbnRsb2dfbnVtcmVjb3JkcycpLAogICAgKDEwNjMsICdzdGRhcGlfc3lzX2V2ZW50bG9nX29sZGVzdCcpLAogICAgKDEwNjQsICdzdGRhcGlfc3lzX2V2ZW50bG9nX29wZW4nKSwKICAgICgxMDY1LCAnc3RkYXBpX3N5c19ldmVudGxvZ19yZWFkJyksCiAgICAoMTA2NiwgJ3N0ZGFwaV9zeXNfcG93ZXJfZXhpdHdpbmRvd3MnKSwKICAgICgxMDY3LCAnc3RkYXBpX3N5c19wcm9jZXNzX2F0dGFjaCcpLAogICAgKDEwNjgsICdzdGRhcGlfc3lzX3Byb2Nlc3NfY2xvc2UnKSwKICAgICgxMDY5LCAnc3RkYXBpX3N5c19wcm9jZXNzX2V4ZWN1dGUnKSwKICAgICgxMDcwLCAnc3RkYXBpX3N5c19wcm9jZXNzX2dldF9pbmZvJyksCiAgICAoMTA3MSwgJ3N0ZGFwaV9zeXNfcHJvY2Vzc19nZXRfcHJvY2Vzc2VzJyksCiAgICAoMTA3MiwgJ3N0ZGFwaV9zeXNfcHJvY2Vzc19nZXRwaWQnKSwKICAgICgxMDczLCAnc3RkYXBpX3N5c19wcm9jZXNzX2ltYWdlX2dldF9pbWFnZXMnKSwKICAgICgxMDc0LCAnc3RkYXBpX3N5c19wcm9jZXNzX2ltYWdlX2dldF9wcm9jX2FkZHJlc3MnKSwKICAgICgxMDc1LCAnc3RkYXBpX3N5c19wcm9jZXNzX2ltYWdlX2xvYWQnKSwKICAgICgxMDc2LCAnc3RkYXBpX3N5c19wcm9jZXNzX2ltYWdlX3VubG9hZCcpLAogICAgKDEwNzcsICdzdGRhcGlfc3lzX3Byb2Nlc3Nfa2lsbCcpLAogICAgKDEwNzgsICdzdGRhcGlfc3lzX3Byb2Nlc3NfbWVtb3J5X2FsbG9jYXRlJyksCiAgICAoMTA3OSwgJ3N0ZGFwaV9zeXNfcHJvY2Vzc19tZW1vcnlfZnJlZScpLAogICAgKDEwODAsICdzdGRhcGlfc3lzX3Byb2Nlc3NfbWVtb3J5X2xvY2snKSwKICAgICgxMDgxLCAnc3RkYXBpX3N5c19wcm9jZXNzX21lbW9yeV9wcm90ZWN0JyksCiAgICAoMTA4MiwgJ3N0ZGFwaV9zeXNfcHJvY2Vzc19tZW1vcnlfcXVlcnknKSwKICAgICgxMDgzLCAnc3RkYXBpX3N5c19wcm9jZXNzX21lbW9yeV9yZWFkJyksCiAgICAoMTA4NCwgJ3N0ZGFwaV9zeXNfcHJvY2Vzc19tZW1vcnlfdW5sb2NrJyksCiAgICAoMTA4NSwgJ3N0ZGFwaV9zeXNfcHJvY2Vzc19tZW1vcnlfd3JpdGUnKSwKICAgICgxMDg2LCAnc3RkYXBpX3N5c19wcm9jZXNzX3RocmVhZF9jbG9zZScpLAogICAgKDEwODcsICdzdGRhcGlfc3lzX3Byb2Nlc3NfdGhyZWFkX2NyZWF0ZScpLAogICAgKDEwODgsICdzdGRhcGlfc3lzX3Byb2Nlc3NfdGhyZWFkX2dldF90aHJlYWRzJyksCiAgICAoMTA4OSwgJ3N0ZGFwaV9zeXNfcHJvY2Vzc190aHJlYWRfb3BlbicpLAogICAgKDEwOTAsICdzdGRhcGlfc3lzX3Byb2Nlc3NfdGhyZWFkX3F1ZXJ5X3JlZ3MnKSwKICAgICgxMDkxLCAnc3RkYXBpX3N5c19wcm9jZXNzX3RocmVhZF9yZXN1bWUnKSwKICAgICgxMDkyLCAnc3RkYXBpX3N5c19wcm9jZXNzX3RocmVhZF9zZXRfcmVncycpLAogICAgKDEwOTMsICdzdGRhcGlfc3lzX3Byb2Nlc3NfdGhyZWFkX3N1c3BlbmQnKSwKICAgICgxMDk0LCAnc3RkYXBpX3N5c19wcm9jZXNzX3RocmVhZF90ZXJtaW5hdGUnKSwKICAgICgxMDk1LCAnc3RkYXBpX3N5c19wcm9jZXNzX3dhaXQnKSwKICAgICgxMDk2LCAnc3RkYXBpX3VpX2Rlc2t0b3BfZW51bScpLAogICAgKDEwOTcsICdzdGRhcGlfdWlfZGVza3RvcF9nZXQnKSwKICAgICgxMDk4LCAnc3RkYXBpX3VpX2Rlc2t0b3Bfc2NyZWVuc2hvdCcpLAogICAgKDEwOTksICdzdGRhcGlfdWlfZGVza3RvcF9zZXQnKSwKICAgICgxMTAwLCAnc3RkYXBpX3VpX2VuYWJsZV9rZXlib2FyZCcpLAogICAgKDExMDEsICdzdGRhcGlfdWlfZW5hYmxlX21vdXNlJyksCiAgICAoMTEwMiwgJ3N0ZGFwaV91aV9nZXRfaWRsZV90aW1lJyksCiAgICAoMTEwMywgJ3N0ZGFwaV91aV9nZXRfa2V5c191dGY4JyksCiAgICAoMTEwNCwgJ3N0ZGFwaV91aV9zZW5kX2tleWV2ZW50JyksCiAgICAoMTEwNSwgJ3N0ZGFwaV91aV9zZW5kX2tleXMnKSwKICAgICgxMTA2LCAnc3RkYXBpX3VpX3NlbmRfbW91c2UnKSwKICAgICgxMTA3LCAnc3RkYXBpX3VpX3N0YXJ0X2tleXNjYW4nKSwKICAgICgxMTA4LCAnc3RkYXBpX3VpX3N0b3Bfa2V5c2NhbicpLAogICAgKDExMDksICdzdGRhcGlfdWlfdW5sb2NrX2Rlc2t0b3AnKSwKICAgICgxMTEwLCAnc3RkYXBpX3dlYmNhbV9hdWRpb19yZWNvcmQnKSwKICAgICgxMTExLCAnc3RkYXBpX3dlYmNhbV9nZXRfZnJhbWUnKSwKICAgICgxMTEyLCAnc3RkYXBpX3dlYmNhbV9saXN0JyksCiAgICAoMTExMywgJ3N0ZGFwaV93ZWJjYW1fc3RhcnQnKSwKICAgICgxMTE0LCAnc3RkYXBpX3dlYmNhbV9zdG9wJyksCiAgICAoMTExNSwgJ3N0ZGFwaV9hdWRpb19taWNfc3RhcnQnKSwKICAgICgxMTE2LCAnc3RkYXBpX2F1ZGlvX21pY19zdG9wJyksCiAgICAoMTExNywgJ3N0ZGFwaV9hdWRpb19taWNfbGlzdCcpLAopCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpjbGFzcyBTWVNURU1fSU5GTyhjdHlwZXMuU3RydWN0dXJlKToKICAgIF9maWVsZHNfID0gWygid1Byb2Nlc3NvckFyY2hpdGVjdHVyZSIsIGN0eXBlcy5jX3VpbnQxNiksCiAgICAgICAgKCJ3UmVzZXJ2ZWQiLCBjdHlwZXMuY191aW50MTYpLAogICAgICAgICgiZHdQYWdlU2l6ZSIsIGN0eXBlcy5jX3VpbnQzMiksCiAgICAgICAgKCJscE1pbmltdW1BcHBsaWNhdGlvbkFkZHJlc3MiLCBjdHlwZXMuY192b2lkX3ApLAogICAgICAgICgibHBNYXhpbXVtQXBwbGljYXRpb25BZGRyZXNzIiwgY3R5cGVzLmNfdm9pZF9wKSwKICAgICAgICAoImR3QWN0aXZlUHJvY2Vzc29yTWFzayIsIGN0eXBlcy5jX3VpbnQzMiksCiAgICAgICAgKCJkd051bWJlck9mUHJvY2Vzc29ycyIsIGN0eXBlcy5jX3VpbnQzMiksCiAgICAgICAgKCJkd1Byb2Nlc3NvclR5cGUiLCBjdHlwZXMuY191aW50MzIpLAogICAgICAgICgiZHdBbGxvY2F0aW9uR3JhbnVsYXJpdHkiLCBjdHlwZXMuY191aW50MzIpLAogICAgICAgICgid1Byb2Nlc3NvckxldmVsIiwgY3R5cGVzLmNfdWludDE2KSwKICAgICAgICAoIndQcm9jZXNzb3JSZXZpc2lvbiIsIGN0eXBlcy5jX3VpbnQxNildCgpkZWYgcmFuZF9ieXRlcyhuKToKICAgIHJldHVybiBvcy51cmFuZG9tKG4pCgpkZWYgcmFuZF94b3Jfa2V5KCk6CiAgICByZXR1cm4gdHVwbGUocmFuZG9tLnJhbmRpbnQoMSwgMjU1KSBmb3IgXyBpbiByYW5nZSg0KSkKCmRlZiB4b3JfYnl0ZXMoa2V5LCBkYXRhKToKICAgIGlmIHN5cy52ZXJzaW9uX2luZm9bMF0gPCAzOgogICAgICAgIGRleG9yZWQgPSAnJy5qb2luKGNocihvcmQoZGF0YVtpXSkgXiBrZXlbaSAlIGxlbihrZXkpXSkgZm9yIGkgaW4gcmFuZ2UobGVuKGRhdGEpKSkKICAgIGVsc2U6CiAgICAgICAgZGV4b3JlZCA9IGJ5dGVzKGRhdGFbaV0gXiBrZXlbaSAlIGxlbihrZXkpXSBmb3IgaSBpbiByYW5nZShsZW4oZGF0YSkpKQogICAgcmV0dXJuIGRleG9yZWQKCmRlZiBleHBvcnQoc3ltYm9sKToKICAgIEVYUE9SVEVEX1NZTUJPTFNbc3ltYm9sLl9fbmFtZV9fXSA9IHN5bWJvbAogICAgcmV0dXJuIHN5bWJvbAoKZGVmIGdlbmVyYXRlX3JlcXVlc3RfaWQoKToKICAgIGNoYXJzID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6JwogICAgcmV0dXJuICcnLmpvaW4ocmFuZG9tLmNob2ljZShjaGFycykgZm9yIHggaW4gcmFuZ2UoMzIpKQoKQGV4cG9ydApkZWYgY21kX2lkX3RvX3N0cmluZyh0aGlzX2lkKToKICAgIGZvciB0aGF0X2lkLCB0aGF0X3N0cmluZyBpbiBDT01NQU5EX0lEUzoKICAgICAgICBpZiB0aGlzX2lkID09IHRoYXRfaWQ6CiAgICAgICAgICAgIHJldHVybiB0aGF0X3N0cmluZwogICAgZGVidWdfcHJpbnQoJ1sqXSBmYWlsZWQgdG8gbG9va3VwIHN0cmluZyBmb3IgY29tbWFuZCBpZDogJyArIHN0cih0aGlzX2lkKSkKICAgIHJldHVybiBOb25lCgpAZXhwb3J0CmRlZiBjbWRfc3RyaW5nX3RvX2lkKHRoaXNfc3RyaW5nKToKICAgIGZvciB0aGF0X2lkLCB0aGF0X3N0cmluZyBpbiBDT01NQU5EX0lEUzoKICAgICAgICBpZiB0aGlzX3N0cmluZyA9PSB0aGF0X3N0cmluZzoKICAgICAgICAgICAgcmV0dXJuIHRoYXRfaWQKICAgIGRlYnVnX3ByaW50KCdbKl0gZmFpbGVkIHRvIGxvb2t1cCBpZCBmb3IgY29tbWFuZCBzdHJpbmc6ICcgKyB0aGlzX3N0cmluZykKICAgIHJldHVybiBOb25lCgpAZXhwb3J0CmRlZiBjcmMxNihkYXRhKToKICAgIHBvbHkgPSAweDEwMjEKICAgIHJlZyA9IDB4MDAwMAogICAgaWYgaXNfc3RyKGRhdGEpOgogICAgICAgIGRhdGEgPSBsaXN0KG1hcChvcmQsIGRhdGEpKQogICAgZWxpZiBpc19ieXRlcyhkYXRhKToKICAgICAgICBkYXRhID0gbGlzdChkYXRhKQogICAgZGF0YS5hcHBlbmQoMCkKICAgIGRhdGEuYXBwZW5kKDApCiAgICBmb3IgYnl0ZSBpbiBkYXRhOgogICAgICAgIG1hc2sgPSAweDgwCiAgICAgICAgd2hpbGUgbWFzayA+IDA6CiAgICAgICAgICAgIHJlZyA8PD0gMQogICAgICAgICAgICBpZiBieXRlICYgbWFzazoKICAgICAgICAgICAgICAgIHJlZyArPSAxCiAgICAgICAgICAgIG1hc2sgPj49IDEKICAgICAgICAgICAgaWYgcmVnID4gMHhmZmZmOgogICAgICAgICAgICAgICAgcmVnICY9IDB4ZmZmZgogICAgICAgICAgICAgICAgcmVnIF49IHBvbHkKICAgIHJldHVybiByZWcKCkBleHBvcnQKZGVmIGRlYnVnX3ByaW50KG1zZyk6CiAgICBpZiBERUJVR0dJTkc6CiAgICAgICAgcHJpbnQobXNnKQoKQGV4cG9ydApkZWYgZGVidWdfdHJhY2ViYWNrKG1zZz1Ob25lKToKICAgIGlmIERFQlVHR0lORzoKICAgICAgICBpZiBtc2c6CiAgICAgICAgICAgIHByaW50KG1zZykKICAgICAgICB0cmFjZWJhY2sucHJpbnRfZXhjKGZpbGU9c3lzLnN0ZGVycikKCkBleHBvcnQKZGVmIGVycm9yX3Jlc3VsdChleGNlcHRpb249Tm9uZSk6CiAgICBpZiBub3QgZXhjZXB0aW9uOgogICAgICAgIF8sIGV4Y2VwdGlvbiwgXyA9IHN5cy5leGNfaW5mbygpCiAgICBleGNlcHRpb25fY3JjID0gY3JjMTYoZXhjZXB0aW9uLl9fY2xhc3NfXy5fX25hbWVfXykKICAgIGlmIGV4Y2VwdGlvbl9jcmMgPT0gMHg0Y2IyOiAjIFdpbmRvd3NFcnJvcgogICAgICAgIHJldHVybiBlcnJvcl9yZXN1bHRfd2luZG93cyhleGNlcHRpb24uZXJybm8pCiAgICBlbHNlOgogICAgICAgIHJlc3VsdCA9ICgoZXhjZXB0aW9uX2NyYyA8PCAxNikgfCBFUlJPUl9GQUlMVVJFX1BZVEhPTikKICAgIHJldHVybiByZXN1bHQKCkBleHBvcnQKZGVmIGVycm9yX3Jlc3VsdF93aW5kb3dzKGVycm9yX251bWJlcj1Ob25lKToKICAgIGlmIG5vdCBoYXNfd2luZGxsOgogICAgICAgIHJldHVybiBFUlJPUl9GQUlMVVJFCiAgICBpZiBlcnJvcl9udW1iZXIgPT0gTm9uZToKICAgICAgICBlcnJvcl9udW1iZXIgPSBjdHlwZXMud2luZGxsLmtlcm5lbDMyLkdldExhc3RFcnJvcigpCiAgICBpZiBlcnJvcl9udW1iZXIgPiAweGZmZmY6CiAgICAgICAgcmV0dXJuIEVSUk9SX0ZBSUxVUkUKICAgIHJlc3VsdCA9ICgoZXJyb3JfbnVtYmVyIDw8IDE2KSB8IEVSUk9SX0ZBSUxVUkVfV0lORE9XUykKICAgIHJldHVybiByZXN1bHQKCkBleHBvcnQKZGVmIGdldF9oZGRfbGFiZWwoKToKICAgIGZvciBfLCBfLCBmaWxlcyBpbiBvcy53YWxrKCcvZGV2L2Rpc2svYnktaWQvJyk6CiAgICAgICAgZm9yIGYgaW4gZmlsZXM6CiAgICAgICAgICAgIGZvciBwIGluIFsnYXRhLScsICdtYi0nXToKICAgICAgICAgICAgICAgIGlmIGZbOmxlbihwKV0gPT0gcDoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZltsZW4ocCk6XQogICAgcmV0dXJuICcnCgpAZXhwb3J0CmRlZiBnZXRfbmF0aXZlX2FyY2goKToKICAgIGFyY2ggPSBnZXRfc3lzdGVtX2FyY2goKQogICAgaWYgYXJjaCA9PSAneDY0JyBhbmQgY3R5cGVzLnNpemVvZihjdHlwZXMuY192b2lkX3ApID09IDQ6CiAgICAgICAgYXJjaCA9ICd4ODYnCiAgICByZXR1cm4gYXJjaAoKQGV4cG9ydApkZWYgZ2V0X3N5c3RlbV9hcmNoKCk6CiAgICB1bmFtZV9pbmZvID0gcGxhdGZvcm0udW5hbWUoKQogICAgYXJjaCA9IHVuYW1lX2luZm9bNF0KICAgIGlmIGhhc193aW5kbGw6CiAgICAgICAgc3lzaW5mbyA9IFNZU1RFTV9JTkZPKCkKICAgICAgICBjdHlwZXMud2luZGxsLmtlcm5lbDMyLkdldE5hdGl2ZVN5c3RlbUluZm8oY3R5cGVzLmJ5cmVmKHN5c2luZm8pKQogICAgICAgIHZhbHVlcyA9IHswOid4ODYnLCA1Oidhcm1sZScsIDY6J0lBNjQnLCA5Oid4NjQnfQogICAgICAgIGFyY2ggPSB2YWx1ZXMuZ2V0KHN5c2luZm8ud1Byb2Nlc3NvckFyY2hpdGVjdHVyZSwgdW5hbWVfaW5mb1s0XSkKICAgIGlmIGFyY2ggPT0gJ3g4Nl82NCc6CiAgICAgICAgYXJjaCA9ICd4NjQnCiAgICByZXR1cm4gYXJjaAoKQGV4cG9ydApkZWYgaW5ldF9wdG9uKGZhbWlseSwgYWRkcmVzcyk6CiAgICBpZiBmYW1pbHkgPT0gc29ja2V0LkFGX0lORVQ2IGFuZCAnJScgaW4gYWRkcmVzczoKICAgICAgICBhZGRyZXNzID0gYWRkcmVzcy5zcGxpdCgnJScsIDEpWzBdCiAgICBpZiBoYXNhdHRyKHNvY2tldCwgJ2luZXRfcHRvbicpOgogICAgICAgIHJldHVybiBzb2NrZXQuaW5ldF9wdG9uKGZhbWlseSwgYWRkcmVzcykKICAgIGVsaWYgaGFzX3dpbmRsbDoKICAgICAgICBXU0FTdHJpbmdUb0FkZHJlc3MgPSBjdHlwZXMud2luZGxsLndzMl8zMi5XU0FTdHJpbmdUb0FkZHJlc3NBCiAgICAgICAgbHBBZGRyZXNzID0gKGN0eXBlcy5jX3VieXRlICogMjgpKCkKICAgICAgICBscEFkZHJlc3NMZW5ndGggPSBjdHlwZXMuY19pbnQoY3R5cGVzLnNpemVvZihscEFkZHJlc3MpKQogICAgICAgIGlmIFdTQVN0cmluZ1RvQWRkcmVzcyhhZGRyZXNzLCBmYW1pbHksIE5vbmUsIGN0eXBlcy5ieXJlZihscEFkZHJlc3MpLCBjdHlwZXMuYnlyZWYobHBBZGRyZXNzTGVuZ3RoKSkgIT0gMDoKICAgICAgICAgICAgcmFpc2UgRXhjZXB0aW9uKCdXU0FTdHJpbmdUb0FkZHJlc3MgZmFpbGVkJykKICAgICAgICBpZiBmYW1pbHkgPT0gc29ja2V0LkFGX0lORVQ6CiAgICAgICAgICAgIHJldHVybiAnJy5qb2luKG1hcChjaHIsIGxwQWRkcmVzc1s0OjhdKSkKICAgICAgICBlbGlmIGZhbWlseSA9PSBzb2NrZXQuQUZfSU5FVDY6CiAgICAgICAgICAgIHJldHVybiAnJy5qb2luKG1hcChjaHIsIGxwQWRkcmVzc1s4OjI0XSkpCiAgICByYWlzZSBFeGNlcHRpb24oJ25vIHN1aXRhYmxlIGluZXRfcHRvbiBmdW5jdGlvbmFsaXR5IGlzIGF2YWlsYWJsZScpCgpAZXhwb3J0CmRlZiBwYWNrZXRfZW51bV90bHZzKHBrdCwgdGx2X3R5cGU9Tm9uZSk6CiAgICBvZmZzZXQgPSAwCiAgICB3aGlsZSBvZmZzZXQgPCBsZW4ocGt0KToKICAgICAgICB0bHYgPSBzdHJ1Y3QudW5wYWNrKCc+SUknLCBwa3Rbb2Zmc2V0Om9mZnNldCArIDhdKQogICAgICAgIGlmIHRsdl90eXBlIGlzIE5vbmUgb3IgKHRsdlsxXSAmIH5UTFZfTUVUQV9UWVBFX0NPTVBSRVNTRUQpID09IHRsdl90eXBlOgogICAgICAgICAgICB2YWwgPSBwa3Rbb2Zmc2V0ICsgODoob2Zmc2V0ICsgOCArICh0bHZbMF0gLSA4KSldCiAgICAgICAgICAgIGlmICh0bHZbMV0gJiBUTFZfTUVUQV9UWVBFX1NUUklORykgPT0gVExWX01FVEFfVFlQRV9TVFJJTkc6CiAgICAgICAgICAgICAgICB2YWwgPSBzdHIodmFsLnNwbGl0KE5VTExfQllURSwgMSlbMF0pCiAgICAgICAgICAgIGVsaWYgKHRsdlsxXSAmIFRMVl9NRVRBX1RZUEVfVUlOVCkgPT0gVExWX01FVEFfVFlQRV9VSU5UOgogICAgICAgICAgICAgICAgdmFsID0gc3RydWN0LnVucGFjaygnPkknLCB2YWwpWzBdCiAgICAgICAgICAgIGVsaWYgKHRsdlsxXSAmIFRMVl9NRVRBX1RZUEVfUVdPUkQpID09IFRMVl9NRVRBX1RZUEVfUVdPUkQ6CiAgICAgICAgICAgICAgICB2YWwgPSBzdHJ1Y3QudW5wYWNrKCc+UScsIHZhbClbMF0KICAgICAgICAgICAgZWxpZiAodGx2WzFdICYgVExWX01FVEFfVFlQRV9CT09MKSA9PSBUTFZfTUVUQV9UWVBFX0JPT0w6CiAgICAgICAgICAgICAgICB2YWwgPSBib29sKHN0cnVjdC51bnBhY2soJ2InLCB2YWwpWzBdKQogICAgICAgICAgICBlbGlmICh0bHZbMV0gJiBUTFZfTUVUQV9UWVBFX1JBVykgPT0gVExWX01FVEFfVFlQRV9SQVc6CiAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgIHlpZWxkIHsndHlwZSc6IHRsdlsxXSwgJ2xlbmd0aCc6IHRsdlswXSwgJ3ZhbHVlJzogdmFsfQogICAgICAgIG9mZnNldCArPSB0bHZbMF0KICAgIHJldHVybgoKQGV4cG9ydApkZWYgcGFja2V0X2dldF90bHYocGt0LCB0bHZfdHlwZSk6CiAgICB0cnk6CiAgICAgICAgdGx2ID0gbGlzdChwYWNrZXRfZW51bV90bHZzKHBrdCwgdGx2X3R5cGUpKVswXQogICAgZXhjZXB0IEluZGV4RXJyb3I6CiAgICAgICAgcmV0dXJuIHt9CiAgICByZXR1cm4gdGx2CgpAZXhwb3J0CmRlZiB0bHZfcGFjaygqYXJncyk6CiAgICBpZiBsZW4oYXJncykgPT0gMjoKICAgICAgICB0bHYgPSB7J3R5cGUnOmFyZ3NbMF0sICd2YWx1ZSc6YXJnc1sxXX0KICAgIGVsc2U6CiAgICAgICAgdGx2ID0gYXJnc1swXQogICAgZGF0YSA9ICcnCiAgICB2YWx1ZSA9IHRsdlsndmFsdWUnXQogICAgaWYgKHRsdlsndHlwZSddICYgVExWX01FVEFfVFlQRV9VSU5UKSA9PSBUTFZfTUVUQV9UWVBFX1VJTlQ6CiAgICAgICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgZmxvYXQpOgogICAgICAgICAgICB2YWx1ZSA9IGludChyb3VuZCh2YWx1ZSkpCiAgICAgICAgZGF0YSA9IHN0cnVjdC5wYWNrKCc+SUlJJywgMTIsIHRsdlsndHlwZSddLCB2YWx1ZSkKICAgIGVsaWYgKHRsdlsndHlwZSddICYgVExWX01FVEFfVFlQRV9RV09SRCkgPT0gVExWX01FVEFfVFlQRV9RV09SRDoKICAgICAgICBkYXRhID0gc3RydWN0LnBhY2soJz5JSVEnLCAxNiwgdGx2Wyd0eXBlJ10sIHZhbHVlKQogICAgZWxpZiAodGx2Wyd0eXBlJ10gJiBUTFZfTUVUQV9UWVBFX0JPT0wpID09IFRMVl9NRVRBX1RZUEVfQk9PTDoKICAgICAgICBkYXRhID0gc3RydWN0LnBhY2soJz5JSScsIDksIHRsdlsndHlwZSddKSArIGJ5dGVzKGNocihpbnQoYm9vbCh2YWx1ZSkpKSwgJ1VURi04JykKICAgIGVsc2U6CiAgICAgICAgaWYgc3lzLnZlcnNpb25faW5mb1swXSA8IDMgYW5kIHZhbHVlLl9fY2xhc3NfXy5fX25hbWVfXyA9PSAndW5pY29kZSc6CiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuZW5jb2RlKCdVVEYtOCcpCiAgICAgICAgZWxpZiBub3QgaXNfYnl0ZXModmFsdWUpOgogICAgICAgICAgICB2YWx1ZSA9IGJ5dGVzKHZhbHVlLCAnVVRGLTgnKQogICAgICAgIGlmICh0bHZbJ3R5cGUnXSAmIFRMVl9NRVRBX1RZUEVfU1RSSU5HKSA9PSBUTFZfTUVUQV9UWVBFX1NUUklORzoKICAgICAgICAgICAgZGF0YSA9IHN0cnVjdC5wYWNrKCc+SUknLCA4ICsgbGVuKHZhbHVlKSArIDEsIHRsdlsndHlwZSddKSArIHZhbHVlICsgTlVMTF9CWVRFCiAgICAgICAgZWxpZiAodGx2Wyd0eXBlJ10gJiBUTFZfTUVUQV9UWVBFX1JBVykgPT0gVExWX01FVEFfVFlQRV9SQVc6CiAgICAgICAgICAgIGRhdGEgPSBzdHJ1Y3QucGFjaygnPklJJywgOCArIGxlbih2YWx1ZSksIHRsdlsndHlwZSddKSArIHZhbHVlCiAgICAgICAgZWxpZiAodGx2Wyd0eXBlJ10gJiBUTFZfTUVUQV9UWVBFX0dST1VQKSA9PSBUTFZfTUVUQV9UWVBFX0dST1VQOgogICAgICAgICAgICBkYXRhID0gc3RydWN0LnBhY2soJz5JSScsIDggKyBsZW4odmFsdWUpLCB0bHZbJ3R5cGUnXSkgKyB2YWx1ZQogICAgICAgIGVsaWYgKHRsdlsndHlwZSddICYgVExWX01FVEFfVFlQRV9DT01QTEVYKSA9PSBUTFZfTUVUQV9UWVBFX0NPTVBMRVg6CiAgICAgICAgICAgIGRhdGEgPSBzdHJ1Y3QucGFjaygnPklJJywgOCArIGxlbih2YWx1ZSksIHRsdlsndHlwZSddKSArIHZhbHVlCiAgICByZXR1cm4gZGF0YQoKQGV4cG9ydApkZWYgdGx2X3BhY2tfcmVxdWVzdChtZXRob2QsIHBhcnRzPU5vbmUpOgogICAgcGt0ICA9IHN0cnVjdC5wYWNrKCc+SScsIFBBQ0tFVF9UWVBFX1JFUVVFU1QpCiAgICBwa3QgKz0gdGx2X3BhY2soVExWX1RZUEVfQ09NTUFORF9JRCwgY21kX3N0cmluZ190b19pZChtZXRob2QpKQogICAgcGt0ICs9IHRsdl9wYWNrKFRMVl9UWVBFX1VVSUQsIGJpbmFzY2lpLmEyYl9oZXgoYnl0ZXMoUEFZTE9BRF9VVUlELCAnVVRGLTgnKSkpCiAgICBwa3QgKz0gdGx2X3BhY2soVExWX1RZUEVfUkVRVUVTVF9JRCwgZ2VuZXJhdGVfcmVxdWVzdF9pZCgpKQogICAgcGFydHMgPSBwYXJ0cyBvciBbXQogICAgZm9yIHBhcnQgaW4gcGFydHM6CiAgICAgICAgcGt0ICs9IHRsdl9wYWNrKHBhcnRbJ3R5cGUnXSwgcGFydFsndmFsdWUnXSkKICAgIHJldHVybiBwa3QKCiNAZXhwb3J0CmNsYXNzIE1ldGVycHJldGVyQ2hhbm5lbChvYmplY3QpOgogICAgZGVmIGNvcmVfY2xvc2Uoc2VsZiwgcmVxdWVzdCwgcmVzcG9uc2UpOgogICAgICAgIHNlbGYuY2xvc2UoKQogICAgICAgIHJldHVybiBFUlJPUl9TVUNDRVNTLCByZXNwb25zZQoKICAgIGRlZiBjb3JlX2VvZihzZWxmLCByZXF1ZXN0LCByZXNwb25zZSk6CiAgICAgICAgcmVzcG9uc2UgKz0gdGx2X3BhY2soVExWX1RZUEVfQk9PTCwgc2VsZi5lb2YoKSkKICAgICAgICByZXR1cm4gRVJST1JfU1VDQ0VTUywgcmVzcG9uc2UKCiAgICBkZWYgY29yZV9yZWFkKHNlbGYsIHJlcXVlc3QsIHJlc3BvbnNlKToKICAgICAgICBsZW5ndGggPSBwYWNrZXRfZ2V0X3RsdihyZXF1ZXN0LCBUTFZfVFlQRV9MRU5HVEgpWyd2YWx1ZSddCiAgICAgICAgcmVzcG9uc2UgKz0gdGx2X3BhY2soVExWX1RZUEVfQ0hBTk5FTF9EQVRBLCBzZWxmLnJlYWQobGVuZ3RoKSkKICAgICAgICByZXR1cm4gRVJST1JfU1VDQ0VTUywgcmVzcG9uc2UKCiAgICBkZWYgY29yZV93cml0ZShzZWxmLCByZXF1ZXN0LCByZXNwb25zZSk6CiAgICAgICAgY2hhbm5lbF9kYXRhID0gcGFja2V0X2dldF90bHYocmVxdWVzdCwgVExWX1RZUEVfQ0hBTk5FTF9EQVRBKVsndmFsdWUnXQogICAgICAgIHJlc3BvbnNlICs9IHRsdl9wYWNrKFRMVl9UWVBFX0xFTkdUSCwgc2VsZi53cml0ZShjaGFubmVsX2RhdGEpKQogICAgICAgIHJldHVybiBFUlJPUl9TVUNDRVNTLCByZXNwb25zZQoKICAgIGRlZiBjbG9zZShzZWxmKToKICAgICAgICByYWlzZSBOb3RJbXBsZW1lbnRlZEVycm9yKCkKCiAgICBkZWYgZW9mKHNlbGYpOgogICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBpc19hbGl2ZShzZWxmKToKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgIGRlZiBub3RpZnkoc2VsZik6CiAgICAgICAgcmV0dXJuIE5vbmUKCiAgICBkZWYgcmVhZChzZWxmLCBsZW5ndGgpOgogICAgICAgIHJhaXNlIE5vdEltcGxlbWVudGVkRXJyb3IoKQoKICAgIGRlZiB3cml0ZShzZWxmLCBkYXRhKToKICAgICAgICByYWlzZSBOb3RJbXBsZW1lbnRlZEVycm9yKCkKCiNAZXhwb3J0CmNsYXNzIE1ldGVycHJldGVyRmlsZShNZXRlcnByZXRlckNoYW5uZWwpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGZpbGVfb2JqKToKICAgICAgICBzZWxmLmZpbGVfb2JqID0gZmlsZV9vYmoKICAgICAgICBzdXBlcihNZXRlcnByZXRlckZpbGUsIHNlbGYpLl9faW5pdF9fKCkKCiAgICBkZWYgY2xvc2Uoc2VsZik6CiAgICAgICAgc2VsZi5maWxlX29iai5jbG9zZSgpCgogICAgZGVmIGVvZihzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5maWxlX29iai50ZWxsKCkgPj0gb3MuZnN0YXQoc2VsZi5maWxlX29iai5maWxlbm8oKSkuc3Rfc2l6ZQoKICAgIGRlZiByZWFkKHNlbGYsIGxlbmd0aCk6CiAgICAgICAgcmV0dXJuIHNlbGYuZmlsZV9vYmoucmVhZChsZW5ndGgpCgogICAgZGVmIHdyaXRlKHNlbGYsIGRhdGEpOgogICAgICAgIHNlbGYuZmlsZV9vYmoud3JpdGUoZGF0YSkKICAgICAgICByZXR1cm4gbGVuKGRhdGEpCmV4cG9ydChNZXRlcnByZXRlckZpbGUpCgojQGV4cG9ydApjbGFzcyBNZXRlcnByZXRlclByb2Nlc3MoTWV0ZXJwcmV0ZXJDaGFubmVsKToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBwcm9jX2gpOgogICAgICAgIHNlbGYucHJvY19oID0gcHJvY19oCiAgICAgICAgc3VwZXIoTWV0ZXJwcmV0ZXJQcm9jZXNzLCBzZWxmKS5fX2luaXRfXygpCgogICAgZGVmIGNsb3NlKHNlbGYpOgogICAgICAgIHNlbGYucHJvY19oLmtpbGwoKQogICAgICAgIGlmIGhhc2F0dHIoc2VsZi5wcm9jX2guc3RkaW4sICdjbG9zZScpOgogICAgICAgICAgICBzZWxmLnByb2NfaC5zdGRpbi5jbG9zZSgpCiAgICAgICAgaWYgaGFzYXR0cihzZWxmLnByb2NfaC5zdGRvdXQsICdjbG9zZScpOgogICAgICAgICAgICBzZWxmLnByb2NfaC5zdGRvdXQuY2xvc2UoKQogICAgICAgIGlmIGhhc2F0dHIoc2VsZi5wcm9jX2guc3RkZXJyLCAnY2xvc2UnKToKICAgICAgICAgICAgc2VsZi5wcm9jX2guc3RkZXJyLmNsb3NlKCkKCiAgICBkZWYgaXNfYWxpdmUoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYucHJvY19oLnBvbGwoKSBpcyBOb25lCgogICAgZGVmIHJlYWQoc2VsZiwgbGVuZ3RoKToKICAgICAgICBkYXRhID0gJycKICAgICAgICBzdGRvdXRfcmVhZGVyID0gc2VsZi5wcm9jX2guc3Rkb3V0X3JlYWRlcgogICAgICAgIGlmIHN0ZG91dF9yZWFkZXIuaXNfcmVhZF9yZWFkeSgpOgogICAgICAgICAgICBkYXRhID0gc3Rkb3V0X3JlYWRlci5yZWFkKGxlbmd0aCkKICAgICAgICByZXR1cm4gZGF0YQoKICAgIGRlZiB3cml0ZShzZWxmLCBkYXRhKToKICAgICAgICBzZWxmLnByb2NfaC53cml0ZShkYXRhKQogICAgICAgIHJldHVybiBsZW4oZGF0YSkKZXhwb3J0KE1ldGVycHJldGVyUHJvY2VzcykKCiNAZXhwb3J0CmNsYXNzIE1ldGVycHJldGVyU29ja2V0KE1ldGVycHJldGVyQ2hhbm5lbCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgc29jayk6CiAgICAgICAgc2VsZi5zb2NrID0gc29jawogICAgICAgIHNlbGYuX2lzX2FsaXZlID0gVHJ1ZQogICAgICAgIHN1cGVyKE1ldGVycHJldGVyU29ja2V0LCBzZWxmKS5fX2luaXRfXygpCgogICAgZGVmIGNvcmVfd3JpdGUoc2VsZiwgcmVxdWVzdCwgcmVzcG9uc2UpOgogICAgICAgIHRyeToKICAgICAgICAgICAgc3RhdHVzLCByZXNwb25zZSA9IHN1cGVyKE1ldGVycHJldGVyU29ja2V0LCBzZWxmKS5jb3JlX3dyaXRlKHJlcXVlc3QsIHJlc3BvbnNlKQogICAgICAgIGV4Y2VwdCBzb2NrZXQuZXJyb3I6CiAgICAgICAgICAgIHNlbGYuY2xvc2UoKQogICAgICAgICAgICBzZWxmLl9pc19hbGl2ZSA9IEZhbHNlCiAgICAgICAgICAgIHN0YXR1cyA9IEVSUk9SX0ZBSUxVUkUKICAgICAgICByZXR1cm4gc3RhdHVzLCByZXNwb25zZQoKICAgIGRlZiBjbG9zZShzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5zb2NrLmNsb3NlKCkKCiAgICBkZWYgZmlsZW5vKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLnNvY2suZmlsZW5vKCkKCiAgICBkZWYgaXNfYWxpdmUoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYuX2lzX2FsaXZlCgogICAgZGVmIHJlYWQoc2VsZiwgbGVuZ3RoKToKICAgICAgICByZXR1cm4gc2VsZi5zb2NrLnJlY3YobGVuZ3RoKQoKICAgIGRlZiB3cml0ZShzZWxmLCBkYXRhKToKICAgICAgICByZXR1cm4gc2VsZi5zb2NrLnNlbmQoZGF0YSkKZXhwb3J0KE1ldGVycHJldGVyU29ja2V0KQoKI0BleHBvcnQKY2xhc3MgTWV0ZXJwcmV0ZXJTb2NrZXRUQ1BDbGllbnQoTWV0ZXJwcmV0ZXJTb2NrZXQpOgogICAgcGFzcwpleHBvcnQoTWV0ZXJwcmV0ZXJTb2NrZXRUQ1BDbGllbnQpCgojQGV4cG9ydApjbGFzcyBNZXRlcnByZXRlclNvY2tldFRDUFNlcnZlcihNZXRlcnByZXRlclNvY2tldCk6CiAgICBwYXNzCmV4cG9ydChNZXRlcnByZXRlclNvY2tldFRDUFNlcnZlcikKCiNAZXhwb3J0CmNsYXNzIE1ldGVycHJldGVyU29ja2V0VURQQ2xpZW50KE1ldGVycHJldGVyU29ja2V0KToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBzb2NrLCBwZWVyX2FkZHJlc3M9Tm9uZSk6CiAgICAgICAgc3VwZXIoTWV0ZXJwcmV0ZXJTb2NrZXRVRFBDbGllbnQsIHNlbGYpLl9faW5pdF9fKHNvY2spCiAgICAgICAgc2VsZi5wZWVyX2FkZHJlc3MgPSBwZWVyX2FkZHJlc3MKCiAgICBkZWYgY29yZV93cml0ZShzZWxmLCByZXF1ZXN0LCByZXNwb25zZSk6CiAgICAgICAgcGVlcl9ob3N0ID0gcGFja2V0X2dldF90bHYocmVxdWVzdCwgVExWX1RZUEVfUEVFUl9IT1NUKS5nZXQoJ3ZhbHVlJykKICAgICAgICBwZWVyX3BvcnQgPSBwYWNrZXRfZ2V0X3RsdihyZXF1ZXN0LCBUTFZfVFlQRV9QRUVSX1BPUlQpLmdldCgndmFsdWUnKQogICAgICAgIGlmIHBlZXJfaG9zdCBhbmQgcGVlcl9wb3J0OgogICAgICAgICAgICBwZWVyX2FkZHJlc3MgPSAocGVlcl9ob3N0LCBwZWVyX3BvcnQpCiAgICAgICAgZWxpZiBzZWxmLnBlZXJfYWRkcmVzczoKICAgICAgICAgICAgcGVlcl9hZGRyZXNzID0gc2VsZi5wZWVyX2FkZHJlc3MKICAgICAgICBlbHNlOgogICAgICAgICAgICByYWlzZSBSdW50aW1lRXJyb3IoJ3BlZXJfaG9zdCBhbmQgcGVlcl9wb3J0IG11c3QgYmUgc3BlY2lmaWVkIHdpdGggYW4gdW5ib3VuZC91bmNvbm5lY3RlZCBVRFAgY2hhbm5lbCcpCiAgICAgICAgY2hhbm5lbF9kYXRhID0gcGFja2V0X2dldF90bHYocmVxdWVzdCwgVExWX1RZUEVfQ0hBTk5FTF9EQVRBKVsndmFsdWUnXQogICAgICAgIHRyeToKICAgICAgICAgICAgbGVuZ3RoID0gc2VsZi5zb2NrLnNlbmR0byhjaGFubmVsX2RhdGEsIHBlZXJfYWRkcmVzcykKICAgICAgICBleGNlcHQgc29ja2V0LmVycm9yOgogICAgICAgICAgICBzZWxmLmNsb3NlKCkKICAgICAgICAgICAgc2VsZi5faXNfYWxpdmUgPSBGYWxzZQogICAgICAgICAgICBzdGF0dXMgPSBFUlJPUl9GQUlMVVJFCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmVzcG9uc2UgKz0gdGx2X3BhY2soVExWX1RZUEVfTEVOR1RILCBsZW5ndGgpCiAgICAgICAgICAgIHN0YXR1cyA9IEVSUk9SX1NVQ0NFU1MKICAgICAgICByZXR1cm4gc3RhdHVzLCByZXNwb25zZQoKICAgIGRlZiByZWFkKHNlbGYsIGxlbmd0aCk6CiAgICAgICAgcmV0dXJuIHNlbGYuc29jay5yZWN2ZnJvbShsZW5ndGgpWzBdCgogICAgZGVmIHdyaXRlKHNlbGYsIGRhdGEpOgogICAgICAgIHNlbGYuc29jay5zZW5kdG8oZGF0YSwgc2VsZi5wZWVyX2FkZHJlc3MpCmV4cG9ydChNZXRlcnByZXRlclNvY2tldFVEUENsaWVudCkKCmNsYXNzIFNURFByb2Nlc3NCdWZmZXIodGhyZWFkaW5nLlRocmVhZCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgc3RkLCBpc19hbGl2ZSk6CiAgICAgICAgdGhyZWFkaW5nLlRocmVhZC5fX2luaXRfXyhzZWxmKQogICAgICAgIHNlbGYuc3RkID0gc3RkCiAgICAgICAgc2VsZi5pc19hbGl2ZSA9IGlzX2FsaXZlCiAgICAgICAgc2VsZi5kYXRhID0gYnl0ZXMoKQogICAgICAgIHNlbGYuZGF0YV9sb2NrID0gdGhyZWFkaW5nLlJMb2NrKCkKCiAgICBkZWYgcnVuKHNlbGYpOgogICAgICAgIGZvciBieXRlIGluIGl0ZXIobGFtYmRhOiBzZWxmLnN0ZC5yZWFkKDEpLCBieXRlcygpKToKICAgICAgICAgICAgc2VsZi5kYXRhX2xvY2suYWNxdWlyZSgpCiAgICAgICAgICAgIHNlbGYuZGF0YSArPSBieXRlCiAgICAgICAgICAgIHNlbGYuZGF0YV9sb2NrLnJlbGVhc2UoKQoKICAgIGRlZiBpc19yZWFkX3JlYWR5KHNlbGYpOgogICAgICAgIHJldHVybiBsZW4oc2VsZi5kYXRhKSAhPSAwCgogICAgZGVmIHBlZWsoc2VsZiwgbCA9IE5vbmUpOgogICAgICAgIGRhdGEgPSBieXRlcygpCiAgICAgICAgc2VsZi5kYXRhX2xvY2suYWNxdWlyZSgpCiAgICAgICAgaWYgbCA9PSBOb25lOgogICAgICAgICAgICBkYXRhID0gc2VsZi5kYXRhCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZGF0YSA9IHNlbGYuZGF0YVswOmxdCiAgICAgICAgc2VsZi5kYXRhX2xvY2sucmVsZWFzZSgpCiAgICAgICAgcmV0dXJuIGRhdGEKCiAgICBkZWYgcmVhZChzZWxmLCBsID0gTm9uZSk6CiAgICAgICAgc2VsZi5kYXRhX2xvY2suYWNxdWlyZSgpCiAgICAgICAgZGF0YSA9IHNlbGYucGVlayhsKQogICAgICAgIHNlbGYuZGF0YSA9IHNlbGYuZGF0YVtsZW4oZGF0YSk6XQogICAgICAgIHNlbGYuZGF0YV9sb2NrLnJlbGVhc2UoKQogICAgICAgIHJldHVybiBkYXRhCgojQGV4cG9ydApjbGFzcyBTVERQcm9jZXNzKHN1YnByb2Nlc3MuUG9wZW4pOgogICAgZGVmIF9faW5pdF9fKHNlbGYsICphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgZGVidWdfcHJpbnQoJ1sqXSBzdGFydGluZyBwcm9jZXNzOiAnICsgcmVwcihhcmdzWzBdKSkKICAgICAgICBzdWJwcm9jZXNzLlBvcGVuLl9faW5pdF9fKHNlbGYsICphcmdzLCAqKmt3YXJncykKICAgICAgICBzZWxmLmVjaG9fcHJvdGVjdGlvbiA9IEZhbHNlCgogICAgZGVmIGlzX2FsaXZlKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLnBvbGwoKSBpcyBOb25lCgogICAgZGVmIHN0YXJ0KHNlbGYpOgogICAgICAgIHNlbGYuc3Rkb3V0X3JlYWRlciA9IFNURFByb2Nlc3NCdWZmZXIoc2VsZi5zdGRvdXQsIHNlbGYuaXNfYWxpdmUpCiAgICAgICAgc2VsZi5zdGRvdXRfcmVhZGVyLnN0YXJ0KCkKICAgICAgICBzZWxmLnN0ZGVycl9yZWFkZXIgPSBTVERQcm9jZXNzQnVmZmVyKHNlbGYuc3RkZXJyLCBzZWxmLmlzX2FsaXZlKQogICAgICAgIHNlbGYuc3RkZXJyX3JlYWRlci5zdGFydCgpCgogICAgZGVmIHdyaXRlKHNlbGYsIGNoYW5uZWxfZGF0YSk6CiAgICAgICAgbGVuZ3RoID0gc2VsZi5zdGRpbi53cml0ZShjaGFubmVsX2RhdGEpCiAgICAgICAgc2VsZi5zdGRpbi5mbHVzaCgpCiAgICAgICAgaWYgc2VsZi5lY2hvX3Byb3RlY3Rpb246CiAgICAgICAgICAgIGVuZF90aW1lID0gdGltZS50aW1lKCkgKyAwLjUKICAgICAgICAgICAgb3V0X2RhdGEgPSBieXRlcygpCiAgICAgICAgICAgIHdoaWxlICh0aW1lLnRpbWUoKSA8IGVuZF90aW1lKSBhbmQgKG91dF9kYXRhICE9IGNoYW5uZWxfZGF0YSk6CiAgICAgICAgICAgICAgICBpZiBzZWxmLnN0ZG91dF9yZWFkZXIuaXNfcmVhZF9yZWFkeSgpOgogICAgICAgICAgICAgICAgICAgIG91dF9kYXRhID0gc2VsZi5zdGRvdXRfcmVhZGVyLnBlZWsobGVuKGNoYW5uZWxfZGF0YSkpCiAgICAgICAgICAgIGlmIG91dF9kYXRhID09IGNoYW5uZWxfZGF0YToKICAgICAgICAgICAgICAgIHNlbGYuc3Rkb3V0X3JlYWRlci5yZWFkKGxlbihjaGFubmVsX2RhdGEpKQogICAgICAgIHJldHVybiBsZW5ndGgKZXhwb3J0KFNURFByb2Nlc3MpCgpjbGFzcyBUcmFuc3BvcnQob2JqZWN0KToKICAgIGRlZiBfX2luaXRfXyhzZWxmKToKICAgICAgICBzZWxmLmNvbW11bmljYXRpb25fdGltZW91dCA9IFNFU1NJT05fQ09NTVVOSUNBVElPTl9USU1FT1VUCiAgICAgICAgc2VsZi5jb21tdW5pY2F0aW9uX2xhc3QgPSAwCiAgICAgICAgc2VsZi5yZXRyeV90b3RhbCA9IFNFU1NJT05fUkVUUllfVE9UQUwKICAgICAgICBzZWxmLnJldHJ5X3dhaXQgPSBTRVNTSU9OX1JFVFJZX1dBSVQKICAgICAgICBzZWxmLnJlcXVlc3RfcmV0aXJlID0gRmFsc2UKICAgICAgICBzZWxmLmFlc19lbmFibGVkID0gRmFsc2UKICAgICAgICBzZWxmLmFlc19rZXkgPSBOb25lCgogICAgZGVmIF9fcmVwcl9fKHNlbGYpOgogICAgICAgIHJldHVybiAiPHswfSB1cmw9J3sxfScgPiIuZm9ybWF0KHNlbGYuX19jbGFzc19fLl9fbmFtZV9fLCBzZWxmLnVybCkKCiAgICBAcHJvcGVydHkKICAgIGRlZiBjb21tdW5pY2F0aW9uX2hhc19leHBpcmVkKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLmNvbW11bmljYXRpb25fbGFzdCArIHNlbGYuY29tbXVuaWNhdGlvbl90aW1lb3V0IDwgdGltZS50aW1lKCkKCiAgICBAcHJvcGVydHkKICAgIGRlZiBzaG91bGRfcmV0aXJlKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLmNvbW11bmljYXRpb25faGFzX2V4cGlyZWQgb3Igc2VsZi5yZXF1ZXN0X3JldGlyZQoKICAgIEBzdGF0aWNtZXRob2QKICAgIGRlZiBmcm9tX3JlcXVlc3QocmVxdWVzdCk6CiAgICAgICAgdXJsID0gcGFja2V0X2dldF90bHYocmVxdWVzdCwgVExWX1RZUEVfVFJBTlNfVVJMKVsndmFsdWUnXQogICAgICAgIGlmIHVybC5zdGFydHN3aXRoKCd0Y3AnKToKICAgICAgICAgICAgdHJhbnNwb3J0ID0gVGNwVHJhbnNwb3J0KHVybCkKICAgICAgICBlbGlmIHVybC5zdGFydHN3aXRoKCdodHRwJyk6CiAgICAgICAgICAgIHByb3h5ID0gcGFja2V0X2dldF90bHYocmVxdWVzdCwgVExWX1RZUEVfVFJBTlNfUFJPWFlfSE9TVCkuZ2V0KCd2YWx1ZScpCiAgICAgICAgICAgIHVzZXJfYWdlbnQgPSBwYWNrZXRfZ2V0X3RsdihyZXF1ZXN0LCBUTFZfVFlQRV9UUkFOU19VQSkuZ2V0KCd2YWx1ZScsIEhUVFBfVVNFUl9BR0VOVCkKICAgICAgICAgICAgaHR0cF9oZWFkZXJzID0gcGFja2V0X2dldF90bHYocmVxdWVzdCwgVExWX1RZUEVfVFJBTlNfSEVBREVSUykuZ2V0KCd2YWx1ZScsIE5vbmUpCiAgICAgICAgICAgIHRyYW5zcG9ydCA9IEh0dHBUcmFuc3BvcnQodXJsLCBwcm94eT1wcm94eSwgdXNlcl9hZ2VudD11c2VyX2FnZW50KQogICAgICAgICAgICBpZiBodHRwX2hlYWRlcnM6CiAgICAgICAgICAgICAgICBoZWFkZXJzID0ge30KICAgICAgICAgICAgICAgIGZvciBoIGluIGh0dHBfaGVhZGVycy5zdHJpcCgpLnNwbGl0KCJcclxuIik6CiAgICAgICAgICAgICAgICAgICAgcCA9IGguc3BsaXQoJzonKQogICAgICAgICAgICAgICAgICAgIGhlYWRlcnNbcFswXS51cHBlcigpXSA9ICcnLmpvaW4ocFsxOjBdKQogICAgICAgICAgICAgICAgaHR0cF9ob3N0ID0gaGVhZGVycy5nZXQoJ0hPU1QnKQogICAgICAgICAgICAgICAgaHR0cF9jb29raWUgPSBoZWFkZXJzLmdldCgnQ09PS0lFJykKICAgICAgICAgICAgICAgIGh0dHBfcmVmZXJlciA9IGhlYWRlcnMuZ2V0KCdSRUZFUkVSJykKICAgICAgICAgICAgICAgIHRyYW5zcG9ydCA9IEh0dHBUcmFuc3BvcnQodXJsLCBwcm94eT1wcm94eSwgdXNlcl9hZ2VudD11c2VyX2FnZW50LCBodHRwX2hvc3Q9aHR0cF9ob3N0LAogICAgICAgICAgICAgICAgICAgICAgICBodHRwX2Nvb2tpZT1odHRwX2Nvb2tpZSwgaHR0cF9yZWZlcmVyPWh0dHBfcmVmZXJlcikKICAgICAgICB0cmFuc3BvcnQuY29tbXVuaWNhdGlvbl90aW1lb3V0ID0gcGFja2V0X2dldF90bHYocmVxdWVzdCwgVExWX1RZUEVfVFJBTlNfQ09NTV9USU1FT1VUKS5nZXQoJ3ZhbHVlJywgU0VTU0lPTl9DT01NVU5JQ0FUSU9OX1RJTUVPVVQpCiAgICAgICAgdHJhbnNwb3J0LnJldHJ5X3RvdGFsID0gcGFja2V0X2dldF90bHYocmVxdWVzdCwgVExWX1RZUEVfVFJBTlNfUkVUUllfVE9UQUwpLmdldCgndmFsdWUnLCBTRVNTSU9OX1JFVFJZX1RPVEFMKQogICAgICAgIHRyYW5zcG9ydC5yZXRyeV93YWl0ID0gcGFja2V0X2dldF90bHYocmVxdWVzdCwgVExWX1RZUEVfVFJBTlNfUkVUUllfV0FJVCkuZ2V0KCd2YWx1ZScsIFNFU1NJT05fUkVUUllfV0FJVCkKICAgICAgICByZXR1cm4gdHJhbnNwb3J0CgogICAgZGVmIF9hY3RpdmF0ZShzZWxmKToKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgIGRlZiBhY3RpdmF0ZShzZWxmKToKICAgICAgICBzZWxmLmFlc19rZXkgPSBOb25lCiAgICAgICAgc2VsZi5hZXNfZW5hYmxlZCA9IEZhbHNlCiAgICAgICAgZW5kX3RpbWUgPSB0aW1lLnRpbWUoKSArIHNlbGYucmV0cnlfdG90YWwKICAgICAgICB3aGlsZSB0aW1lLnRpbWUoKSA8IGVuZF90aW1lOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBhY3RpdmF0ZV9zdWNjZWVkZWQgPSBzZWxmLl9hY3RpdmF0ZSgpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIGFjdGl2YXRlX3N1Y2NlZWRlZCA9IEZhbHNlCiAgICAgICAgICAgIGlmIGFjdGl2YXRlX3N1Y2NlZWRlZDoKICAgICAgICAgICAgICAgIHNlbGYuY29tbXVuaWNhdGlvbl9sYXN0ID0gdGltZS50aW1lKCkKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIHRpbWUuc2xlZXAoc2VsZi5yZXRyeV93YWl0KQogICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBfZGVhY3RpdmF0ZShzZWxmKToKICAgICAgICByZXR1cm4KCiAgICBkZWYgZGVhY3RpdmF0ZShzZWxmKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGYuX2RlYWN0aXZhdGUoKQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgcGFzcwogICAgICAgIHNlbGYuY29tbXVuaWNhdGlvbl9sYXN0ID0gMAogICAgICAgIHJldHVybiBUcnVlCgogICAgZGVmIGRlY3J5cHRfcGFja2V0KHNlbGYsIHBrdCk6CiAgICAgICAgaWYgcGt0IGFuZCBsZW4ocGt0KSA+IFBBQ0tFVF9IRUFERVJfU0laRToKICAgICAgICAgICAgeG9yX2tleSA9IHN0cnVjdC51bnBhY2soJ0JCQkInLCBwa3RbOlBBQ0tFVF9YT1JfS0VZX1NJWkVdKQogICAgICAgICAgICByYXcgPSB4b3JfYnl0ZXMoeG9yX2tleSwgcGt0KQogICAgICAgICAgICBlbmNfb2Zmc2V0ID0gUEFDS0VUX1hPUl9LRVlfU0laRSArIFBBQ0tFVF9TRVNTSU9OX0dVSURfU0laRQogICAgICAgICAgICBlbmNfZmxhZyA9IHN0cnVjdC51bnBhY2soJz5JJywgcmF3W2VuY19vZmZzZXQ6ZW5jX29mZnNldCtQQUNLRVRfRU5DUllQVF9GTEFHX1NJWkVdKVswXQogICAgICAgICAgICBpZiBlbmNfZmxhZyA9PSBFTkNfQUVTMjU2OgogICAgICAgICAgICAgICAgaXYgPSByYXdbUEFDS0VUX0hFQURFUl9TSVpFOlBBQ0tFVF9IRUFERVJfU0laRSsxNl0KICAgICAgICAgICAgICAgIGVuY3J5cHRlZCA9IHJhd1tQQUNLRVRfSEVBREVSX1NJWkUrbGVuKGl2KTpdCiAgICAgICAgICAgICAgICByZXR1cm4gbWV0X2Flc19kZWNyeXB0KHNlbGYuYWVzX2tleSwgaXYsIGVuY3J5cHRlZCkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJldHVybiByYXdbUEFDS0VUX0hFQURFUl9TSVpFOl0KICAgICAgICByZXR1cm4gTm9uZQoKICAgIGRlZiBnZXRfcGFja2V0KHNlbGYpOgogICAgICAgIHNlbGYucmVxdWVzdF9yZXRpcmUgPSBGYWxzZQogICAgICAgIHRyeToKICAgICAgICAgICAgcGt0ID0gc2VsZi5kZWNyeXB0X3BhY2tldChzZWxmLl9nZXRfcGFja2V0KCkpCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBkZWJ1Z190cmFjZWJhY2soKQogICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgIGlmIHBrdCBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgIHNlbGYuY29tbXVuaWNhdGlvbl9sYXN0ID0gdGltZS50aW1lKCkKICAgICAgICByZXR1cm4gcGt0CgogICAgZGVmIGVuY3J5cHRfcGFja2V0KHNlbGYsIHBrdCk6CiAgICAgICAgIyBUaGUgcGFja2V0IG5vdyBoYXMgdG8gY29udGFpbiBzZXNzaW9uIEdVSUQgYW5kIGVuY3J5cHRpb24gZmxhZyBpbmZvCiAgICAgICAgIyBBbmQgZ2l2ZW4gdGhhdCB3ZSdyZSBub3QgeWV0IHN1cHBvcnRpbmcgQUVTLCB3ZSdyZSBnb2luZyB0byBqdXN0CiAgICAgICAgIyBhbHdheXMgcmV0dXJuIHRoZSBzZXNzaW9uIGd1aWQgYW5kIHRoZSBlbmNyeXB0aW9uIGZsYWcgc2V0IHRvIDAKICAgICAgICBlbmNfdHlwZSA9IEVOQ19OT05FCiAgICAgICAgaWYgc2VsZi5hZXNfa2V5OgogICAgICAgICAgICAjIFRoZSBlbmNyeXB0aW9uIGtleSBpcyBwcmVzZW50LCBidXQgd2Ugc2hvdWxkIG9ubHkgdXNlZCB0aGUga2V5CiAgICAgICAgICAgICMgd2hlbiBpdCBpcyBlbmFibGVkLiBJZiB3ZSB1c2UgaXQgYmVmb3JlIGl0J3MgZW5hYmxlZCwgdGhlbiB3ZQogICAgICAgICAgICAjIGVuZCB1cCBlbmNyeXB0aW5nIHRoZSBwYWNrZXQgdGhhdCBjb250YWlucyB0aGUga2V5IGJlZm9yZQogICAgICAgICAgICAjIHNlbmRpbmcgaXQgYmFjayB0byBNU0YsIGFuZCBpdCB3b24ndCBiZSBhYmxlIHRvIGRlY3J5cHQgaXQgeWV0LgogICAgICAgICAgICBpZiBzZWxmLmFlc19lbmFibGVkOgogICAgICAgICAgICAgICAgaXYgPSByYW5kX2J5dGVzKDE2KQogICAgICAgICAgICAgICAgZW5jID0gaXYgKyBtZXRfYWVzX2VuY3J5cHQoc2VsZi5hZXNfa2V5LCBpdiwgcGt0Wzg6XSkKICAgICAgICAgICAgICAgIGhkciA9IHN0cnVjdC5wYWNrKCc+SScsIGxlbihlbmMpICsgOCkgKyBwa3RbNDo4XQogICAgICAgICAgICAgICAgcGt0ID0gaGRyICsgZW5jCiAgICAgICAgICAgICAgICAjIFdlIGNoYW5nZSB0aGUgcGFja2V0IGVuY3J5cHRpb24gdHlwZSB0byB0ZWxsIE1TRiB0aGF0CiAgICAgICAgICAgICAgICAjIHRoZSBwYWNrZXQgaXMgZW5jcnlwdGVkLgogICAgICAgICAgICAgICAgZW5jX3R5cGUgPSBFTkNfQUVTMjU2CiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIElmIHdlIGdldCBoZXJlLCBpdCBtZWFucyB0aGF0IHRoZSBBRVMgZW5jcnlwdGlvbiBrZXkKICAgICAgICAgICAgICAgICMgaXMgcmVhZHkgdG8gdXNlIGZyb20gdGhpcyBwb2ludCBvbndhcmRzIGFzIHRoZSBsYXN0CiAgICAgICAgICAgICAgICAjIHBsYWluIHRleHQgcGFja2V0IGhhcyBiZWVuIHNlbnQgYmFjayB0byBNU0YgY29udGFpbmluZwogICAgICAgICAgICAgICAgIyB0aGUga2V5LCBhbmQgc28gTVNGIHdpbGwgYmUgYWJsZSB0byBoYW5kbGUgZW5jcnlwdGVkCiAgICAgICAgICAgICAgICAjIGNvbW11bmljYXRpb25zIGZyb20gaGVyZS4KICAgICAgICAgICAgICAgIHNlbGYuYWVzX2VuYWJsZWQgPSBUcnVlCgogICAgICAgIHhvcl9rZXkgPSByYW5kX3hvcl9rZXkoKQogICAgICAgIHJhdyA9IGJpbmFzY2lpLmEyYl9oZXgoYnl0ZXMoU0VTU0lPTl9HVUlELCAnVVRGLTgnKSkgKyBzdHJ1Y3QucGFjaygnPkknLCBlbmNfdHlwZSkgKyBwa3QKICAgICAgICByZXN1bHQgPSBzdHJ1Y3QucGFjaygnQkJCQicsICp4b3Jfa2V5KSArIHhvcl9ieXRlcyh4b3Jfa2V5LCByYXcpCiAgICAgICAgcmV0dXJuIHJlc3VsdAoKICAgIGRlZiBzZW5kX3BhY2tldChzZWxmLCBwa3QpOgogICAgICAgIHBrdCA9IHN0cnVjdC5wYWNrKCc+SScsIGxlbihwa3QpICsgNCkgKyBwa3QKICAgICAgICBzZWxmLnJlcXVlc3RfcmV0aXJlID0gRmFsc2UKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGYuX3NlbmRfcGFja2V0KHNlbGYuZW5jcnlwdF9wYWNrZXQocGt0KSkKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIGRlYnVnX3RyYWNlYmFjaygpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIHNlbGYuY29tbXVuaWNhdGlvbl9sYXN0ID0gdGltZS50aW1lKCkKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgIGRlZiB0bHZfcGFja190aW1lb3V0cyhzZWxmKToKICAgICAgICByZXNwb25zZSAgPSB0bHZfcGFjayhUTFZfVFlQRV9UUkFOU19DT01NX1RJTUVPVVQsIHNlbGYuY29tbXVuaWNhdGlvbl90aW1lb3V0KQogICAgICAgIHJlc3BvbnNlICs9IHRsdl9wYWNrKFRMVl9UWVBFX1RSQU5TX1JFVFJZX1RPVEFMLCBzZWxmLnJldHJ5X3RvdGFsKQogICAgICAgIHJlc3BvbnNlICs9IHRsdl9wYWNrKFRMVl9UWVBFX1RSQU5TX1JFVFJZX1dBSVQsIHNlbGYucmV0cnlfd2FpdCkKICAgICAgICByZXR1cm4gcmVzcG9uc2UKCiAgICBkZWYgdGx2X3BhY2tfdHJhbnNwb3J0X2dyb3VwKHNlbGYpOgogICAgICAgIHRyYW5zX2dyb3VwICA9IHRsdl9wYWNrKFRMVl9UWVBFX1RSQU5TX1VSTCwgc2VsZi51cmwpCiAgICAgICAgdHJhbnNfZ3JvdXAgKz0gc2VsZi50bHZfcGFja190aW1lb3V0cygpCiAgICAgICAgcmV0dXJuIHRyYW5zX2dyb3VwCgpjbGFzcyBIdHRwVHJhbnNwb3J0KFRyYW5zcG9ydCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgdXJsLCBwcm94eT1Ob25lLCB1c2VyX2FnZW50PU5vbmUsIGh0dHBfaG9zdD1Ob25lLCBodHRwX3JlZmVyZXI9Tm9uZSwgaHR0cF9jb29raWU9Tm9uZSk6CiAgICAgICAgc3VwZXIoSHR0cFRyYW5zcG9ydCwgc2VsZikuX19pbml0X18oKQogICAgICAgIG9wZW5lcl9hcmdzID0gW10KICAgICAgICBzY2hlbWUgPSB1cmwuc3BsaXQoJzonLCAxKVswXQogICAgICAgIGlmIHNjaGVtZSA9PSAnaHR0cHMnIGFuZCAoKHN5cy52ZXJzaW9uX2luZm9bMF0gPT0gMiBhbmQgc3lzLnZlcnNpb25faW5mbyA+PSAoMiwgNywgOSkpIG9yIHN5cy52ZXJzaW9uX2luZm8gPj0gKDMsIDQsIDMpKToKICAgICAgICAgICAgaW1wb3J0IHNzbAogICAgICAgICAgICBzc2xfY3R4ID0gc3NsLlNTTENvbnRleHQoc3NsLlBST1RPQ09MX1NTTHYyMykKICAgICAgICAgICAgc3NsX2N0eC5jaGVja19ob3N0bmFtZSA9IEZhbHNlCiAgICAgICAgICAgIHNzbF9jdHgudmVyaWZ5X21vZGUgPSBzc2wuQ0VSVF9OT05FCiAgICAgICAgICAgIG9wZW5lcl9hcmdzLmFwcGVuZCh1cmxsaWIuSFRUUFNIYW5kbGVyKDAsIHNzbF9jdHgpKQogICAgICAgIGlmIHByb3h5OgogICAgICAgICAgICBvcGVuZXJfYXJncy5hcHBlbmQodXJsbGliLlByb3h5SGFuZGxlcih7c2NoZW1lOiBwcm94eX0pKQogICAgICAgICAgICBvcGVuZXJfYXJncy5hcHBlbmQodXJsbGliLlByb3h5QmFzaWNBdXRoSGFuZGxlcigpKQogICAgICAgIHNlbGYucHJveHkgPSBwcm94eQogICAgICAgIG9wZW5lciA9IHVybGxpYi5idWlsZF9vcGVuZXIoKm9wZW5lcl9hcmdzKQogICAgICAgIG9wZW5lci5hZGRoZWFkZXJzID0gW10KICAgICAgICBpZiB1c2VyX2FnZW50OgogICAgICAgICAgICBvcGVuZXIuYWRkaGVhZGVycy5hcHBlbmQoKCdVc2VyLUFnZW50JywgdXNlcl9hZ2VudCkpCiAgICAgICAgaWYgaHR0cF9jb29raWU6CiAgICAgICAgICAgIG9wZW5lci5hZGRoZWFkZXJzLmFwcGVuZCgoJ0Nvb2tpZScsIGh0dHBfY29va2llKSkKICAgICAgICBpZiBodHRwX3JlZmVyZXI6CiAgICAgICAgICAgIG9wZW5lci5hZGRoZWFkZXJzLmFwcGVuZCgoJ1JlZmVyZXInLCBodHRwX3JlZmVyZXIpKQogICAgICAgIHNlbGYudXNlcl9hZ2VudCA9IHVzZXJfYWdlbnQKICAgICAgICB1cmxsaWIuaW5zdGFsbF9vcGVuZXIob3BlbmVyKQogICAgICAgIHNlbGYudXJsID0gdXJsCiAgICAgICAgc2VsZi5faHR0cF9yZXF1ZXN0X2hlYWRlcnMgPSB7J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nfQogICAgICAgIGlmIGh0dHBfaG9zdDoKICAgICAgICAgICAgc2VsZi5faHR0cF9yZXF1ZXN0X2hlYWRlcnNbJ0hvc3QnXSA9IGh0dHBfaG9zdAogICAgICAgIHNlbGYuX2ZpcnN0X3BhY2tldCA9IE5vbmUKICAgICAgICBzZWxmLl9lbXB0eV9jbnQgPSAwCgogICAgZGVmIF9nZXRfcGFja2V0KHNlbGYpOgogICAgICAgIGlmIHNlbGYuX2ZpcnN0X3BhY2tldDoKICAgICAgICAgICAgcGFja2V0ID0gc2VsZi5fZmlyc3RfcGFja2V0CiAgICAgICAgICAgIHNlbGYuX2ZpcnN0X3BhY2tldCA9IE5vbmUKICAgICAgICAgICAgcmV0dXJuIHBhY2tldAogICAgICAgIHBhY2tldCA9IE5vbmUKICAgICAgICB4b3Jfa2V5ID0gTm9uZQogICAgICAgIHVybF9oID0gTm9uZQogICAgICAgIHJlcXVlc3QgPSB1cmxsaWIuUmVxdWVzdChzZWxmLnVybCwgTm9uZSwgc2VsZi5faHR0cF9yZXF1ZXN0X2hlYWRlcnMpCiAgICAgICAgdXJsb3Blbl9rd2FyZ3MgPSB7fQogICAgICAgIGlmIHN5cy52ZXJzaW9uX2luZm8gPiAoMiwgNik6CiAgICAgICAgICAgIHVybG9wZW5fa3dhcmdzWyd0aW1lb3V0J10gPSBzZWxmLmNvbW11bmljYXRpb25fdGltZW91dAogICAgICAgIHRyeToKICAgICAgICAgICAgdXJsX2ggPSB1cmxsaWIudXJsb3BlbihyZXF1ZXN0LCAqKnVybG9wZW5fa3dhcmdzKQogICAgICAgICAgICBpZiB1cmxfaC5jb2RlID09IDIwMDoKICAgICAgICAgICAgICAgIHBhY2tldCA9IHVybF9oLnJlYWQoKQogICAgICAgICAgICAgICAgaWYgbGVuKHBhY2tldCkgPCBQQUNLRVRfSEVBREVSX1NJWkU6CiAgICAgICAgICAgICAgICAgICAgcGFja2V0ID0gTm9uZSAgIyBsb29rcyBjb3JydXB0CiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHhvcl9rZXkgPSBzdHJ1Y3QudW5wYWNrKCdCQkJCJywgcGFja2V0WzpQQUNLRVRfWE9SX0tFWV9TSVpFXSkKICAgICAgICAgICAgICAgICAgICBoZWFkZXIgPSB4b3JfYnl0ZXMoeG9yX2tleSwgcGFja2V0WzpQQUNLRVRfSEVBREVSX1NJWkVdKQogICAgICAgICAgICAgICAgICAgIHBrdF9sZW5ndGggPSBzdHJ1Y3QudW5wYWNrKCc+SScsIGhlYWRlcltQQUNLRVRfTEVOR1RIX09GRjpQQUNLRVRfTEVOR1RIX09GRiArIFBBQ0tFVF9MRU5HVEhfU0laRV0pWzBdIC0gOAogICAgICAgICAgICAgICAgICAgIGlmIGxlbihwYWNrZXQpICE9IChwa3RfbGVuZ3RoICsgUEFDS0VUX0hFQURFUl9TSVpFKToKICAgICAgICAgICAgICAgICAgICAgICAgcGFja2V0ID0gTm9uZSAgIyBsb29rcyBjb3JydXB0CiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBkZWJ1Z190cmFjZWJhY2soJ1stXSBmYWlsdXJlIHRvIHJlY2VpdmUgcGFja2V0IGZyb20gJyArIHNlbGYudXJsKQoKICAgICAgICBpZiBub3QgcGFja2V0OgogICAgICAgICAgICBpZiB1cmxfaCBhbmQgdXJsX2guY29kZSA9PSAyMDA6CiAgICAgICAgICAgICAgICAjIHNlcnZlciBoYXMgbm90aGluZyBmb3IgdXMgYnV0IHRoaXMgaXMgZmluZSBzbyB1cGRhdGUgdGhlIGNvbW11bmljYXRpb24gdGltZSBhbmQgd2FpdAogICAgICAgICAgICAgICAgc2VsZi5jb21tdW5pY2F0aW9uX2xhc3QgPSB0aW1lLnRpbWUoKQogICAgICAgICAgICBkZWxheSA9IDEwMCAqIHNlbGYuX2VtcHR5X2NudAogICAgICAgICAgICBzZWxmLl9lbXB0eV9jbnQgKz0gMQogICAgICAgICAgICB0aW1lLnNsZWVwKGZsb2F0KG1pbigxMDAwMCwgZGVsYXkpKSAvIDEwMDApCiAgICAgICAgICAgIHJldHVybiBwYWNrZXQKCiAgICAgICAgc2VsZi5fZW1wdHlfY250ID0gMAogICAgICAgIHJldHVybiBwYWNrZXQKCiAgICBkZWYgX3NlbmRfcGFja2V0KHNlbGYsIHBhY2tldCk6CiAgICAgICAgcmVxdWVzdCA9IHVybGxpYi5SZXF1ZXN0KHNlbGYudXJsLCBwYWNrZXQsIHNlbGYuX2h0dHBfcmVxdWVzdF9oZWFkZXJzKQogICAgICAgIHVybG9wZW5fa3dhcmdzID0ge30KICAgICAgICBpZiBzeXMudmVyc2lvbl9pbmZvID4gKDIsIDYpOgogICAgICAgICAgICB1cmxvcGVuX2t3YXJnc1sndGltZW91dCddID0gc2VsZi5jb21tdW5pY2F0aW9uX3RpbWVvdXQKICAgICAgICB1cmxfaCA9IHVybGxpYi51cmxvcGVuKHJlcXVlc3QsICoqdXJsb3Blbl9rd2FyZ3MpCiAgICAgICAgcmVzcG9uc2UgPSB1cmxfaC5yZWFkKCkKCiAgICBkZWYgcGF0Y2hfdXJpX3BhdGgoc2VsZiwgbmV3X3BhdGgpOgogICAgICAgIG1hdGNoID0gcmUubWF0Y2gocidodHRwcz86Ly9bXi9dKygvLiokKScsIHNlbGYudXJsKQogICAgICAgIGlmIG1hdGNoIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIHNlbGYudXJsID0gc2VsZi51cmxbOm1hdGNoLnNwYW4oMSlbMF1dICsgbmV3X3BhdGgKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgIGRlZiB0bHZfcGFja190cmFuc3BvcnRfZ3JvdXAoc2VsZik6CiAgICAgICAgdHJhbnNfZ3JvdXAgID0gc3VwZXIoSHR0cFRyYW5zcG9ydCwgc2VsZikudGx2X3BhY2tfdHJhbnNwb3J0X2dyb3VwKCkKICAgICAgICBpZiBzZWxmLnVzZXJfYWdlbnQ6CiAgICAgICAgICAgIHRyYW5zX2dyb3VwICs9IHRsdl9wYWNrKFRMVl9UWVBFX1RSQU5TX1VBLCBzZWxmLnVzZXJfYWdlbnQpCiAgICAgICAgaWYgc2VsZi5wcm94eToKICAgICAgICAgICAgdHJhbnNfZ3JvdXAgKz0gdGx2X3BhY2soVExWX1RZUEVfVFJBTlNfUFJPWFlfSE9TVCwgc2VsZi5wcm94eSkKICAgICAgICByZXR1cm4gdHJhbnNfZ3JvdXAKCmNsYXNzIFRjcFRyYW5zcG9ydChUcmFuc3BvcnQpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHVybCwgc29ja2V0PU5vbmUpOgogICAgICAgIHN1cGVyKFRjcFRyYW5zcG9ydCwgc2VsZikuX19pbml0X18oKQogICAgICAgIHNlbGYudXJsID0gdXJsCiAgICAgICAgc2VsZi5zb2NrZXQgPSBzb2NrZXQKICAgICAgICBzZWxmLl9jbGVhbnVwX3RocmVhZCA9IE5vbmUKICAgICAgICBzZWxmLl9maXJzdF9wYWNrZXQgPSBUcnVlCgogICAgZGVmIF9zb2NrX2NsZWFudXAoc2VsZiwgc29jayk6CiAgICAgICAgcmVtYWluaW5nX3RpbWUgPSBzZWxmLmNvbW11bmljYXRpb25fdGltZW91dAogICAgICAgIHdoaWxlIHJlbWFpbmluZ190aW1lID4gMDoKICAgICAgICAgICAgaXRlcl9zdGFydF90aW1lID0gdGltZS50aW1lKCkKICAgICAgICAgICAgaWYgc2VsZWN0LnNlbGVjdChbc29ja10sIFtdLCBbXSwgcmVtYWluaW5nX3RpbWUpWzBdOgogICAgICAgICAgICAgICAgaWYgbGVuKHNvY2sucmVjdig0MDk2KSkgPT0gMDoKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICByZW1haW5pbmdfdGltZSAtPSB0aW1lLnRpbWUoKSAtIGl0ZXJfc3RhcnRfdGltZQogICAgICAgIHNvY2suY2xvc2UoKQoKICAgIGRlZiBfYWN0aXZhdGUoc2VsZik6CiAgICAgICAgYWRkcmVzcywgcG9ydCA9IHNlbGYudXJsWzY6XS5yc3BsaXQoJzonLCAxKQogICAgICAgIHBvcnQgPSBpbnQocG9ydC5yc3RyaXAoJy8nKSkKICAgICAgICB0aW1lb3V0ID0gbWF4KHNlbGYuY29tbXVuaWNhdGlvbl90aW1lb3V0LCAzMCkKICAgICAgICBpZiBhZGRyZXNzIGluICgnJywgJzAuMC4wLjAnLCAnOjonKToKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgc2VydmVyX3NvY2sgPSBzb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVUNiwgc29ja2V0LlNPQ0tfU1RSRUFNKQogICAgICAgICAgICAgICAgc2VydmVyX3NvY2suc2V0c29ja29wdChzb2NrZXQuSVBQUk9UT19JUFY2LCBzb2NrZXQuSVBWNl9WNk9OTFksIDApCiAgICAgICAgICAgIGV4Y2VwdCAoQXR0cmlidXRlRXJyb3IsIHNvY2tldC5lcnJvcik6CiAgICAgICAgICAgICAgICBzZXJ2ZXJfc29jayA9IHNvY2tldC5zb2NrZXQoc29ja2V0LkFGX0lORVQsIHNvY2tldC5TT0NLX1NUUkVBTSkKICAgICAgICAgICAgc2VydmVyX3NvY2suYmluZCgoJycsIHBvcnQpKQogICAgICAgICAgICBzZXJ2ZXJfc29jay5saXN0ZW4oMSkKICAgICAgICAgICAgaWYgbm90IHNlbGVjdC5zZWxlY3QoW3NlcnZlcl9zb2NrXSwgW10sIFtdLCB0aW1lb3V0KVswXToKICAgICAgICAgICAgICAgIHNlcnZlcl9zb2NrLmNsb3NlKCkKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICBzb2NrLCBfID0gc2VydmVyX3NvY2suYWNjZXB0KCkKICAgICAgICAgICAgc2VydmVyX3NvY2suY2xvc2UoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGlmICc6JyBpbiBhZGRyZXNzOgogICAgICAgICAgICAgICAgc29jayA9IHNvY2tldC5zb2NrZXQoc29ja2V0LkFGX0lORVQ2LCBzb2NrZXQuU09DS19TVFJFQU0pCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzb2NrID0gc29ja2V0LnNvY2tldChzb2NrZXQuQUZfSU5FVCwgc29ja2V0LlNPQ0tfU1RSRUFNKQogICAgICAgICAgICBzb2NrLnNldHRpbWVvdXQodGltZW91dCkKICAgICAgICAgICAgc29jay5jb25uZWN0KChhZGRyZXNzLCBwb3J0KSkKICAgICAgICAgICAgc29jay5zZXR0aW1lb3V0KE5vbmUpCiAgICAgICAgc2VsZi5zb2NrZXQgPSBzb2NrCiAgICAgICAgc2VsZi5fZmlyc3RfcGFja2V0ID0gVHJ1ZQogICAgICAgIHJldHVybiBUcnVlCgogICAgZGVmIF9kZWFjdGl2YXRlKHNlbGYpOgogICAgICAgIGNsZWFudXAgPSB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1zZWxmLl9zb2NrX2NsZWFudXAsIGFyZ3M9KHNlbGYuc29ja2V0LCkpCiAgICAgICAgY2xlYW51cC5ydW4oKQogICAgICAgIHNlbGYuc29ja2V0ID0gTm9uZQoKICAgIGRlZiBfZ2V0X3BhY2tldChzZWxmKToKICAgICAgICBmaXJzdCA9IHNlbGYuX2ZpcnN0X3BhY2tldAogICAgICAgIHNlbGYuX2ZpcnN0X3BhY2tldCA9IEZhbHNlCiAgICAgICAgaWYgbm90IHNlbGVjdC5zZWxlY3QoW3NlbGYuc29ja2V0XSwgW10sIFtdLCAwLjUpWzBdOgogICAgICAgICAgICByZXR1cm4gYnl0ZXMoKQogICAgICAgIHBhY2tldCA9IHNlbGYuc29ja2V0LnJlY3YoUEFDS0VUX0hFQURFUl9TSVpFKQogICAgICAgIGlmIHBhY2tldCA9PSAnJzogICMgcmVtb3RlIGlzIGNsb3NlZAogICAgICAgICAgICBzZWxmLnJlcXVlc3RfcmV0aXJlID0gVHJ1ZQogICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgIGlmIGxlbihwYWNrZXQpICE9IFBBQ0tFVF9IRUFERVJfU0laRToKICAgICAgICAgICAgaWYgZmlyc3QgYW5kIGxlbihwYWNrZXQpID09IDQ6CiAgICAgICAgICAgICAgICByZWNlaXZlZCA9IDAKICAgICAgICAgICAgICAgIGhlYWRlciA9IHBhY2tldFs6NF0KICAgICAgICAgICAgICAgIHBrdF9sZW5ndGggPSBzdHJ1Y3QudW5wYWNrKCc+SScsIGhlYWRlcilbMF0KICAgICAgICAgICAgICAgIHNlbGYuc29ja2V0LnNldHRpbWVvdXQobWF4KHNlbGYuY29tbXVuaWNhdGlvbl90aW1lb3V0LCAzMCkpCiAgICAgICAgICAgICAgICB3aGlsZSByZWNlaXZlZCA8IHBrdF9sZW5ndGg6CiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZWQgKz0gbGVuKHNlbGYuc29ja2V0LnJlY3YocGt0X2xlbmd0aCAtIHJlY2VpdmVkKSkKICAgICAgICAgICAgICAgIHNlbGYuc29ja2V0LnNldHRpbWVvdXQoTm9uZSkKICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLl9nZXRfcGFja2V0KCkKICAgICAgICAgICAgcmV0dXJuIE5vbmUKCiAgICAgICAgeG9yX2tleSA9IHN0cnVjdC51bnBhY2soJ0JCQkInLCBwYWNrZXRbOlBBQ0tFVF9YT1JfS0VZX1NJWkVdKQogICAgICAgICMgWE9SIHRoZSB3aG9sZSBoZWFkZXIgZmlyc3QKICAgICAgICBoZWFkZXIgPSB4b3JfYnl0ZXMoeG9yX2tleSwgcGFja2V0WzpQQUNLRVRfSEVBREVSX1NJWkVdKQogICAgICAgICMgRXh0cmFjdCBqdXN0IHRoZSBsZW5ndGgKICAgICAgICBwa3RfbGVuZ3RoID0gc3RydWN0LnVucGFjaygnPkknLCBoZWFkZXJbUEFDS0VUX0xFTkdUSF9PRkY6UEFDS0VUX0xFTkdUSF9PRkYrUEFDS0VUX0xFTkdUSF9TSVpFXSlbMF0KICAgICAgICBwa3RfbGVuZ3RoIC09IDgKICAgICAgICAjIFJlYWQgdGhlIHJlc3Qgb2YgdGhlIHBhY2tldAogICAgICAgIHJlc3QgPSBieXRlcygpCiAgICAgICAgd2hpbGUgbGVuKHJlc3QpIDwgcGt0X2xlbmd0aDoKICAgICAgICAgICAgcmVzdCArPSBzZWxmLnNvY2tldC5yZWN2KHBrdF9sZW5ndGggLSBsZW4ocmVzdCkpCiAgICAgICAgIyByZXR1cm4gdGhlIHdob2xlIHBhY2tldCwgYXMgaXQncyBkZWNvZGVkIHNlcGFyYXRlbHkKICAgICAgICByZXR1cm4gcGFja2V0ICsgcmVzdAoKICAgIGRlZiBfc2VuZF9wYWNrZXQoc2VsZiwgcGFja2V0KToKICAgICAgICBzZWxmLnNvY2tldC5zZW5kKHBhY2tldCkKCiAgICBAY2xhc3NtZXRob2QKICAgIGRlZiBmcm9tX3NvY2tldChjbHMsIHNvY2spOgogICAgICAgIHVybCA9ICd0Y3A6Ly8nCiAgICAgICAgYWRkcmVzcywgcG9ydCA9IHNvY2suZ2V0c29ja25hbWUoKVs6Ml0KICAgICAgICAjIHRoaXMgd2lsbCBuZWVkIHRvIGJlIGNoYW5nZWQgaWYgdGhlIGJpbmQgc3RhZ2VyIGV2ZXIgc3VwcG9ydHMgYmluZGluZyB0byBhIHNwZWNpZmljIGFkZHJlc3MKICAgICAgICBpZiBub3QgYWRkcmVzcyBpbiAoJycsICcwLjAuMC4wJywgJzo6Jyk6CiAgICAgICAgICAgIGFkZHJlc3MsIHBvcnQgPSBzb2NrLmdldHBlZXJuYW1lKClbOjJdCiAgICAgICAgdXJsICs9IGFkZHJlc3MgKyAnOicgKyBzdHIocG9ydCkKICAgICAgICByZXR1cm4gY2xzKHVybCwgc29jaykKCmNsYXNzIFB5dGhvbk1ldGVycHJldGVyKG9iamVjdCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgdHJhbnNwb3J0KToKICAgICAgICBzZWxmLnRyYW5zcG9ydCA9IHRyYW5zcG9ydAogICAgICAgIHNlbGYuX3RyYW5zcG9ydF9zbGVlcCA9IE5vbmUKICAgICAgICBzZWxmLnJ1bm5pbmcgPSBGYWxzZQogICAgICAgIHNlbGYubGFzdF9yZWdpc3RlcmVkX2V4dGVuc2lvbiA9IE5vbmUKICAgICAgICBzZWxmLmV4dGVuc2lvbl9mdW5jdGlvbnMgPSB7fQogICAgICAgIHNlbGYuY2hhbm5lbHMgPSB7fQogICAgICAgIHNlbGYubmV4dF9jaGFubmVsX2lkID0gMQogICAgICAgIHNlbGYuaW50ZXJhY3RfY2hhbm5lbHMgPSBbXQogICAgICAgIHNlbGYucHJvY2Vzc2VzID0ge30KICAgICAgICBzZWxmLm5leHRfcHJvY2Vzc19pZCA9IDEKICAgICAgICBzZWxmLnRyYW5zcG9ydHMgPSBbc2VsZi50cmFuc3BvcnRdCiAgICAgICAgc2VsZi5zZXNzaW9uX2V4cGlyeV90aW1lID0gU0VTU0lPTl9FWFBJUkFUSU9OX1RJTUVPVVQKICAgICAgICBzZWxmLnNlc3Npb25fZXhwaXJ5X2VuZCA9IHRpbWUudGltZSgpICsgc2VsZi5zZXNzaW9uX2V4cGlyeV90aW1lCiAgICAgICAgZm9yIGZ1bmMgaW4gbGlzdChmaWx0ZXIobGFtYmRhIHg6IHguc3RhcnRzd2l0aCgnX2NvcmUnKSwgZGlyKHNlbGYpKSk6CiAgICAgICAgICAgIHNlbGYuZXh0ZW5zaW9uX2Z1bmN0aW9uc1tmdW5jWzE6XV0gPSBnZXRhdHRyKHNlbGYsIGZ1bmMpCiAgICAgICAgc2VsZi5ydW5uaW5nID0gVHJ1ZQoKICAgIGRlZiByZWdpc3Rlcl9leHRlbnNpb24oc2VsZiwgZXh0ZW5zaW9uX25hbWUpOgogICAgICAgIHNlbGYubGFzdF9yZWdpc3RlcmVkX2V4dGVuc2lvbiA9IGV4dGVuc2lvbl9uYW1lCiAgICAgICAgcmV0dXJuIHNlbGYubGFzdF9yZWdpc3RlcmVkX2V4dGVuc2lvbgoKICAgIGRlZiByZWdpc3Rlcl9mdW5jdGlvbihzZWxmLCBmdW5jKToKICAgICAgICBzZWxmLmV4dGVuc2lvbl9mdW5jdGlvbnNbZnVuYy5fX25hbWVfX10gPSBmdW5jCiAgICAgICAgcmV0dXJuIGZ1bmMKCiAgICBkZWYgcmVnaXN0ZXJfZnVuY3Rpb25faWYoc2VsZiwgY29uZGl0aW9uKToKICAgICAgICBpZiBjb25kaXRpb246CiAgICAgICAgICAgIHJldHVybiBzZWxmLnJlZ2lzdGVyX2Z1bmN0aW9uCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIGxhbWJkYSBmdW5jdGlvbjogZnVuY3Rpb24KCiAgICBkZWYgcmVnaXN0ZXJfZnVuY3Rpb25fd2luZGxsKHNlbGYsIGZ1bmMpOgogICAgICAgIGlmIGhhc193aW5kbGw6CiAgICAgICAgICAgIHNlbGYucmVnaXN0ZXJfZnVuY3Rpb24oZnVuYykKICAgICAgICByZXR1cm4gZnVuYwoKICAgIGRlZiBhZGRfY2hhbm5lbChzZWxmLCBjaGFubmVsKToKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShjaGFubmVsLCBNZXRlcnByZXRlckNoYW5uZWwpOgogICAgICAgICAgICBkZWJ1Z19wcmludCgnWy1dIGNoYW5uZWwgb2JqZWN0IGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBNZXRlcnByZXRlckNoYW5uZWwnKQogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoJ2ludmFsaWQgY2hhbm5lbCBvYmplY3QnKQogICAgICAgIGlkeCA9IHNlbGYubmV4dF9jaGFubmVsX2lkCiAgICAgICAgc2VsZi5jaGFubmVsc1tpZHhdID0gY2hhbm5lbAogICAgICAgIGRlYnVnX3ByaW50KCdbKl0gYWRkZWQgY2hhbm5lbCBpZDogJyArIHN0cihpZHgpICsgJyB0eXBlOiAnICsgY2hhbm5lbC5fX2NsYXNzX18uX19uYW1lX18pCiAgICAgICAgc2VsZi5uZXh0X2NoYW5uZWxfaWQgKz0gMQogICAgICAgIHJldHVybiBpZHgKCiAgICBkZWYgYWRkX3Byb2Nlc3Moc2VsZiwgcHJvY2Vzcyk6CiAgICAgICAgaWR4ID0gc2VsZi5uZXh0X3Byb2Nlc3NfaWQKICAgICAgICBzZWxmLnByb2Nlc3Nlc1tpZHhdID0gcHJvY2VzcwogICAgICAgIGRlYnVnX3ByaW50KCdbKl0gYWRkZWQgcHJvY2VzcyBpZDogJyArIHN0cihpZHgpKQogICAgICAgIHNlbGYubmV4dF9wcm9jZXNzX2lkICs9IDEKICAgICAgICByZXR1cm4gaWR4CgogICAgZGVmIGdldF9wYWNrZXQoc2VsZik6CiAgICAgICAgcGt0ID0gc2VsZi50cmFuc3BvcnQuZ2V0X3BhY2tldCgpCiAgICAgICAgaWYgcGt0IGlzIE5vbmUgYW5kIHNlbGYudHJhbnNwb3J0LnNob3VsZF9yZXRpcmU6CiAgICAgICAgICAgIHNlbGYudHJhbnNwb3J0X2NoYW5nZSgpCiAgICAgICAgcmV0dXJuIHBrdAoKICAgIGRlZiBzZW5kX3BhY2tldChzZWxmLCBwYWNrZXQpOgogICAgICAgIHNlbmRfc3VjY2VlZGVkID0gc2VsZi50cmFuc3BvcnQuc2VuZF9wYWNrZXQocGFja2V0KQogICAgICAgIGlmIG5vdCBzZW5kX3N1Y2NlZWRlZCBhbmQgc2VsZi50cmFuc3BvcnQuc2hvdWxkX3JldGlyZToKICAgICAgICAgICAgc2VsZi50cmFuc3BvcnRfY2hhbmdlKCkKICAgICAgICByZXR1cm4gc2VuZF9zdWNjZWVkZWQKCiAgICBAcHJvcGVydHkKICAgIGRlZiBzZXNzaW9uX2hhc19leHBpcmVkKHNlbGYpOgogICAgICAgIGlmIHNlbGYuc2Vzc2lvbl9leHBpcnlfdGltZSA9PSAwOgogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICByZXR1cm4gdGltZS50aW1lKCkgPiBzZWxmLnNlc3Npb25fZXhwaXJ5X2VuZAoKICAgIGRlZiB0cmFuc3BvcnRfYWRkKHNlbGYsIG5ld190cmFuc3BvcnQpOgogICAgICAgIG5ld19wb3NpdGlvbiA9IHNlbGYudHJhbnNwb3J0cy5pbmRleChzZWxmLnRyYW5zcG9ydCkKICAgICAgICBzZWxmLnRyYW5zcG9ydHMuaW5zZXJ0KG5ld19wb3NpdGlvbiwgbmV3X3RyYW5zcG9ydCkKCiAgICBkZWYgdHJhbnNwb3J0X2NoYW5nZShzZWxmLCBuZXdfdHJhbnNwb3J0PU5vbmUpOgogICAgICAgIGlmIG5ld190cmFuc3BvcnQgaXMgTm9uZToKICAgICAgICAgICAgbmV3X3RyYW5zcG9ydCA9IHNlbGYudHJhbnNwb3J0X25leHQoKQogICAgICAgIHNlbGYudHJhbnNwb3J0LmRlYWN0aXZhdGUoKQogICAgICAgIGRlYnVnX3ByaW50KCdbKl0gY2hhbmdpbmcgdHJhbnNwb3J0IHRvOiAnICsgbmV3X3RyYW5zcG9ydC51cmwpCiAgICAgICAgd2hpbGUgbm90IG5ld190cmFuc3BvcnQuYWN0aXZhdGUoKToKICAgICAgICAgICAgbmV3X3RyYW5zcG9ydCA9IHNlbGYudHJhbnNwb3J0X25leHQobmV3X3RyYW5zcG9ydCkKICAgICAgICAgICAgZGVidWdfcHJpbnQoJ1sqXSBjaGFuZ2luZyB0cmFuc3BvcnQgdG86ICcgKyBuZXdfdHJhbnNwb3J0LnVybCkKICAgICAgICBzZWxmLnRyYW5zcG9ydCA9IG5ld190cmFuc3BvcnQKCiAgICBkZWYgdHJhbnNwb3J0X25leHQoc2VsZiwgY3VycmVudF90cmFuc3BvcnQ9Tm9uZSk6CiAgICAgICAgaWYgY3VycmVudF90cmFuc3BvcnQgaXMgTm9uZToKICAgICAgICAgICAgY3VycmVudF90cmFuc3BvcnQgPSBzZWxmLnRyYW5zcG9ydAogICAgICAgIG5ld19pZHggPSBzZWxmLnRyYW5zcG9ydHMuaW5kZXgoY3VycmVudF90cmFuc3BvcnQpICsgMQogICAgICAgIGlmIG5ld19pZHggPT0gbGVuKHNlbGYudHJhbnNwb3J0cyk6CiAgICAgICAgICAgIG5ld19pZHggPSAwCiAgICAgICAgcmV0dXJuIHNlbGYudHJhbnNwb3J0c1tuZXdfaWR4XQoKICAgIGRlZiB0cmFuc3BvcnRfcHJldihzZWxmLCBjdXJyZW50X3RyYW5zcG9ydD1Ob25lKToKICAgICAgICBpZiBjdXJyZW50X3RyYW5zcG9ydCBpcyBOb25lOgogICAgICAgICAgICBjdXJyZW50X3RyYW5zcG9ydCA9IHNlbGYudHJhbnNwb3J0CiAgICAgICAgbmV3X2lkeCA9IHNlbGYudHJhbnNwb3J0cy5pbmRleChjdXJyZW50X3RyYW5zcG9ydCkgLSAxCiAgICAgICAgaWYgbmV3X2lkeCA9PSAtMToKICAgICAgICAgICAgbmV3X2lkeCA9IGxlbihzZWxmLnRyYW5zcG9ydHMpIC0gMQogICAgICAgIHJldHVybiBzZWxmLnRyYW5zcG9ydHNbbmV3X2lkeF0KCiAgICBkZWYgcnVuKHNlbGYpOgogICAgICAgIHdoaWxlIHNlbGYucnVubmluZyBhbmQgbm90IHNlbGYuc2Vzc2lvbl9oYXNfZXhwaXJlZDoKICAgICAgICAgICAgcmVxdWVzdCA9IHNlbGYuZ2V0X3BhY2tldCgpCiAgICAgICAgICAgIGlmIHJlcXVlc3Q6CiAgICAgICAgICAgICAgICByZXNwb25zZSA9IHNlbGYuY3JlYXRlX3Jlc3BvbnNlKHJlcXVlc3QpCiAgICAgICAgICAgICAgICBpZiByZXNwb25zZToKICAgICAgICAgICAgICAgICAgICBzZWxmLnNlbmRfcGFja2V0KHJlc3BvbnNlKQogICAgICAgICAgICAgICAgaWYgc2VsZi5fdHJhbnNwb3J0X3NsZWVwOgogICAgICAgICAgICAgICAgICAgIHNlbGYudHJhbnNwb3J0LmRlYWN0aXZhdGUoKQogICAgICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoc2VsZi5fdHJhbnNwb3J0X3NsZWVwKQogICAgICAgICAgICAgICAgICAgIHNlbGYuX3RyYW5zcG9ydF9zbGVlcCA9IE5vbmUKICAgICAgICAgICAgICAgICAgICBpZiBub3Qgc2VsZi50cmFuc3BvcnQuYWN0aXZhdGUoKToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi50cmFuc3BvcnRfY2hhbmdlKCkKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAjIGl0ZXJhdGUgb3ZlciB0aGUga2V5cyBiZWNhdXNlIHNlbGYuY2hhbm5lbHMgY291bGQgYmUgbW9kaWZpZWQgaWYgb25lIGlzIGNsb3NlZAogICAgICAgICAgICBjaGFubmVsX2lkcyA9IGxpc3Qoc2VsZi5jaGFubmVscy5rZXlzKCkpCiAgICAgICAgICAgIGZvciBjaGFubmVsX2lkIGluIGNoYW5uZWxfaWRzOgogICAgICAgICAgICAgICAgY2hhbm5lbCA9IHNlbGYuY2hhbm5lbHNbY2hhbm5lbF9pZF0KICAgICAgICAgICAgICAgIGRhdGEgPSBieXRlcygpCiAgICAgICAgICAgICAgICB3cml0ZV9yZXF1ZXN0X3BhcnRzID0gW10KICAgICAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UoY2hhbm5lbCwgTWV0ZXJwcmV0ZXJQcm9jZXNzKToKICAgICAgICAgICAgICAgICAgICBpZiBub3QgY2hhbm5lbF9pZCBpbiBzZWxmLmludGVyYWN0X2NoYW5uZWxzOgogICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgICAgIHByb2NfaCA9IGNoYW5uZWwucHJvY19oCiAgICAgICAgICAgICAgICAgICAgaWYgcHJvY19oLnN0ZGVycl9yZWFkZXIuaXNfcmVhZF9yZWFkeSgpOgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gcHJvY19oLnN0ZGVycl9yZWFkZXIucmVhZCgpCiAgICAgICAgICAgICAgICAgICAgZWxpZiBwcm9jX2guc3Rkb3V0X3JlYWRlci5pc19yZWFkX3JlYWR5KCk6CiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBwcm9jX2guc3Rkb3V0X3JlYWRlci5yZWFkKCkKICAgICAgICAgICAgICAgICAgICBlbGlmIG5vdCBjaGFubmVsLmlzX2FsaXZlKCk6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGFuZGxlX2RlYWRfcmVzb3VyY2VfY2hhbm5lbChjaGFubmVsX2lkKQogICAgICAgICAgICAgICAgZWxpZiBpc2luc3RhbmNlKGNoYW5uZWwsIE1ldGVycHJldGVyU29ja2V0VENQQ2xpZW50KToKICAgICAgICAgICAgICAgICAgICB3aGlsZSBzZWxlY3Quc2VsZWN0KFtjaGFubmVsLmZpbGVubygpXSwgW10sIFtdLCAwKVswXToKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZCA9IGNoYW5uZWwucmVhZCgxKQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQgc29ja2V0LmVycm9yOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZCA9IGJ5dGVzKCkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgbGVuKGQpID09IDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhhbmRsZV9kZWFkX3Jlc291cmNlX2NoYW5uZWwoY2hhbm5lbF9pZCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgKz0gZAogICAgICAgICAgICAgICAgZWxpZiBpc2luc3RhbmNlKGNoYW5uZWwsIE1ldGVycHJldGVyU29ja2V0VENQU2VydmVyKToKICAgICAgICAgICAgICAgICAgICBpZiBzZWxlY3Quc2VsZWN0KFtjaGFubmVsLmZpbGVubygpXSwgW10sIFtdLCAwKVswXToKICAgICAgICAgICAgICAgICAgICAgICAgKGNsaWVudF9zb2NrLCBjbGllbnRfYWRkcikgPSBjaGFubmVsLnNvY2suYWNjZXB0KCkKICAgICAgICAgICAgICAgICAgICAgICAgc2VydmVyX2FkZHIgPSBjaGFubmVsLnNvY2suZ2V0c29ja25hbWUoKQogICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRfY2hhbm5lbF9pZCA9IHNlbGYuYWRkX2NoYW5uZWwoTWV0ZXJwcmV0ZXJTb2NrZXRUQ1BDbGllbnQoY2xpZW50X3NvY2spKQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNlbmRfcGFja2V0KHRsdl9wYWNrX3JlcXVlc3QoJ3N0ZGFwaV9uZXRfdGNwX2NoYW5uZWxfb3BlbicsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsndHlwZSc6IFRMVl9UWVBFX0NIQU5ORUxfSUQsICd2YWx1ZSc6IGNsaWVudF9jaGFubmVsX2lkfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsndHlwZSc6IFRMVl9UWVBFX0NIQU5ORUxfUEFSRU5USUQsICd2YWx1ZSc6IGNoYW5uZWxfaWR9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgeyd0eXBlJzogVExWX1RZUEVfTE9DQUxfSE9TVCwgJ3ZhbHVlJzogaW5ldF9wdG9uKGNoYW5uZWwuc29jay5mYW1pbHksIHNlcnZlcl9hZGRyWzBdKX0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7J3R5cGUnOiBUTFZfVFlQRV9MT0NBTF9QT1JULCAndmFsdWUnOiBzZXJ2ZXJfYWRkclsxXX0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7J3R5cGUnOiBUTFZfVFlQRV9QRUVSX0hPU1QsICd2YWx1ZSc6IGluZXRfcHRvbihjbGllbnRfc29jay5mYW1pbHksIGNsaWVudF9hZGRyWzBdKX0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7J3R5cGUnOiBUTFZfVFlQRV9QRUVSX1BPUlQsICd2YWx1ZSc6IGNsaWVudF9hZGRyWzFdfSwKICAgICAgICAgICAgICAgICAgICAgICAgXSkpCiAgICAgICAgICAgICAgICBlbGlmIGlzaW5zdGFuY2UoY2hhbm5lbCwgTWV0ZXJwcmV0ZXJTb2NrZXRVRFBDbGllbnQpOgogICAgICAgICAgICAgICAgICAgIGlmIHNlbGVjdC5zZWxlY3QoW2NoYW5uZWwuZmlsZW5vKCldLCBbXSwgW10sIDApWzBdOgogICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLCBwZWVyX2FkZHJlc3MgPSBjaGFubmVsLnNvY2sucmVjdmZyb20oNjU1MzUpCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdCBzb2NrZXQuZXJyb3I6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhhbmRsZV9kZWFkX3Jlc291cmNlX2NoYW5uZWwoY2hhbm5lbF9pZCkKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlX3JlcXVlc3RfcGFydHMuZXh0ZW5kKFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7J3R5cGUnOiBUTFZfVFlQRV9QRUVSX0hPU1QsICd2YWx1ZSc6IHBlZXJfYWRkcmVzc1swXX0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyd0eXBlJzogVExWX1RZUEVfUEVFUl9QT1JULCAndmFsdWUnOiBwZWVyX2FkZHJlc3NbMV19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIGlmIGRhdGE6CiAgICAgICAgICAgICAgICAgICAgd3JpdGVfcmVxdWVzdF9wYXJ0cy5leHRlbmQoWwogICAgICAgICAgICAgICAgICAgICAgICB7J3R5cGUnOiBUTFZfVFlQRV9DSEFOTkVMX0lELCAndmFsdWUnOiBjaGFubmVsX2lkfSwKICAgICAgICAgICAgICAgICAgICAgICAgeyd0eXBlJzogVExWX1RZUEVfQ0hBTk5FTF9EQVRBLCAndmFsdWUnOiBkYXRhfSwKICAgICAgICAgICAgICAgICAgICAgICAgeyd0eXBlJzogVExWX1RZUEVfTEVOR1RILCAndmFsdWUnOiBsZW4oZGF0YSl9LAogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgc2VsZi5zZW5kX3BhY2tldCh0bHZfcGFja19yZXF1ZXN0KCdjb3JlX2NoYW5uZWxfd3JpdGUnLCB3cml0ZV9yZXF1ZXN0X3BhcnRzKSkKCiAgICBkZWYgaGFuZGxlX2RlYWRfcmVzb3VyY2VfY2hhbm5lbChzZWxmLCBjaGFubmVsX2lkKToKICAgICAgICBkZWwgc2VsZi5jaGFubmVsc1tjaGFubmVsX2lkXQogICAgICAgIGlmIGNoYW5uZWxfaWQgaW4gc2VsZi5pbnRlcmFjdF9jaGFubmVsczoKICAgICAgICAgICAgc2VsZi5pbnRlcmFjdF9jaGFubmVscy5yZW1vdmUoY2hhbm5lbF9pZCkKICAgICAgICBzZWxmLnNlbmRfcGFja2V0KHRsdl9wYWNrX3JlcXVlc3QoJ2NvcmVfY2hhbm5lbF9jbG9zZScsIFsKICAgICAgICAgICAgeyd0eXBlJzogVExWX1RZUEVfQ0hBTk5FTF9JRCwgJ3ZhbHVlJzogY2hhbm5lbF9pZH0sCiAgICAgICAgXSkpCgogICAgZGVmIF9jb3JlX3NldF91dWlkKHNlbGYsIHJlcXVlc3QsIHJlc3BvbnNlKToKICAgICAgICBuZXdfdXVpZCA9IHBhY2tldF9nZXRfdGx2KHJlcXVlc3QsIFRMVl9UWVBFX1VVSUQpCiAgICAgICAgaWYgbmV3X3V1aWQ6CiAgICAgICAgICAgIFBBWUxPQURfVVVJRCA9IGJpbmFzY2lpLmIyYV9oZXgobmV3X3V1aWRbJ3ZhbHVlJ10pCiAgICAgICAgcmV0dXJuIEVSUk9SX1NVQ0NFU1MsIHJlc3BvbnNlCgogICAgZGVmIF9jb3JlX2VudW1leHRjbWQoc2VsZiwgcmVxdWVzdCwgcmVzcG9uc2UpOgogICAgICAgIGlkX3N0YXJ0ID0gcGFja2V0X2dldF90bHYocmVxdWVzdCwgVExWX1RZUEVfVUlOVClbJ3ZhbHVlJ10KICAgICAgICBpZF9lbmQgPSBwYWNrZXRfZ2V0X3RsdihyZXF1ZXN0LCBUTFZfVFlQRV9MRU5HVEgpWyd2YWx1ZSddICsgaWRfc3RhcnQKICAgICAgICBmb3IgZnVuY19uYW1lIGluIHNlbGYuZXh0ZW5zaW9uX2Z1bmN0aW9ucy5rZXlzKCk6CiAgICAgICAgICAgIGNvbW1hbmRfaWQgPSBjbWRfc3RyaW5nX3RvX2lkKGZ1bmNfbmFtZSkKICAgICAgICAgICAgaWYgY29tbWFuZF9pZCBpcyBOb25lOgogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgaWYgaWRfc3RhcnQgPCBjb21tYW5kX2lkIGFuZCBjb21tYW5kX2lkIDwgaWRfZW5kOgogICAgICAgICAgICAgICAgcmVzcG9uc2UgKz0gdGx2X3BhY2soVExWX1RZUEVfVUlOVCwgY29tbWFuZF9pZCkKICAgICAgICByZXR1cm4gRVJST1JfU1VDQ0VTUywgcmVzcG9uc2UKCiAgICBkZWYgX2NvcmVfZ2V0X3Nlc3Npb25fZ3VpZChzZWxmLCByZXF1ZXN0LCByZXNwb25zZSk6CiAgICAgICAgcmVzcG9uc2UgKz0gdGx2X3BhY2soVExWX1RZUEVfU0VTU0lPTl9HVUlELCBiaW5hc2NpaS5hMmJfaGV4KGJ5dGVzKFNFU1NJT05fR1VJRCwgJ1VURi04JykpKQogICAgICAgIHJldHVybiBFUlJPUl9TVUNDRVNTLCByZXNwb25zZQoKICAgIGRlZiBfY29yZV9zZXRfc2Vzc2lvbl9ndWlkKHNlbGYsIHJlcXVlc3QsIHJlc3BvbnNlKToKICAgICAgICBuZXdfZ3VpZCA9IHBhY2tldF9nZXRfdGx2KHJlcXVlc3QsIFRMVl9UWVBFX1NFU1NJT05fR1VJRCkKICAgICAgICBpZiBuZXdfZ3VpZDoKICAgICAgICAgICAgU0VTU0lPTl9HVUlEID0gYmluYXNjaWkuYjJhX2hleChuZXdfZ3VpZFsndmFsdWUnXSkKICAgICAgICByZXR1cm4gRVJST1JfU1VDQ0VTUywgcmVzcG9uc2UKCiAgICBkZWYgX2NvcmVfbWFjaGluZV9pZChzZWxmLCByZXF1ZXN0LCByZXNwb25zZSk6CiAgICAgICAgc2VyaWFsID0gJycKICAgICAgICBtYWNoaW5lX25hbWUgPSBwbGF0Zm9ybS51bmFtZSgpWzFdCiAgICAgICAgaWYgaGFzX3dpbmRsbDoKICAgICAgICAgICAgZnJvbSBjdHlwZXMgaW1wb3J0IHdpbnR5cGVzCgogICAgICAgICAgICBrMzIgPSBjdHlwZXMud2luZGxsLmtlcm5lbDMyCiAgICAgICAgICAgIHN5c19kaXIgPSBjdHlwZXMuY3JlYXRlX3VuaWNvZGVfYnVmZmVyKDI2MCkKICAgICAgICAgICAgaWYgbm90IGszMi5HZXRTeXN0ZW1EaXJlY3RvcnlXKGN0eXBlcy5ieXJlZihzeXNfZGlyKSwgMjYwKToKICAgICAgICAgICAgICAgIHJldHVybiBFUlJPUl9GQUlMVVJFX1dJTkRPV1MKCiAgICAgICAgICAgIHZvbF9idWYgPSBjdHlwZXMuY3JlYXRlX3VuaWNvZGVfYnVmZmVyKDI2MCkKICAgICAgICAgICAgZnNfYnVmID0gY3R5cGVzLmNyZWF0ZV91bmljb2RlX2J1ZmZlcigyNjApCiAgICAgICAgICAgIHNlcmlhbF9udW0gPSB3aW50eXBlcy5EV09SRCgwKQoKICAgICAgICAgICAgaWYgbm90IGszMi5HZXRWb2x1bWVJbmZvcm1hdGlvblcoY3R5cGVzLmNfd2NoYXJfcChzeXNfZGlyLnZhbHVlWzozXSksCiAgICAgICAgICAgICAgICAgICAgdm9sX2J1ZiwgY3R5cGVzLnNpemVvZih2b2xfYnVmKSwgY3R5cGVzLmJ5cmVmKHNlcmlhbF9udW0pLCBOb25lLAogICAgICAgICAgICAgICAgICAgIE5vbmUsIGZzX2J1ZiwgY3R5cGVzLnNpemVvZihmc19idWYpKToKICAgICAgICAgICAgICAgIHJldHVybiBFUlJPUl9GQUlMVVJFX1dJTkRPV1MKICAgICAgICAgICAgc2VyaWFsX251bSA9IHNlcmlhbF9udW0udmFsdWUKICAgICAgICAgICAgc2VyaWFsID0gIiUwNHgiICUgKChzZXJpYWxfbnVtID4+IDE2KSAmIDB4ZmZmZikgKyAnLScgIiUwNHgiICUgKHNlcmlhbF9udW0gJiAweGZmZmYpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VyaWFsID0gZ2V0X2hkZF9sYWJlbCgpCgogICAgICAgIHJlc3BvbnNlICs9IHRsdl9wYWNrKFRMVl9UWVBFX01BQ0hJTkVfSUQsICIlczolcyIgJSAoc2VyaWFsLCBtYWNoaW5lX25hbWUpKQogICAgICAgIHJldHVybiBFUlJPUl9TVUNDRVNTLCByZXNwb25zZQoKICAgIGRlZiBfY29yZV9uYXRpdmVfYXJjaChzZWxmLCByZXF1ZXN0LCByZXNwb25zZSk6CiAgICAgICAgcmVzcG9uc2UgKz0gdGx2X3BhY2soVExWX1RZUEVfU1RSSU5HLCBnZXRfbmF0aXZlX2FyY2goKSkKICAgICAgICByZXR1cm4gRVJST1JfU1VDQ0VTUywgcmVzcG9uc2UKCiAgICBkZWYgX2NvcmVfcGF0Y2hfdXJsKHNlbGYsIHJlcXVlc3QsIHJlc3BvbnNlKToKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShzZWxmLnRyYW5zcG9ydCwgSHR0cFRyYW5zcG9ydCk6CiAgICAgICAgICAgIHJldHVybiBFUlJPUl9GQUlMVVJFLCByZXNwb25zZQogICAgICAgIG5ld191cmlfcGF0aCA9IHBhY2tldF9nZXRfdGx2KHJlcXVlc3QsIFRMVl9UWVBFX1RSQU5TX1VSTClbJ3ZhbHVlJ10KICAgICAgICBpZiBub3Qgc2VsZi50cmFuc3BvcnQucGF0Y2hfdXJpX3BhdGgobmV3X3VyaV9wYXRoKToKICAgICAgICAgICAgcmV0dXJuIEVSUk9SX0ZBSUxVUkUsIHJlc3BvbnNlCiAgICAgICAgcmV0dXJuIEVSUk9SX1NVQ0NFU1MsIHJlc3BvbnNlCgogICAgZGVmIF9jb3JlX25lZ290aWF0ZV90bHZfZW5jcnlwdGlvbihzZWxmLCByZXF1ZXN0LCByZXNwb25zZSk6CiAgICAgICAgZGVidWdfcHJpbnQoJ1sqXSBOZWdvdGlhdGluZyBUTFYgZW5jcnlwdGlvbicpCiAgICAgICAgc2VsZi50cmFuc3BvcnQuYWVzX2tleSA9IHJhbmRfYnl0ZXMoMzIpCiAgICAgICAgc2VsZi50cmFuc3BvcnQuYWVzX2VuYWJsZWQgPSBGYWxzZQogICAgICAgIHJlc3BvbnNlICs9IHRsdl9wYWNrKFRMVl9UWVBFX1NZTV9LRVlfVFlQRSwgRU5DX0FFUzI1NikKICAgICAgICBkZXIgPSBwYWNrZXRfZ2V0X3RsdihyZXF1ZXN0LCBUTFZfVFlQRV9SU0FfUFVCX0tFWSlbJ3ZhbHVlJ10uc3RyaXAoKQogICAgICAgIGRlYnVnX3ByaW50KCdbKl0gUlNBIGtleTogJyArIHN0cihiaW5hc2NpaS5iMmFfaGV4KGRlcikpKQogICAgICAgIGRlYnVnX3ByaW50KCdbKl0gQUVTIGtleTogJyArIGhleChtZXRfcnNhLmIyaShzZWxmLnRyYW5zcG9ydC5hZXNfa2V5KSkpCiAgICAgICAgZW5jX2tleSA9IG1ldF9yc2FfZW5jcnlwdChkZXIsIHNlbGYudHJhbnNwb3J0LmFlc19rZXkpCiAgICAgICAgZGVidWdfcHJpbnQoJ1sqXSBFbmNyeXB0ZWQgQUVTIGtleTogJyArIGhleChtZXRfcnNhLmIyaShlbmNfa2V5KSkpCiAgICAgICAgcmVzcG9uc2UgKz0gdGx2X3BhY2soVExWX1RZUEVfRU5DX1NZTV9LRVksIGVuY19rZXkpCiAgICAgICAgZGVidWdfcHJpbnQoJ1sqXSBUTFYgZW5jcnlwdGlvbiBzb3J0ZWQnKQogICAgICAgIHJldHVybiBFUlJPUl9TVUNDRVNTLCByZXNwb25zZQoKICAgIGRlZiBfY29yZV9sb2FkbGliKHNlbGYsIHJlcXVlc3QsIHJlc3BvbnNlKToKICAgICAgICBkYXRhX3RsdiA9IHBhY2tldF9nZXRfdGx2KHJlcXVlc3QsIFRMVl9UWVBFX0RBVEEpCiAgICAgICAgaWYgKGRhdGFfdGx2Wyd0eXBlJ10gJiBUTFZfTUVUQV9UWVBFX0NPTVBSRVNTRUQpID09IFRMVl9NRVRBX1RZUEVfQ09NUFJFU1NFRDoKICAgICAgICAgICAgcmV0dXJuIEVSUk9SX0ZBSUxVUkUsIHJlc3BvbnNlCgogICAgICAgIGxpYm5hbWUgPSAnPz8/JwogICAgICAgIG1hdGNoID0gcmUuc2VhcmNoKHInXm1ldGVycHJldGVyXC5yZWdpc3Rlcl9leHRlbnNpb25cKFwnKFthLXpBLVowLTldKylcJ1wpJCcsIHN0cihkYXRhX3RsdlsndmFsdWUnXSksIHJlLk1VTFRJTElORSkKICAgICAgICBpZiBtYXRjaCBpcyBub3QgTm9uZToKICAgICAgICAgICAgbGlibmFtZSA9IG1hdGNoLmdyb3VwKDEpCgogICAgICAgIHNlbGYubGFzdF9yZWdpc3RlcmVkX2V4dGVuc2lvbiA9IE5vbmUKICAgICAgICBzeW1ib2xzX2Zvcl9leHRlbnNpb25zID0geydtZXRlcnByZXRlcic6IHNlbGZ9CiAgICAgICAgc3ltYm9sc19mb3JfZXh0ZW5zaW9ucy51cGRhdGUoRVhQT1JURURfU1lNQk9MUykKICAgICAgICBpID0gY29kZS5JbnRlcmFjdGl2ZUludGVycHJldGVyKHN5bWJvbHNfZm9yX2V4dGVuc2lvbnMpCiAgICAgICAgaS5ydW5jb2RlKGNvbXBpbGUoZGF0YV90bHZbJ3ZhbHVlJ10sICdleHRfc2VydmVyXycgKyBsaWJuYW1lICsgJy5weScsICdleGVjJykpCiAgICAgICAgZXh0ZW5zaW9uX25hbWUgPSBzZWxmLmxhc3RfcmVnaXN0ZXJlZF9leHRlbnNpb24KCiAgICAgICAgaWYgZXh0ZW5zaW9uX25hbWU6CiAgICAgICAgICAgIGNoZWNrX2V4dGVuc2lvbiA9IGxhbWJkYSB4OiB4LnN0YXJ0c3dpdGgoZXh0ZW5zaW9uX25hbWUpCiAgICAgICAgICAgIGxpYl9tZXRob2RzID0gbGlzdChmaWx0ZXIoY2hlY2tfZXh0ZW5zaW9uLCBsaXN0KHNlbGYuZXh0ZW5zaW9uX2Z1bmN0aW9ucy5rZXlzKCkpKSkKICAgICAgICAgICAgZm9yIG1ldGhvZCBpbiBsaWJfbWV0aG9kczoKICAgICAgICAgICAgICAgIHJlc3BvbnNlICs9IHRsdl9wYWNrKFRMVl9UWVBFX1VJTlQsIGNtZF9zdHJpbmdfdG9faWQobWV0aG9kKSkKICAgICAgICByZXR1cm4gRVJST1JfU1VDQ0VTUywgcmVzcG9uc2UKCiAgICBkZWYgX2NvcmVfc2h1dGRvd24oc2VsZiwgcmVxdWVzdCwgcmVzcG9uc2UpOgogICAgICAgIHJlc3BvbnNlICs9IHRsdl9wYWNrKFRMVl9UWVBFX0JPT0wsIFRydWUpCiAgICAgICAgc2VsZi5ydW5uaW5nID0gRmFsc2UKICAgICAgICByZXR1cm4gRVJST1JfU1VDQ0VTUywgcmVzcG9uc2UKCiAgICBkZWYgX2NvcmVfdHJhbnNwb3J0X2FkZChzZWxmLCByZXF1ZXN0LCByZXNwb25zZSk6CiAgICAgICAgbmV3X3RyYW5zcG9ydCA9IFRyYW5zcG9ydC5mcm9tX3JlcXVlc3QocmVxdWVzdCkKICAgICAgICBzZWxmLnRyYW5zcG9ydF9hZGQobmV3X3RyYW5zcG9ydCkKICAgICAgICByZXR1cm4gRVJST1JfU1VDQ0VTUywgcmVzcG9uc2UKCiAgICBkZWYgX2NvcmVfdHJhbnNwb3J0X2NoYW5nZShzZWxmLCByZXF1ZXN0LCByZXNwb25zZSk6CiAgICAgICAgbmV3X3RyYW5zcG9ydCA9IFRyYW5zcG9ydC5mcm9tX3JlcXVlc3QocmVxdWVzdCkKICAgICAgICBzZWxmLnRyYW5zcG9ydF9hZGQobmV3X3RyYW5zcG9ydCkKICAgICAgICBzZWxmLnNlbmRfcGFja2V0KHJlc3BvbnNlICsgdGx2X3BhY2soVExWX1RZUEVfUkVTVUxULCBFUlJPUl9TVUNDRVNTKSkKICAgICAgICBzZWxmLnRyYW5zcG9ydF9jaGFuZ2UobmV3X3RyYW5zcG9ydCkKICAgICAgICByZXR1cm4gTm9uZQoKICAgIGRlZiBfY29yZV90cmFuc3BvcnRfbGlzdChzZWxmLCByZXF1ZXN0LCByZXNwb25zZSk6CiAgICAgICAgaWYgc2VsZi5zZXNzaW9uX2V4cGlyeV90aW1lID4gMDoKICAgICAgICAgICAgcmVzcG9uc2UgKz0gdGx2X3BhY2soVExWX1RZUEVfVFJBTlNfU0VTU0lPTl9FWFAsIHNlbGYuc2Vzc2lvbl9leHBpcnlfZW5kIC0gdGltZS50aW1lKCkpCiAgICAgICAgcmVzcG9uc2UgKz0gdGx2X3BhY2soVExWX1RZUEVfVFJBTlNfR1JPVVAsIHNlbGYudHJhbnNwb3J0LnRsdl9wYWNrX3RyYW5zcG9ydF9ncm91cCgpKQoKICAgICAgICB0cmFuc3BvcnQgPSBzZWxmLnRyYW5zcG9ydF9uZXh0KCkKICAgICAgICB3aGlsZSB0cmFuc3BvcnQgIT0gc2VsZi50cmFuc3BvcnQ6CiAgICAgICAgICAgIHJlc3BvbnNlICs9IHRsdl9wYWNrKFRMVl9UWVBFX1RSQU5TX0dST1VQLCB0cmFuc3BvcnQudGx2X3BhY2tfdHJhbnNwb3J0X2dyb3VwKCkpCiAgICAgICAgICAgIHRyYW5zcG9ydCA9IHNlbGYudHJhbnNwb3J0X25leHQodHJhbnNwb3J0KQogICAgICAgIHJldHVybiBFUlJPUl9TVUNDRVNTLCByZXNwb25zZQoKICAgIGRlZiBfY29yZV90cmFuc3BvcnRfbmV4dChzZWxmLCByZXF1ZXN0LCByZXNwb25zZSk6CiAgICAgICAgbmV3X3RyYW5zcG9ydCA9IHNlbGYudHJhbnNwb3J0X25leHQoKQogICAgICAgIGlmIG5ld190cmFuc3BvcnQgPT0gc2VsZi50cmFuc3BvcnQ6CiAgICAgICAgICAgIHJldHVybiBFUlJPUl9GQUlMVVJFLCByZXNwb25zZQogICAgICAgIHNlbGYuc2VuZF9wYWNrZXQocmVzcG9uc2UgKyB0bHZfcGFjayhUTFZfVFlQRV9SRVNVTFQsIEVSUk9SX1NVQ0NFU1MpKQogICAgICAgIHNlbGYudHJhbnNwb3J0X2NoYW5nZShuZXdfdHJhbnNwb3J0KQogICAgICAgIHJldHVybiBOb25lCgogICAgZGVmIF9jb3JlX3RyYW5zcG9ydF9wcmV2KHNlbGYsIHJlcXVlc3QsIHJlc3BvbnNlKToKICAgICAgICBuZXdfdHJhbnNwb3J0ID0gc2VsZi50cmFuc3BvcnRfcHJldigpCiAgICAgICAgaWYgbmV3X3RyYW5zcG9ydCA9PSBzZWxmLnRyYW5zcG9ydDoKICAgICAgICAgICAgcmV0dXJuIEVSUk9SX0ZBSUxVUkUsIHJlc3BvbnNlCiAgICAgICAgc2VsZi5zZW5kX3BhY2tldChyZXNwb25zZSArIHRsdl9wYWNrKFRMVl9UWVBFX1JFU1VMVCwgRVJST1JfU1VDQ0VTUykpCiAgICAgICAgc2VsZi50cmFuc3BvcnRfY2hhbmdlKG5ld190cmFuc3BvcnQpCiAgICAgICAgcmV0dXJuIE5vbmUKCiAgICBkZWYgX2NvcmVfdHJhbnNwb3J0X3JlbW92ZShzZWxmLCByZXF1ZXN0LCByZXNwb25zZSk6CiAgICAgICAgdXJsID0gcGFja2V0X2dldF90bHYocmVxdWVzdCwgVExWX1RZUEVfVFJBTlNfVVJMKVsndmFsdWUnXQogICAgICAgIGlmIHNlbGYudHJhbnNwb3J0LnVybCA9PSB1cmw6CiAgICAgICAgICAgIHJldHVybiBFUlJPUl9GQUlMVVJFLCByZXNwb25zZQogICAgICAgIHRyYW5zcG9ydF9mb3VuZCA9IEZhbHNlCiAgICAgICAgZm9yIHRyYW5zcG9ydCBpbiBzZWxmLnRyYW5zcG9ydHM6CiAgICAgICAgICAgIGlmIHRyYW5zcG9ydC51cmwgPT0gdXJsOgogICAgICAgICAgICAgICAgdHJhbnNwb3J0X2ZvdW5kID0gVHJ1ZQogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICBpZiB0cmFuc3BvcnRfZm91bmQ6CiAgICAgICAgICAgIHNlbGYudHJhbnNwb3J0cy5yZW1vdmUodHJhbnNwb3J0KQogICAgICAgICAgICByZXR1cm4gRVJST1JfU1VDQ0VTUywgcmVzcG9uc2UKICAgICAgICByZXR1cm4gRVJST1JfRkFJTFVSRSwgcmVzcG9uc2UKCiAgICBkZWYgX2NvcmVfdHJhbnNwb3J0X3NldF90aW1lb3V0cyhzZWxmLCByZXF1ZXN0LCByZXNwb25zZSk6CiAgICAgICAgdGltZW91dF92YWx1ZSA9IHBhY2tldF9nZXRfdGx2KHJlcXVlc3QsIFRMVl9UWVBFX1RSQU5TX1NFU1NJT05fRVhQKS5nZXQoJ3ZhbHVlJykKICAgICAgICBpZiBub3QgdGltZW91dF92YWx1ZSBpcyBOb25lOgogICAgICAgICAgICBzZWxmLnNlc3Npb25fZXhwaXJ5X3RpbWUgPSB0aW1lb3V0X3ZhbHVlCiAgICAgICAgICAgIHNlbGYuc2Vzc2lvbl9leHBpcnlfZW5kID0gdGltZS50aW1lKCkgKyBzZWxmLnNlc3Npb25fZXhwaXJ5X3RpbWUKICAgICAgICB0aW1lb3V0X3ZhbHVlID0gcGFja2V0X2dldF90bHYocmVxdWVzdCwgVExWX1RZUEVfVFJBTlNfQ09NTV9USU1FT1VUKS5nZXQoJ3ZhbHVlJykKICAgICAgICBpZiB0aW1lb3V0X3ZhbHVlOgogICAgICAgICAgICBzZWxmLnRyYW5zcG9ydC5jb21tdW5pY2F0aW9uX3RpbWVvdXQgPSB0aW1lb3V0X3ZhbHVlCiAgICAgICAgcmV0cnlfdmFsdWUgPSBwYWNrZXRfZ2V0X3RsdihyZXF1ZXN0LCBUTFZfVFlQRV9UUkFOU19SRVRSWV9UT1RBTCkuZ2V0KCd2YWx1ZScpCiAgICAgICAgaWYgcmV0cnlfdmFsdWU6CiAgICAgICAgICAgIHNlbGYudHJhbnNwb3J0LnJldHJ5X3RvdGFsID0gcmV0cnlfdmFsdWUKICAgICAgICByZXRyeV92YWx1ZSA9IHBhY2tldF9nZXRfdGx2KHJlcXVlc3QsIFRMVl9UWVBFX1RSQU5TX1JFVFJZX1dBSVQpLmdldCgndmFsdWUnKQogICAgICAgIGlmIHJldHJ5X3ZhbHVlOgogICAgICAgICAgICBzZWxmLnRyYW5zcG9ydC5yZXRyeV93YWl0ID0gcmV0cnlfdmFsdWUKCiAgICAgICAgaWYgc2VsZi5zZXNzaW9uX2V4cGlyeV90aW1lID4gMDoKICAgICAgICAgICAgcmVzcG9uc2UgKz0gdGx2X3BhY2soVExWX1RZUEVfVFJBTlNfU0VTU0lPTl9FWFAsIHNlbGYuc2Vzc2lvbl9leHBpcnlfZW5kIC0gdGltZS50aW1lKCkpCiAgICAgICAgcmVzcG9uc2UgKz0gc2VsZi50cmFuc3BvcnQudGx2X3BhY2tfdGltZW91dHMoKQogICAgICAgIHJldHVybiBFUlJPUl9TVUNDRVNTLCByZXNwb25zZQoKICAgIGRlZiBfY29yZV90cmFuc3BvcnRfc2xlZXAoc2VsZiwgcmVxdWVzdCwgcmVzcG9uc2UpOgogICAgICAgIHNlY29uZHMgPSBwYWNrZXRfZ2V0X3RsdihyZXF1ZXN0LCBUTFZfVFlQRV9UUkFOU19DT01NX1RJTUVPVVQpWyd2YWx1ZSddCiAgICAgICAgc2VsZi5zZW5kX3BhY2tldChyZXNwb25zZSArIHRsdl9wYWNrKFRMVl9UWVBFX1JFU1VMVCwgRVJST1JfU1VDQ0VTUykpCiAgICAgICAgaWYgc2Vjb25kczoKICAgICAgICAgICAgc2VsZi5fdHJhbnNwb3J0X3NsZWVwID0gc2Vjb25kcwogICAgICAgIHJldHVybiBFUlJPUl9TVUNDRVNTLCByZXNwb25zZQoKICAgIGRlZiBfY29yZV9jaGFubmVsX29wZW4oc2VsZiwgcmVxdWVzdCwgcmVzcG9uc2UpOgogICAgICAgIGNoYW5uZWxfdHlwZSA9IHBhY2tldF9nZXRfdGx2KHJlcXVlc3QsIFRMVl9UWVBFX0NIQU5ORUxfVFlQRSkKICAgICAgICBoYW5kbGVyID0gJ2NoYW5uZWxfb3Blbl8nICsgY2hhbm5lbF90eXBlWyd2YWx1ZSddCiAgICAgICAgaWYgaGFuZGxlciBub3QgaW4gc2VsZi5leHRlbnNpb25fZnVuY3Rpb25zOgogICAgICAgICAgICBkZWJ1Z19wcmludCgnWy1dIGNvcmVfY2hhbm5lbF9vcGVuIG1pc3NpbmcgaGFuZGxlcjogJyArIGhhbmRsZXIpCiAgICAgICAgICAgIHJldHVybiBlcnJvcl9yZXN1bHQoTm90SW1wbGVtZW50ZWRFcnJvciksIHJlc3BvbnNlCiAgICAgICAgZGVidWdfcHJpbnQoJ1sqXSBjb3JlX2NoYW5uZWxfb3BlbiBkaXNwYXRjaGluZyB0byBoYW5kbGVyOiAnICsgaGFuZGxlcikKICAgICAgICBoYW5kbGVyID0gc2VsZi5leHRlbnNpb25fZnVuY3Rpb25zW2hhbmRsZXJdCiAgICAgICAgcmV0dXJuIGhhbmRsZXIocmVxdWVzdCwgcmVzcG9uc2UpCgogICAgZGVmIF9jb3JlX2NoYW5uZWxfY2xvc2Uoc2VsZiwgcmVxdWVzdCwgcmVzcG9uc2UpOgogICAgICAgIGNoYW5uZWxfaWQgPSBwYWNrZXRfZ2V0X3RsdihyZXF1ZXN0LCBUTFZfVFlQRV9DSEFOTkVMX0lEKVsndmFsdWUnXQogICAgICAgIGlmIGNoYW5uZWxfaWQgbm90IGluIHNlbGYuY2hhbm5lbHM6CiAgICAgICAgICAgIHJldHVybiBFUlJPUl9GQUlMVVJFLCByZXNwb25zZQogICAgICAgIGNoYW5uZWwgPSBzZWxmLmNoYW5uZWxzW2NoYW5uZWxfaWRdCiAgICAgICAgc3RhdHVzLCByZXNwb25zZSA9IGNoYW5uZWwuY29yZV9jbG9zZShyZXF1ZXN0LCByZXNwb25zZSkKICAgICAgICBpZiBzdGF0dXMgPT0gRVJST1JfU1VDQ0VTUzoKICAgICAgICAgICAgZGVsIHNlbGYuY2hhbm5lbHNbY2hhbm5lbF9pZF0KICAgICAgICAgICAgaWYgY2hhbm5lbF9pZCBpbiBzZWxmLmludGVyYWN0X2NoYW5uZWxzOgogICAgICAgICAgICAgICAgc2VsZi5pbnRlcmFjdF9jaGFubmVscy5yZW1vdmUoY2hhbm5lbF9pZCkKICAgICAgICAgICAgZGVidWdfcHJpbnQoJ1sqXSBjbG9zZWQgYW5kIHJlbW92ZWQgY2hhbm5lbCBpZDogJyArIHN0cihjaGFubmVsX2lkKSkKICAgICAgICByZXR1cm4gc3RhdHVzLCByZXNwb25zZQoKICAgIGRlZiBfY29yZV9jaGFubmVsX2VvZihzZWxmLCByZXF1ZXN0LCByZXNwb25zZSk6CiAgICAgICAgY2hhbm5lbF9pZCA9IHBhY2tldF9nZXRfdGx2KHJlcXVlc3QsIFRMVl9UWVBFX0NIQU5ORUxfSUQpWyd2YWx1ZSddCiAgICAgICAgaWYgY2hhbm5lbF9pZCBub3QgaW4gc2VsZi5jaGFubmVsczoKICAgICAgICAgICAgcmV0dXJuIEVSUk9SX0ZBSUxVUkUsIHJlc3BvbnNlCiAgICAgICAgY2hhbm5lbCA9IHNlbGYuY2hhbm5lbHNbY2hhbm5lbF9pZF0KICAgICAgICBzdGF0dXMsIHJlc3BvbnNlID0gY2hhbm5lbC5jb3JlX2VvZihyZXF1ZXN0LCByZXNwb25zZSkKICAgICAgICByZXR1cm4gRVJST1JfU1VDQ0VTUywgcmVzcG9uc2UKCgogICAgZGVmIF9jb3JlX2NoYW5uZWxfaW50ZXJhY3Qoc2VsZiwgcmVxdWVzdCwgcmVzcG9uc2UpOgogICAgICAgIGNoYW5uZWxfaWQgPSBwYWNrZXRfZ2V0X3RsdihyZXF1ZXN0LCBUTFZfVFlQRV9DSEFOTkVMX0lEKVsndmFsdWUnXQogICAgICAgIGlmIGNoYW5uZWxfaWQgbm90IGluIHNlbGYuY2hhbm5lbHM6CiAgICAgICAgICAgIHJldHVybiBFUlJPUl9GQUlMVVJFLCByZXNwb25zZQogICAgICAgIGNoYW5uZWwgPSBzZWxmLmNoYW5uZWxzW2NoYW5uZWxfaWRdCiAgICAgICAgdG9nZ2xlID0gcGFja2V0X2dldF90bHYocmVxdWVzdCwgVExWX1RZUEVfQk9PTClbJ3ZhbHVlJ10KICAgICAgICBpZiB0b2dnbGU6CiAgICAgICAgICAgIGlmIGNoYW5uZWxfaWQgaW4gc2VsZi5pbnRlcmFjdF9jaGFubmVsczoKICAgICAgICAgICAgICAgIHNlbGYuaW50ZXJhY3RfY2hhbm5lbHMucmVtb3ZlKGNoYW5uZWxfaWQpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLmludGVyYWN0X2NoYW5uZWxzLmFwcGVuZChjaGFubmVsX2lkKQogICAgICAgIGVsaWYgY2hhbm5lbF9pZCBpbiBzZWxmLmludGVyYWN0X2NoYW5uZWxzOgogICAgICAgICAgICBzZWxmLmludGVyYWN0X2NoYW5uZWxzLnJlbW92ZShjaGFubmVsX2lkKQogICAgICAgIHJldHVybiBFUlJPUl9TVUNDRVNTLCByZXNwb25zZQoKICAgIGRlZiBfY29yZV9jaGFubmVsX3JlYWQoc2VsZiwgcmVxdWVzdCwgcmVzcG9uc2UpOgogICAgICAgIGNoYW5uZWxfaWQgPSBwYWNrZXRfZ2V0X3RsdihyZXF1ZXN0LCBUTFZfVFlQRV9DSEFOTkVMX0lEKVsndmFsdWUnXQogICAgICAgIGlmIGNoYW5uZWxfaWQgbm90IGluIHNlbGYuY2hhbm5lbHM6CiAgICAgICAgICAgIHJldHVybiBFUlJPUl9GQUlMVVJFLCByZXNwb25zZQogICAgICAgIGNoYW5uZWwgPSBzZWxmLmNoYW5uZWxzW2NoYW5uZWxfaWRdCiAgICAgICAgc3RhdHVzLCByZXNwb25zZSA9IGNoYW5uZWwuY29yZV9yZWFkKHJlcXVlc3QsIHJlc3BvbnNlKQogICAgICAgIGlmIG5vdCBjaGFubmVsLmlzX2FsaXZlKCk6CiAgICAgICAgICAgIHNlbGYuaGFuZGxlX2RlYWRfcmVzb3VyY2VfY2hhbm5lbChjaGFubmVsX2lkKQogICAgICAgIHJldHVybiBzdGF0dXMsIHJlc3BvbnNlCgogICAgZGVmIF9jb3JlX2NoYW5uZWxfd3JpdGUoc2VsZiwgcmVxdWVzdCwgcmVzcG9uc2UpOgogICAgICAgIGNoYW5uZWxfaWQgPSBwYWNrZXRfZ2V0X3RsdihyZXF1ZXN0LCBUTFZfVFlQRV9DSEFOTkVMX0lEKVsndmFsdWUnXQogICAgICAgIGlmIGNoYW5uZWxfaWQgbm90IGluIHNlbGYuY2hhbm5lbHM6CiAgICAgICAgICAgIHJldHVybiBFUlJPUl9GQUlMVVJFLCByZXNwb25zZQogICAgICAgIGNoYW5uZWwgPSBzZWxmLmNoYW5uZWxzW2NoYW5uZWxfaWRdCiAgICAgICAgc3RhdHVzID0gRVJST1JfRkFJTFVSRQogICAgICAgIGlmIGNoYW5uZWwuaXNfYWxpdmUoKToKICAgICAgICAgICAgc3RhdHVzLCByZXNwb25zZSA9IGNoYW5uZWwuY29yZV93cml0ZShyZXF1ZXN0LCByZXNwb25zZSkKICAgICAgICAjIGV2YWx1YXRlIGNoYW5uZWwuaXNfYWxpdmUoKSB0d2ljZSBiZWNhdXNlIGl0IGNvdWxkIGhhdmUgY2hhbmdlZAogICAgICAgIGlmIG5vdCBjaGFubmVsLmlzX2FsaXZlKCk6CiAgICAgICAgICAgIHNlbGYuaGFuZGxlX2RlYWRfcmVzb3VyY2VfY2hhbm5lbChjaGFubmVsX2lkKQogICAgICAgIHJldHVybiBzdGF0dXMsIHJlc3BvbnNlCgogICAgZGVmIGNyZWF0ZV9yZXNwb25zZShzZWxmLCByZXF1ZXN0KToKICAgICAgICByZXNwb25zZSA9IHN0cnVjdC5wYWNrKCc+SScsIFBBQ0tFVF9UWVBFX1JFU1BPTlNFKQogICAgICAgIGNvbW1kX2lkX3RsdiA9IHBhY2tldF9nZXRfdGx2KHJlcXVlc3QsIFRMVl9UWVBFX0NPTU1BTkRfSUQpCiAgICAgICAgcmVzcG9uc2UgKz0gdGx2X3BhY2soY29tbWRfaWRfdGx2KQogICAgICAgIHJlc3BvbnNlICs9IHRsdl9wYWNrKFRMVl9UWVBFX1VVSUQsIGJpbmFzY2lpLmEyYl9oZXgoYnl0ZXMoUEFZTE9BRF9VVUlELCAnVVRGLTgnKSkpCgogICAgICAgIGhhbmRsZXJfbmFtZSA9IGNtZF9pZF90b19zdHJpbmcoY29tbWRfaWRfdGx2Wyd2YWx1ZSddKQogICAgICAgIGlmIGhhbmRsZXJfbmFtZSBpbiBzZWxmLmV4dGVuc2lvbl9mdW5jdGlvbnM6CiAgICAgICAgICAgIGhhbmRsZXIgPSBzZWxmLmV4dGVuc2lvbl9mdW5jdGlvbnNbaGFuZGxlcl9uYW1lXQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBkZWJ1Z19wcmludCgnWypdIHJ1bm5pbmcgbWV0aG9kICcgKyBoYW5kbGVyX25hbWUpCiAgICAgICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHJlcXVlc3QsIHJlc3BvbnNlKQogICAgICAgICAgICAgICAgaWYgcmVzdWx0IGlzIE5vbmU6CiAgICAgICAgICAgICAgICAgICAgZGVidWdfcHJpbnQoIlstXSBoYW5kbGVyIHJlc3VsdCBpcyBub25lIikKICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgIHJlc3VsdCwgcmVzcG9uc2UgPSByZXN1bHQKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICAgICAgICAgIGRlYnVnX3RyYWNlYmFjaygnWy1dIG1ldGhvZCAnICsgaGFuZGxlcl9uYW1lICsgJyByZXN1bHRlZCBpbiBhbiBlcnJvcicpCiAgICAgICAgICAgICAgICByZXN1bHQgPSBlcnJvcl9yZXN1bHQoKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgaWYgcmVzdWx0ICE9IEVSUk9SX1NVQ0NFU1M6CiAgICAgICAgICAgICAgICAgICAgZGVidWdfcHJpbnQoJ1stXSBtZXRob2QgJyArIGhhbmRsZXJfbmFtZSArICcgcmVzdWx0ZWQgaW4gZXJyb3I6ICMnICsgc3RyKHJlc3VsdCkpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZGVidWdfcHJpbnQoJ1stXSBtZXRob2QgJyArIGhhbmRsZXJfbmFtZSArICcgd2FzIHJlcXVlc3RlZCBidXQgZG9lcyBub3QgZXhpc3QnKQogICAgICAgICAgICByZXN1bHQgPSBlcnJvcl9yZXN1bHQoTm90SW1wbGVtZW50ZWRFcnJvcikKCiAgICAgICAgcmVxaWRfdGx2ID0gcGFja2V0X2dldF90bHYocmVxdWVzdCwgVExWX1RZUEVfUkVRVUVTVF9JRCkKICAgICAgICBpZiBub3QgcmVxaWRfdGx2OgogICAgICAgICAgICBkZWJ1Z19wcmludCgiWy1dIG5vIHJlcXVlc3QgSUQgZm91bmQiKQogICAgICAgICAgICByZXR1cm4KICAgICAgICByZXNwb25zZSArPSB0bHZfcGFjayhyZXFpZF90bHYpCiAgICAgICAgZGVidWdfcHJpbnQoIlsqXSBzZW5kaW5nIHJlc3BvbnNlIHBhY2tldCIpCiAgICAgICAgcmV0dXJuIHJlc3BvbnNlICsgdGx2X3BhY2soVExWX1RZUEVfUkVTVUxULCByZXN1bHQpCgoKaW1wb3J0IGNvZGVjcyxpbXAsYmFzZTY0LHpsaWIKbWV0X2FlcyA9IGltcC5uZXdfbW9kdWxlKCdtZXRfYWVzJykKbWV0X3JzYSA9IGltcC5uZXdfbW9kdWxlKCdtZXRfcnNhJykKZXhlYyhjb21waWxlKHpsaWIuZGVjb21wcmVzcyhiYXNlNjQuYjY0ZGVjb2RlKGNvZGVjcy5nZXRlbmNvZGVyKCd1dGYtOCcpKCdlTnJGM0Z0ekpjZVYzZkZuOGxOQUV6RW1JQjVTZGIrUWhDSnN4anc0K0NpTlh4RE5qcnFLSUZ0b0JIQklkY3ZqNys2OS93dm9XazAycWREWURuY0hKVFJ3TGxWWldabS9uV2NsUHI3OTYvM3JoL1BGOHZyKzdlbngvUERqY2o0OXZuMzhlTjMyaStXN0grOStlTHg4OVhnK1hkeGRmZkh4Ui92cmg0dmJpOXU3aTRmcDdpL2JaWEY2dGQzbGo2OU8vUGlqdDdmYnEvVWl2bkZ6KzhYdHAzY3ZlSldYeTk4dS8vYjZZYzFIUEd6bkh4L3UrT2ROOGVLcnI2cm02ai8wcnpMK1ZYYlAvNnJpWDhQVmYvQjEvZlF5ajlWOGVkN2VuSS9YdVhoMSszaStqTWRjTGxkNWFFc2VHZy9STSticThYSyt2WnNlM3Rwei91VmZQdi8rOWUzZDVmTGR3K1hNMCtaODJ0UGpubzc0OWQweW5WL3k4dE5wdG1kUG44NGYzKzRYMFVLZi83UTlQTjYrdm50NWU3ZS9qcFA1NDNVZEQzdER5MXp6dng5LzlJdmovaWllZS90NGUvZDRudTZXalcrZjVyZm43WkVmUHI5SmZ2dmo1My9kZk9EOFhqeTk5UHNuK1B4MFh2RDUrMCtQL01BWjJTbnBDVmNmYjY4ZXQvZ0ovNzUrTmYxMVhxZUx4OVAyeGVQSDIxL3Z6Mit2MVQ4K3Y1K1dIeTQvK2VUcTQrWFY5UGg0OFYvLzdVOWYvN2V2TDEvUDMyOExaM24zOEhqOVA4dnVpN0k0VmMwWFpYV3FxeS9LNW45Rkk4WmhYTitVcCtyVW5JWlQyY1VQVGwxektxdmhWUFduTnI0cTRxdjRmdG1YcDc0L2xmR3RwaitOOFlOaE9JM2pxUnpqYVcxNWF1dDRhQmNQcmVLaDhlMnFQVlZ0dkZ1ZEQ0bm5OVzAwMFordWIvSXBWVHk3elArdjQyamk4VVg4dkN4NVhCT3ZGdCtvVDAzOExONnJLbHZldWl6ak1JcDRiQjJ2V1pUdlhuOFlUL0hUcWluaVViWGV2Y3NqaUdlMWNkQjVLbVg4TjhiM2huekZPTW80L0hySVUrdnk3ZnQ0dWViVTV2UGlGYXN4dnBYdlZuUFNUZnl6UE9YengxTWRMem5HUStKZjhiNHRMUkhIUGFpdHFqajFlRVNlYlIvZktxT0o0bGpqdVhFS1hUWmxHVTAveGxGMmNjelZxYzBYYm1pcGVMc3FmaDRIVWtiYjUwRVc0eWticnM5clVlV1JSYnVQcFpvM1dxYU1sMm43VXg5djM1MkdiSlk4aDBGTjNjY3o0MnAwZlY2cytLS3M2MU9YSnhYL3haSDJwNkU0eFNHVWNRQmxONXlHZUVRMFF6WlRrMDBUVFJZdkhTMVhOUzFYdUl5RHJlSWs0MldpUGFvMkd5RGJKcTlDUENKZU0xNjQ3azVqU3kvbzhqRGllOW4wY1VKeDZsMGVlSng2Tm40MFFudktuMFV6eDVsWFZYR3FvenZGaTBRemxmRXFlZlIxdm1tMFdueFpWWFMwYUtCOGwyajViUGo0Y1hHS2F4MWROZDQyRHlCN1NieExINDhlc3FQRmYvbnd2REx4MUxnSVZSeEFISGtaRFZ0bWM4ZlZ6WXNVN1pLOWU4aXpqZGVvczdObno4b1c1MjRZOGxEakdPUHF4R1B5R2ZHTmFNRHM4MVZlbkNxN1NoeEkzQnJaWEhuSjg3L3NBSEViWlovTHM2OU9jV2paMStMWnpTazZlZlRDSWJ0T1BDZmZOTnNtbnRabU44cjJ6UnNxanlHZUd2L00vNmVKOHR2UncrTHRvNk5WZFhhVXVQN3RxY21XeW91WHZTdXZlUGFrZU5VODk3alk4YWJSd2J1OFBuRlg1Zi9GUzhjVDh3Nk9qbFBsYlhsN2ZSUFhlWHk2Zyt1OEMvUFdqeWZsVFJTdmxCMGsra2tlWThrOVVuTm5abGZMdXprN2NOdHpjK1l4NWsyVjdSM0htU2NTUngrZElicEc5b3U4cURyNG1tUGd5SWU4c3JSdVhNeDRWbGZTRC9xT1N4a1h0K3U0Mi9NR2pDczM1UFhnWEtOdDgvU2pqZXJ1NmM0YnVGZWk4ZnRhVnp3dVNkNVMyU3pSL05tOFhJbWlVT3NYRGMyZGg4WG8wV1NueWpGaHJOVWZoa28zUnFITEd0ZHlLQmhKOGhiTmk1ajNCNTB3KzI5ZTJPejZPWXEwdXFlemR6OFBvWVd1VTk2MjJXY0xqVURSdCtJN0xSMC94NFRvbVIzM2REd3oyelNiTzA2Vks1RDNjUjdhVTQrcmM3eDg2blF4RUxSUGQwQ2ZWenpINFdqbXZNL28zVzNKZUtzQm85T29tZWVTYjVIZElsczRUbzh1M1hEbjVLQ2FZMlplc0J6SDRtcmtFSkI5WDZNY1BTOXZ5SktCTXg3RDJNbXd4cmhmUDQzdE1iQnhkMnFJYWhqRnFwN3hMVzZ6dkZ5dDdxdDRzYnh2czkwWS8wZEc3NXdMOGw3TVVTZWZtUTFUNmdhTWpzVkExK1Z3SEFOMTlwaGVJM09YODBQZWtqbEVhNVNLTHBnM1pZN0lPUzYyM0tOOURqOTVjK1FFd0FDUTR5TnpROGxFd3RqYUZScUVSaWJDbnBHTGNiTHZHR0p5QXNoN0tzZlhPTGloNXBhTFJxaVl6aHJHUXdhVlVzTi9yVHVlMjd6SXlUUTZVdzYwT1ZMbmRQbm44dnFtZUxOMFhkM1ZVM3NxM3V4RHYvUkxkSkxpemJiMThTZWVFOS90K3JtZmh6Vy8zUGRxcjRyOGN1MjZ1WnRudnR5NnZkdm42SDF2eG5KcGw3Yk5WK2lLT3Y3R05TL2V4R2tXMlZQaXpiYXU3L29wWDdidHFybWErM3lCcmQrM2ZTdnp1M083OW1zZjE2dDQwNnpUUE0xYmx3OVk0bG5kT01XWHc3NU15OVRrNFpiN1VBM1ZtSzh3akV2OGJmTE45aWxlWUkxMmlxZnQrN1JQWlQ1MnJ0cXhIYmM1SDdzMWZkTXZuTnE4RjN0UjVIZWJjbHFuZFZ2eXNmWGFyRTJYcjlEdVV6VlZlNzVGMDhacjdWc2VRMXl1ZUx0NXp3ZlVVek0xTysvVzlGVmZqWG04NDd3VVM5SG02L1p0TkY2LzVBbHQ1Yjd1YTVsdlVhOWpQZGJUbHErN1ZGM1ZkZm02M1JKWG9tdnp5MzZyOTNwdnNrMzNkdS8zdnNoWEdPb2wvalQ1eHQxUU4zWFQ1b3UxNWRSTzdaNk52cFpidTdWMWZybVBlN25ucUJKdlhQVXhPSXg1QWFaNUhhSng4c3N1N3NBNnUxQ2NVRFJTZkpXdk94Uk4vTTJYSGR2b0RIM0xwWWpIUmdmUGhoelhwVjdxTm8rOExxSnp4eVhJTC91eEc3c3BEM2VLYTk0VytWTFZQazdqTk9lenRxS1B2OW5rY1J2SFFGaG5LNVh6VUF6Rm1LMjA3bHUxVlhXMjg3SnU4elpYK1lBbURyeUs2NTd0c1VkbnFSWjZ5OVMzZlR2bU84UXRPeFpqbWE5UXJrTTkxR01lVnp0VVM3WDAyUWgxWE5aeXFqamFycHpMdWFMREx0M1d4WHZrdFk3TDJrNGJUNXVuWWlyMmZMSG9YekZ5N0hrTWZWZlA5ZHprMDZLemR0SHQ4eVQ3TmI1Wkx6d3RidXBxN0RtTGRhdTN1dWE3Vzl3b2U0N0liMkxzYklabXpDNHlkVzBkelV5SEhOZHl6Y0VsKyt4U2J1dTJWdG5xVFJGRGNkSGxkNk1MTFB0UzVvbjJZeHg3dVdSVHoxMDd0L1BHZVRUZDFNVXRrcGR0WGVabGJ2S0k0M2FORmx4cHRlaXA5ZGprc1kxTjlOUG80UG5sMEN6TnNtYjd6RVU3dE1PV3J6dTA4V1o3azUwdmJ1dGlMYnA4MnRMR25ibFgrZDFtbitMUHh1VmM0ODZaeTN5M29ZdHVXQzkwalNsdW0zWE5FNDB4SmY2MDNLVXhodzN0bU84MlJMdEdsODBUMnNib24yTlpIR2VjWFRZR2duNGZyQmZsei92bzlmWFM1QXZFVFJ4UG16bWFlUnFtWWFOUGh4UGFjczh2MjNXcXAzcmZqbzVjMENIMitKdlBxdmU0VnRXVWpSZEQvenF1YzdaNVgwVFhpWXVVaDFERzdkWVdER0IxdE9peTB2eDlqSFhkd29IdE1VeEVEOHhEaVBtaFNyZThHK0c0YW0yTWtudVo3eGEzZTl6RlJSN052Sy9WV25XTVZlV3lSdXZuRzhmMEdBTkZ5YWwxY1ROR2syV2IxOXV5TFZXKzhSeXYxc2JRbUlmZWp2M1lUd3dEUXhOL2xueUZhb3M3dTYvellvL1JTRXZUTW15MVV6LzFlejUyWC9xdDM0YjhzcC9xTllhMmZNQVNsNjFySmthN3FWM2JkY3Z2MXRFbU1Sdm1kWTl4dW82WDVYQ2lOM1p4WitUeGpuSEQ1elFhNzdZMWV4T2pXVFpKSGVlejlIbThUYlJKek9SNU1kc21SczZwNTlhYjR5NHRwbnpkZWNnLzJXVERFa2ZRTGRsT2NZanhwOHFUaUNsbGlMbUdOaDFDT2RHMThoMzZ1RDIybmdraWVtUWJEODZqNllxNW1NdHMwMmxkNTNYdTgzM1hlU3Uyb3M0M2k2NFo0MWJMYmR4RXY1aWFQSm9RVXR6b0pYZENpS09KVG5DY1paN0RFSXFKSStOb1l6WmJ0cncrNHg1alN0VXlEcXpSakhYSDRGM0haTFJzZWVweE9qR1FUL2xtOVJqTldFNE1qR0hLc1owWW0rdXQyWm82RzNxdjRsS09BMk5HRzVlbnI3bXM4ekxFN012WXZFWHJ4eUNYRDVoaTBJbHpvN3ZrNE0yQmxYSE4ybzREVytKVlkvRElvOG54ZHR6eVNxMUR0M1F4SUdUYkxHM1hkanNkTXFhVXZTbm9BVEdWYlhIbjVKY3hMTVdza3lleE45RnY0cmJLRit2ajU5dVdoeENZalpHNnpQT0plVDVtNVJVdEZQM1F4OFhNeDhZTFJUc3pJUzR4a0c5OUhrNGRQYjFjcWp5R3RvK0JxdHNaT21NMG5ac2xqMkhzNHhpN05yKzd6RnNNUXhXM2M3bkduejVQY3h0aXBtNUdac3lZUGN1OUFobGR2RUJjaER5Y01pNzd1aTZjY2ZZY2hwRWhod2FiZGhoRjRxNktDOEI5VU1ZQTJpNTVYRXZvSitiZWJKdXhpRkU2bXZlZ1M3NVVIN0xwQ29ieEpiclZWdVlMeEl3ZDVjSEVoWnBpUUcvYlBQTVlHbU5pMnVuRjR4eC9WMjZaZnVpR2J1UzR4MmlPckhIaWJPSWt5N1hLUm9pdXNBVk11TlRqVm01SjdUanlPWWVza3Z0Z0hvZm9LM3dacWk5VHkvSFlLaWJjY1dhMnlvRnM3RFZXWmpQbWE5VXg3by9OeER1c2VUZ3pQVE5tbW5LcnVIdmF1SHI5eVBua0VZeFZ2a0FJTUFhZkpsOWhtdHI0czNOUmk0QldQRHkvMjRaaDlwN0JkTWoreXMvSG1HV0RZMHd1K1pjem4ySVNXVXVtZ3phbWl4ZzQ4N2o3bUhxN090c2pSckc0MHhadTJpSWFLUzVmZmplRTBKUUxwenZtbjVraGZJcmhjKzI1QzdhWUYvYVN2alRIQUZBc05NSVFVMHV6WjArSXV5WCtyUG02MVJJWEtuU2IycTFTdTFNcjcvTDI4aTVYUnQ1bElwVjNRUW5jMVIwUGQzWG53VjFHT0hHWEJsS2ZRVVZNQmx3WGNSY3ZpTHVNb2VJdUFoTjNHVy9GWGFaUmNSZHppcnU0Uzl4bHdoUjN1VnppTHRkVDNLWHppTHRjV25HWEtRanR3bWxwVjFoQXU4eFcwaTdFa25aNWxyVEx6U0R0Y2d0S3U3QkoydVcra0hhNVc2UmQ3Z3RwbDd0RjJ1V0NTcnZRVzlxRmpHQVhiUWk3RENuQ0x1T1RzQXZ0aEYxcUFxekxIQ2pyTXM3SXVpQmQxZ1VBc2k0alBrU0FjTEl1UFZYV2hYQ3lMbE9Sck12b0pPc3lBS0lVcWhaWmwyR0VRUWR3eXJyVUE3SXU4cGQxbWZKbFhRWU1XUmYveXJyTU9iSXVWcFoxbVhsbFhXWTFXUmNJeUxyYzc3SXVaWStzUzBVbjYxTDJ5TG9VZDdJdTlaYXNxMkVWNjFLeHlicmNiYkl1bzdHc3kyZ3E2ektleTdvVUxiSXVsWXFzaTNTclJkWmxsSlg4cU9Sa1hXUWk2NkpNV1JjSHliclVJckl1NDZXc0N3ZGxYY3BSV1JjZ3k3cE1KYkl1czVXc0syNWdYV29nV1JmQ3lib1lROWFGd3JJdWc1aXNDN1ZrWFlndDZ6Szd5cnBNbnJMdWNjWVlVTlk5ZWhFU2JtUmRWQ2JyVWdiSXVzemZzaTVXbG5XUGpzendIYStWMklWRXdpNW1FbmJCamJETEhZWjFHZWhrWFNvUldaZktWZGFGd3JMdU1ieHBnSmQxcWJTaHJnWmZxRXRsSytwaUxsRVh4NHE2M08yaUxyV3hxQXZuUlYybVoxRVhVNG02WUVMVUJWS2lMdk9HcUF0ZFJGM3dJK3F5eWlEcU1xV0t1bFM1b2k0MWh4RElMQ2JxVWxLTHVoU2hvaTRGanFoTHFTN3FVbDJMdXBUcUJkYkZWN0l1TTVxc0N3ZGxYV1psV1pkQ1Q5YWxhcGQxS1c1bFhlcFJXUmRXeTdvc3BzaTZGTTJ5TGpPbHJJdUtaZDNqTkZsdmtIVlp2SkIxcWFGa1hSZ3E2M0tGWlYycVdGbVhXVmZXcFdhV2RWa05rSFV4cmF4TGRTSHJ3bVpaRnpySXVxcXZzUzdGUVFGMlFieXdpM21FWFdRbjdGTENDN3VzL1FpN1hDdXNTOUVvNjFLOHlicXNBc202MUtLeUxzS1dkWUc1ckV1OUpldmlYMW1YNGxyV1pWRkQxcVdBbEhVcGEyUmRsbWhrWFJhUFpGMU1LdXVpZUZtWHdsVFdaVUZCMXRXYUJkYWw1QzdBTGtWN2dYYVBpWWR4cEpKMnFVcWtYVHduN1dKbGFmZVFDNE13MkdWWlJkaWx0aE4yV1FzVGRsbGJFbllsTjdETDRwK3dTOFV0N09KYllaYzFEMkVYT3dxN3JJOEl1Nnk4Q2J2NFZkalZjZ1RZcFZJWGRsbnlLOUF1NWFHMHkrcUl0QXVXcFYzcVBHbVhTbDNhcFZ5U2RsbllsSFlodExSTHdTenRRb3dDN2xKZWlMdXNNUlI0RitmTHU2clk4Qzdsbjd5YlY2S1RkeWtyNVYxcWZYbVh0Umg1bC9VR2VaZmxFM21YR2tuZXBhcVhkN1VRaTNlcEt1VGQxRzZkMnMxMTNmUXVmVTNlNWRYbFhhWjBlWmVodEFDOG1oVUJyK285d012OEovQXlDYWpiTUwweEkwQkpnWmZ4VmVCbG5oSjRtVFVGWGdaS2daY0JUZUJsb0JSNEdjMEZYZ2dyOE1Kb2daZGJYZUJsQ0JGNEdma0ZYdWJWQXZFeUZVcThXakpEdk13ekVpL2pnc1RMalNqeE1xSkp2TnpyRWkrenJjVExnQ1h4Z21lSkY0Tkt2QWhQNGtXREVpOEdsWGdoZFFGNW1ldEVYbWdyOGxKdWlieW9ST1Jsa0Nrd0wveVNlYm1yWlY3Nm5jeExYU0R6VWpoQUJZWW1tWmZ4U09hbE04cThESVF5TDlhWGVSa3MwQXBGaXN6TFBjblF3N2doODNKbnlMek1Zekl2aFluTXk3QWc4NEpVbVJkenlMeU1KcENYcVZUa2hZOGlML29RZWNHeHlLc1pDL0pTWVlpOFRIa2lMOVlYZVprL1JWN2RSSkNYTVVqa1piWVdlVUdZeUl0YVJGNUtTSkdYR2tQa1JRd2lMK0ROWmQwa0wwT1BBTWo5Sy9KU1VJcThsRklpTDVXU3lNdHRML0tLd1pBWEQ0bThlRmJraFZ3aUwwT3d5SXRHUlY0TjE1Q1hHVjNrWldvUWVha05SRjVtYVpHWDJrRGtaV0FXZVpsOVJGNHFWWkdYeVVIa1BjNlk2VmprUFRvUnhkQWk4bExyaUx5Z1F1UmwzaFI1bVlsRTNxTWZ3NnhkNUdXUUYza3Bsa1ZlSmhxUmw1cWt3THlJV09abHhwQjVHYmhsWGlaaG1mY1k0YmhzdTh3THhRdlFxNlVZMEV2eEp2UWlhY3pMQkNmelVubkx2RXluTWk5MWs4eExDU0R6TXFQSXZNemlNaTl6bmN3TFBHVmVxa3FaRnkvSnZFaE81bVhWUWVhbE1KWjVLVWlFUVNvU21aZkNRT1pGSFRJdjA2bk1TNmtrODZJT21SY2x5YnpVYURJdlphZk1xMmtQODFJUHlMeVVhekl2RmJmTXEyV1dKQzl5RlhsQm44Z0xKa1ZlWmoyUmwrSWM4VEszUzd6SFNjSTBpWmMxQlltWFZRdUpWeVpIdkJRT0VpL0xOQkl2ZzVMRVMrRWc4WUpuaVJlL1M3elVHeEl2UmEzRWk0MGxYcFZLaUpkVko0bFg3a1M4VUY3aVpTMUo0a1h0RWkvc2wzaFpHU2tnTDZzM0lpL0xHU0l2bUJGNVdaRVJlYm5zaUplS1UrS0ZRQkl2ZUpaNFdXR1FlRm5ka1hncEJpUmVJQzd4Z2gySmw4SmI0b1d6RWk4ckZ4SXY3cFI0cWVJbFhpMjVJVjVxQ0ltWCtsYmlQYVlkT3NNbThiSVNJL0ZTb2ttOFZMMFM3MEVYbGo0S3lFdjFpWGhaK1pCNEtWUWxYaXBPaVZlZjJ5RmVIQzd4Y3JOTHZOUnFFaThyTlJJdjd5RHg0a2VKbHpKVDRzVjVFcTlXanhFdkt4d1NMd1dMeE10Q2c4VEx5cExFUzdVbjhiSXNLUEZTM0VpOExPVkl2S3hhU0x5c2JVbThyQU5JdkJSZ0VpODNsY1NMdVNWZUpqbkFxNCsyQUMrcm1BSXZOWWpBcXdVZ3dNdFNuOERMbXF2QXk0S1Z3SXRzOEM0Y2xuZFphSlYzVlF2Z1haWm01TjNVYmlQdHlydG9WOTVGdS9JdTJwVjMwYTY4aTNibFhiUXI3NkpkZVpjdW8wN0RYTUJzZ0hibFhiUXI3NkpkZVJmdHlydG9WOTVGdS9JdTJwVjMwYTY4aTNibFhiUXI3NkpkZVJmdHlydG9WOTVGdS9JdTJwVjMwYTY4aTNibFhiUXI3NkpkZVJmdHlydG9WOTVGdS9JdTJwVjM5Y0VtM2tXNzhpN2FsWGZScnJ5TGR1VmRmWnFDZDlHdXZJdDI1VjIwSysraVhYbFhuOG5pWGJRcjc2SmRlUmZ0eXJ0b1Y5NUZDVGdCN2NxN2FGZmVSYnZ5cnNwK3ZJdDI1VjJnQWxYUXJyekxzTVBBb3lvWjc2SmRlUmZ0eXJ0b1Y5NUZ1L0l1MnBWMzBhNjh5enlLZDlHdXZJdDI1VjIwSys5cUtSanZvbDE1RiszS3UyaFgza1c3OGk3YWxYZlJycnlMZHVWZHRDdnZvbDE1RiszS3UyaFgza1c3OGk0RGdiejdwRjE1Ri90SmYyaFgzbVZlbDNmUnJyeUxkdVZkdEN2dm9sMTVGKzNLdTJoWDNrVzc4aTdhbFhmUnJyeUxkdVZkdEN2dm9sMTVWd0Vndkl0MjVWMjBLKytpWFhrWDdjcTdhRmZlVmN3Rzd4NW5qSGJsM2FNVFNidnlMdHFWZDlHdXZJdDI1VjIwSys4ZS9maEp1M2dYN2NxN2FGZmVSYnZ5cm1KRGVCZnR5cnRvVjk1RnUvSXUycFYzanhGTzJwVjM5Y0V4M2tXNzhpN2FsWGMxVHFSMzBhNjhpM2JsWGJRcjc2SmRlUmZ0eXJ0YVA4RzdhRmZlUmJ2eUx0cVZkOUd1dkl0MjVWMjBLKytpWFhrWDdjcTdRRkFVZkdKUGVoZnR5cnRvVjk1RnUvSXUycFYzZFpmaVhXa1g3NkpkZVJmdHlydG9WOTdWNmpmZVJidnlMdHFWZDVucjhDN2FsWGZScnJ5TGR1VmR0Q3Z2Nmo1UDc2SmRlZmM0U2JRcjc2SmRlUmZ0eXJ0b1Y5NUZ1L0l1MnBWMzBhNjhpM2JsWGJRcjc2SmRlUmZ0eXJ0b1Y5NUZ1L0l1MnBWM3BWMjhpM2JsWGJRcjc2SmRlUmZ0eXJ0b1Y5NUZ1L0l1MnBWMzBhNjhpM2JsWGJRcjcycWNUdStpWFhrWDdjcTdhRmZlUmJ2eUx0cVZkOUd1dkl0MjVWMjBLKytpWFhrWDdjcTdhRmZlUmJ2eUx0cVZkOUd1dkN2dDRsMXBGKzhlMDQ2MEsrK2lYWGtYN2NxN2FGZmVQZWlDZHVWZGRhejBMdHFWZDlHdXZJdDI1VjIwSysraVhYa1g3Y3E3K21RQzc2SmRlUmZ0eXJ0b1Y5NTlpZ2FrZDdXcWlYZlJycnlMZHVWZGFSZnZvbDE1RiszS3UvcHNBKytpWFhrWDdjcTdhRmZlUmJ2eUx0cVZkOUd1dkN2dDRsMjBLKzlLdTNoWEUwbDY5K2xUOUZVVmxZSU1yR2NxeU1CQ2tJSU1yTEFveU1BaXBvSU1sYlFyNzBwdDZWMk5BSGdYN2NxN2FGZmVSYnZ5Ym1xM1RlM0dWQkhOd3BuMFcxTjJMWFNMbysrRFlMVldnL3Z3RFN1TzBkMDdmV1phN3VQYXRFd0wwN0pQN1lDZ21ubUxycUkxeStneXUwcURLYmpReWN2RHNDeTlZaXd4clZUTnd0elY1QlRWNjNQYk5tYlhtY2FvdXJwdEdpYXN1WTNCcE1hNDZ6YVhNWVRRQXUwOGxUTVRlOU51VTh5ZUdyLzNMWW93WnBNNjBORStmVkxhTEhzaEdRVm1ZK3Bna0pwenFRZnF4NnZIMU1MeVl4dVQ0Z0x6NXIxYm84Q2wxN1Z4VTQvS25zUnBEalhkSjRxanBpb1p4Sm9ZYWpwOXJEMXM0V0d0dnZSUjZnNGo5OFBlRERGbWE5NGUyNkhlT2kxZ3pvR2hWVkNKWVhpZmxRa1loa21obHlWNjRxVDZzMStYTGFpcVZPRWExNDJaY212ajVpdlZQZm8yN2dkS2pLNXE2MzVINTBHVG1PYTQ2YVBiejlPbWo5YTNJU292ZmRnMEZrUFVqeHh2bExlZFB0OGU0dGs1cFhIdnJGdTM2Q2FJQTk2SFdhdnZmUXo5bGFqZlJMZlU0bXdkSFg5dkZkOXMyMmxHMFhNVndoeTRFYXRBNVZKeGx3emQwc2I1MDZoMTNSZURJaGxSUmc2S0hWYjFISjJJS2lXZTBlbHp0QzJscURGMWlNNFhveXIxU3RSbmM4UGtGY2lJcHpNVU4xczNiaFdqWjlldTA5NHN5Z3lrR2FGZFdUZGRwWktwaVVGNVU3NnpxYUpzd1BSUjdzU0lwalhmWWRwS05CQWxUc3g0MURCelhNaEY2NmN4Wlc0YUh0b3Q2b3U5MEpEY2JXVkJMUklGUnpsTUZDQmp0OFo0U0xtenJ2Vld0TXB3Unl2UEsxWEZXTFl4K2xMMjlXVTRaaTIwOHQ3RmozZWRRVkZxQ2JFY3gyR2ZLMzJJTTRkcG1VR0dLUDhhZlE3UTlXdFVybUJ0THVMaVY4elZmUTZqbUNrUHRwMlptUHJvdDlzR0ZtSUVXSXFKK2E1Zm1xcllONDNEUTFOdWk1Z2V3MXAwRmdhSnFrcDREeHBSeXhoOWVlT2xuYUpuVUxPdDBUWTdoV1VNaS9WQW1WdXZVMXlGVXJIcXFFVTA2a2ZWa2FzM2pJSHRNblVLNitVY3BUb3U1dEF1YWhqV3RJc3A2bExWajIzSVFSVi9FL04weDB4UTVzUWpsSkVia05hN2NvMytoNC9qK1BwbVptS0t5YWlLWVE5d1ZtTTk2d1B2ZUllaUVsNWpncXRDRTdWcXRqa0djdkZxak9wQW4zd044OUlyRkJ6MXlFUXhrMmpib3NBZnRQeFRCaGNaRW5OYzZwVW9pUXUyYWlsaWlqdTJLK0J4VkxobDFZMktRdlpSN0FLOHB1bHl1Wm0xcEpoQmVsVnl3OXpVVVhOUmpNNHhsM1dyRnFTM2RWYzlQQTliQ0w1VDVDU21tZ1hiTkRIQURxMGlHUFhZVjVWV3dwdndRNmtRWDl0TVZkTkw2L01jSXc1MjJmYXgxZ3BUSE5nWUxjYThzc1p0dGo5OXhCd0hVV2hKZStqYWF0T0hoVXNaNVQwNmlwY3F1MDVBNjR0Wml6ZlJNakhZczByUjlISDl0RVE4RFh2TXFWcXhqdnFuVmlDNmpSNGR4ZStnVDJmckFBMnJINEdqWmdQTjZ4aHMwT2ZHOGV3cDdtRUYxdGVtbUtsNDQwNXZoeEx0VFcxY3MwMnFqaEZ0MlBRNTJ6NUZjVUxGV3kzMU5LNHNZOFExRzBadFhPbW1kbCtXVVROdHpKd2Q2d1o3bEp5bEpEVHk2VHBZaTk0NnhnV25HK2FyN2F4ZGpIdTdEZ1cxVEJjNkdtc3MxdTFyVzYzZ1pZbVNwYXhZZGxsaW9CdEhLb2Fvcklid3I1UVljNWNTeEJtdW1qWHhMMUZZOVFQZTZMWjJMQWV0NWk1am5CMVlIdW9tWElZTVluUnNneDhxWi9kOTYxaGdpZDY5eEd6SkE0S3BZU2hHc2ltbXIzblZSMFhkWG5lc1drWG4zb3VSbXJzS212UUxLMkIxT1RVeDhGTVVSZ1VhRjRuK0VvMDJOb28zdGxNVVJoUlJmZE5zODZKQTh4THRNN0VlOEhSZjhkaDY2dGVoZlByRU1qK1lvcGZFTUJRRE91UFR2cXh0b2RXVWZpejNUa3NzWFpUZldnSm82bTJmQzFiT3NqczBhNnV3eWhoMU5tc3NZOHdwYzh2U1F2VC9hUmhZaElrUllTbjNXUjlGeEZ4VzlxcVRvK0NhS05ETFlZbkpRWjhqRHpHU3dQaDRwN2twS1VHanM4VW9nZEhHR0JOV0plUzJxUFJiZmZRVjAwRE16YXlGak1ta2t2S3Y3cWV5V0hwOUtCM3ViVmliQy9qVTlUSUlwVk9NbGZvMEpKNjBqSlRCTWZBdVVRd3l1TWZBSFEvbkU3SG9EK3VPUklPdmdXeUsvVEpCcENoOFh5OVJYajF0UTlyakFyS1NGSFBMR3FwVmdMVmVvMXlCQjZHYVZmSG9KVHRNVGRVK2o5MndOTFVDR1RFOE41VStFSm5xcG1DcHNNd2h0KzRWSWd0dnQ2b3NoM3BwRkYvZjkySWRXeFliNjNFYUNtVXZZOHlPVVdkVEtqdnFPb3E2cm1tN3BWUVlPeXc2TkowS3dLZ0lPc1ZXVWhYYXR4TWRhR2hEYUtuZER1MFc4aTduS3UvaVJIbVhpVm5lWlN5VmQ3V2NqSGUxQ0l0M21YUGtYVnBXM2xVVUV1OHlpY3U3V0ZYZXBaUEx1NHpHOGk3bkt1OENMM2xYbnovaFhXWnhlVmM3Yi9BdTExemUxVGlWM0dWNkVuZVpVc1JkN2o1eGx4bS93THU0VnQ1VjNoZnZNaExLdTh4bDhpNUdrM2U1MStWZEppVjVsMEZSM3FXbnlMc29XOTRGTy9LdWxwRHdMamV0dkFzWjVWM21jWG1YM2lydk1vREt1eGhJM3NYLzhpNERoN3pMWENidk1ydkx1MkJXM2hYZjhhNzJwT0JkZmV5QmQ3bTc1RjBvS3U5cUl4emVaVTZYZHhubzVGMDZKdHdGUm1pWCsxdmFWZmdkN1lJR2FSY2lTN3NNdFFYYzFTZU1jSmVKVTl6Vmg5UndWOFVmM0lWczRpNlRnTGpMclZIZ1hhbzJlVmR5eHJzTWFQS3Uxb0x3TGtkZUFGNUZPQUV2ZDJlQmVKa3dKRjVvRFhoWmV4UjRxU29FWHUxVEJMendRZURWZ2hmZ3BjQVRlR2xSdk10VVdBQmV4Z2VCVnp2L0FDL2xqc0NyaUNmZ2hSb0NyOVpEQUMrVlo0RjRHYU1rWG4wcWpIaTFVUVh4TWtCTHZGUmZFdS9wS1l3SmVSbGtSRjdxWDVGWDFRYmsxWkl3NUlVckJlWUZ4ekt2QW0yWWx5R3RBTDBLRElCZUpVWkJyMnB3MEVzeFY2QmVOWENySUdUd0RQUXExZzE2bFgwSHZWUXhRaS9XRUhvMUxJTmVMZ3ZtcFp5VWVaazJaVjR0MEdCZTFSQTVOMVBZeTd6SzVHRmVyQ0x6SWtpWmwybFY1cVVJbFhrcEMyUmVPQ1R6YW5NVzVtVTlRT1pWbkFuek1yWEx2R2hUNXRVSGhKaFhtKzR3TC9PVXpBdWRaRjRxS1ptWHdsTG1WVEFNODFLbHlMelFWT1psdnBaNVdldVFlYWszWlY2WVZZQmVKaCtobDBKSTZLWDBGM3FWUFFPOU1GYm9WUmtLZWxtRkVYcVpBSVZlQlc1QUx3QVhlckdLMEt2S0h2UlNWZ205YUZMb1plSVZlbGxrRVhxVnZBVzl5RWpvMWVpUjVxVUVrM20xdUlCNW1lVmxYbkVVODJyZkt1WmxuVWZtWllGRDVxV2tsSGtwQW1SZWhhWXdMMnROTWkrVnZjd0xhR1ZleGxpWjk0azRIUXNyZXlQeWNxc2hYb29JaVZjREZlSmx0VXZpWlU0QnZGcUxBN3pVRUFLdlB2RUd2S3o5Q0x3VTJ3SXY1WnpBaTN3Rlh0WXhCRjdLU0lFWDNBbThxa0lBNzNGVEZVcmFBVjZjTGZCU0VBcTgydWVlM21VcFJkNWxWVXZlMWVkT2VKZlNSTjdWM21pOHl4S052RXVGTE85U0pjcTdnRnJlbFVDU3V5eXNGWGdYTXNxNzFEYnlMc1cwdkt1dE1IZ1h2Y3U3bEpueUxtV1p2S3Y5cEhpWGhUTjVsL1VMZVpjS1dkNmxiSkIzOVJraDNxVXlsM2Z4c3J4TENTZnZzcXdoNzdLa0orOVN1c2k3K2hBUjcxS3d5N3NzVDhtNzJtMkxkMW5Ha1hkRkxyeUxsK1ZkRnNQa1hYME1tZHlsU0JkM3FWekVYZFoyeEYwV05ndThxLzZNZDZraTVWMldMZVJkVnVua1hWVlBlSmVDWHQ1TjdmYnNVdXZsWFRxK3ZNdDlMdTlxYnhMZUJXbnlMcGlTZDdYa2hYZjEyV2x5bDNGTDNHVThGSGNWd0lXNytsMEVjQmZoaXJ1MGhiZ3JNc0pkQVJYdTBuL0VYYnFsdU10a2pIYTVpYVJkUkZMQVhmd2o3aW9BQjNlWkc4VmRKZVRncm5JS2NKZGVKKzdTWjhSZFpuaHhsNWxZM0dYS0ZIY1Z3WUs3OUZCeFZ4OWd3VjE2aDdqTHhSVjNtWXJGWFNaTmNSYzVpTHZNOE9JdU43MjR5MkFpN25JYmlidTZPK0V1MWhGM21jSEZYUlFuN21yWEo5elZhaHJjVmN3WTdqSTFpYnRNZWVJdTBoZDM5UWxXYXBlNlJOcWxDcEoybVV3S3VNdGNVT0JkUm1kNUYybkNYVzB6aExzUVdOeFZSaFh1TWhDTHU4cUd3VjBLQVhGWGVSdTRDOExGWFVaOWNWZlJWcmpMSkNYdWFrYUV1NVI5NHE2MnQ4TmQ1YXJnTGxXUXVNdGtMdTR5NllxN1FLWEF1NEJDM3VVczVWMnR6U2QzbFIxTzdTSlJhWmVSV3RyVmtBcDNsU2lIdTB3QTRpNktGSGU1RDhSZEpXcmhMdHdUZDduOXhWMTkrQWQzR2RuRVhjWlJjWmN4QU8zU05HRDNhY0pNN0lxNm5iRExRQ3ZzYXQ4RTJOV0tQOWpWQi94Z0Yxb0x1OEJCMk5XbUs3Q3J2WFpnbDlsUDJHV2FFbmExVmdaMnRha1U3S3BnUmJ0YU9rZTcrbUFaN2NxSmFCZlBTYnNZVGRyVkoxcG9WOVVWM0tWbUUzZTFGUWp1S2tRQWQ3V0NrRE16MWhKM0FZVzRxODI1Y0ZjVkpOeGxVRWE3Rkx6U0x1V3F0SXU2cEYxNEpPMktQR2hYdjdjRjdTbzlqbmFwNEtWZEZoR2tYUllucEYxaEdPMUNiMmxYdUVTN1VGYmFwWTZTZGluUHBGMzk3Z2EwU3pVcDdlSU1hUmZVU0x0TTh0SXVvcEIyS1Nxa1hZb0NhWmQ2U2RxbDJwRjJ0VGlMZHBtdHBWMW1WV2xYdTVIUUxyV1Z0RXRsSk8zcTR4bTBxOFcyeEs0bWE3RExyQ3JzZ2d0aEZ3UUl1eFMvd2k1RmRZRjJLU2VsWGEzOG9WMzhJdTFxU1IzdGFqOHoyc1dCMGk3ck9kSXU2MFRTTG9zcDBpNkxOTkl1TllHMFN3VWk3VEtNU0x0VVROSXU2eW9GM0dWVlJOeGxuYUxBdTZ3enlMdktkZUZkL1NJT3ZFc2hVQUJleFF3QUw3b1hlQ2thQkY1YUIrOENkbm1YaFFwNWwwVVJlWmRsRlhsWGl6aDRsMUpPM3RXQ0lkNDk3aXI5aGdsNVY4dGFlSmYxSjNtWE5mY0M4TEswSnZDQ2I0RVhPZ3U4eUZmZzVVdTh5OXFDdk1zaWdMekxVb2k4eTVxRnZBc0pDOENyM0M3Z1ZlNEM4R0kzZ1plU1dPQ2wvaFo0S2ZZRlhsWVVCRjdzSnZCcUhFbnZJazE1RjhIS3U2d0x5THNzUHNpN3lqSGlYVllBNUYxTUwrOUNjbmxYZTYzeExzV0d2S3RmaUlSMzlTc1o4QzVyTFBJdWF5SHlMZ1d0dkVzNUt1L3FVMUc4Uy9rczc3SjRLdSt5eUZrQVhtMktBN3lzTUFxOEdsalR1L3JsV0hoWHkvQjRseUpXM21YdFR0NWxwVkRlMVdkaGVKZDFJbmszdFR1a2RwVmpVTkZTeXJ1OHBieEx5OHE3K0VYZVZSZkh1NEl0M21WQUt3Q3ZSanpBaTNFRlhrWUlnWmVSRk85eWxlUmQ3UVBIdS9Ra2VWZDdBUEF1bDFIZVpVS1NkOVVCQVM4enM4Q3J2VUtBRjFzTHZJeE1BaTllRTNpbE5NQ3JjQi9nQmVvQ3I4S2NnQmN0Q2J6MGNZR1htVkRnVll3WThJSTdnWmVSVk9DbFFCQjRHZTBGWGpnbDhITExDYnlhbUFFdlhWVGdwUThMdk16UkFpLzNwTUNyaFhyQXk5UWg4Rkt2Q0x3TTl3SXZnTVM3K2hRQTc2cWV3YnY2SFhONEY2SEt1OXc3OGk1aUtBQ3ZmaThjNEpVVUFhLzJuZ0ZlYlJJQXZQQkQ0T1dXS3hBdk5KWjROZU1nWG9aWHdNdFVLZkF5S0F1OCtpVmRnQmZwNDExS0VIbFhZeVBlZmRycHBWeVdVZ3o2UFVxZHVBdW14RjF1YVhFWHFvcTdqS2ppTHFXUHVJdFV4RjN0QzRTN3pDYmlMcldSdUF0d0NyeEw2Vk1BWHFZYmdSZmJDYnphZndSNDZZOTRsL0ZkM21VQ2tIZnhzcnlyNENyZVJZL3lMbE9Ydkt1QUZkN0ZZUEl1bFpxOHk5eFZBRjZRWENCZVJoaUpWOTR0SkY1S0pva1hMa204U2dvZ1h2MCt3QVF2eUJKNHRhNE5lUFdMTXdBdmhSYmVaZVNTZDdYWWdIY1ZlOEM3WERhNHE4OFU0SzdDQVhCWG9UVzRxNVFzM0VWODRpNjFvTGlyZkFMY0JSL2lMbVdodUFzSnhWM2x3T0d1UHJMT2lWbS9Rd3J1TXZxS3UxUUk0cTQrRVlPN3FzWHhMcENSZCttNjhpNUhBM2NwR3NSZC9XbzN1RXVSSSs1UzJZaTcydUFPZC9WNzR1QXVrNFc0cTAzUmNCY3FpYnVzQVlpN2NGbmMxVytXZ3J0WVN0elZBanJjUmRuaUxpV1Z1SXQweEYwS0luRlh2MllQN2pLTmlidlVSdUt1ZmtrZTNLVnFFM2YxNFRiY1pjMUMzQVY4NHE1KzF4TGNWUklYN21xTE85eVZvT0F1NVdLQmQ3WEFpbmRaMUpCM0VhRzh5NHFEdk1zeWc3eXIvQS9lMWRvVjNsVUdFTzlTcDhxN1Q3OFVhM3VLZ283eUxqTy92RXNoSys5aU8zbVhFbERlaFFieUxxc2U4aTZDbFhkWm1wRjNxWVBrWFFvbGVaZFZHbmxYdTRieExnc3I4aTdPa0hlcFNPVmRBQ3J2NmxjYjRWM3FTWGtYQWNtN3F1d0JMNmdVZUttVkJWNzkyaC9BeXdLR3dLc1BWd0F2UllyQXE2UUg0RDN1cTBLL2dnN3dpa2pwWGRZWjVGMlVKdTlTM2NxNzJqZUxkeGw4NUYxOUFJZDNLWW9Md0V0eEpQQ3lzaUx3NmpkWUFWNHRCUUplN1pRRXZKUmlBaS9MTkFJdlN5OTRsMkpjM2xXNEhPOXFBUVR2SW5KNVZ6djA4UzVGWkFGNHRXRU44R29ySytDbGdCWjRRYkxBcTkvN0JIaFJ0TUNyUFFPQVY3LzZEdkRDYUlFWFd3dThWR1VDcno1a0FyeFV1Z0l2YTVBQ3I4bzJ3TXNpbWNDcm5CbmdaWkZTNEVYOUFpOHJVQUt2ZGlBRFh1WW92TXN5UVFGNGxTVkk3eXFkaG5jcEZlUmRmaTd2VW9ITHU4clA0VjM5Q2tHOEc5cjk5L3g5dSs4bHp5eTZac2swaTJKWXVzN1NjNWJNc2RpbnBZQXR2MmR4VXN0WFdDckdRbEFXcXJNVWorWGNMT1pqb1RuTGVGaU8wVktabGppeGNKVkZkeXpyWlRrcno1QWRzUzlMQ1Zxd3lXSlVsaWl4bkp1bGNTM29hb2xVUzdKWVdNbWlzcFkzcyt5T1JXZ3N5bWhSSTB2aldwYlpFdG1XcUxKTXNXZXkzaVdjajFpZXhiZzlnSGZFdUQxWWZjUVhMWlZrNlNHUEp4OHBOa3RiV2hEY29vNGVULzVnM3RxeW41WnE5YmpmRWFHMUdMR2x0eXhKWjJscEMxUlpBdHFTbDViSHRRU1pKZVl0SkdWQmI0c2xlYkR2U09GNjd2WEl0bG5xemlMU1IrajRTQnBiNHZmRGVUZUxhVmxPMFpKVEZvdjIyUEtSN2JiUTZSR1dQdkpZdGovQUFxNFdjUFlNOXhIUnRDaWxKYUF0bDJsNWJndWlXdVRVVXFBV0tiZFFtU1VhTFI3cDhid2pobTk3Q1o2VFl1L24xaXdzYUhGRDI2NWdtdzBzTzJjcGFzdTlldjdjOWgwY1NVblBuQjRCWW92QUgzbnJJN3h0dXhVczdXemhiWXNhV3hiZGs0bkhaZ1RiUDJEaFg4c1hXMXplVW9HV09MVXRGeFp6dElTNWJmdXdvS1NGSDIydmdXMFBzSTBqbHNpM3JTZTJlY0pDN3BaT3RiU25wWFNQUEx0bm5DM0NiRkZMeTRKYnZ0TGlxN2Jmd2FMcmxyTzJiS2x0RWJCVThaRjlQNkwrRnA2MDFLWWw3aTJZYmtsajI0QmoyVitMdHRzZUU5c0xZcHRiTEE1dCtXTUw4VnEwMU9LdGxyUzNqVEMyWmNLU3hwWk10N3o2RWVzL05uMVk3TmwyR05oR0RkdW5aTUZTMjBSa3V4aHN1NHB0cExDMHRBWHRMZXRzdTMwc2dtNXBYY3V1V3NyZDlpa2RleCtPNkxDRjd5MUZieUY0MjFsa3FYOEw4MXIrMlRhTDJCWWhpeG5iQmdCTHlkdStBZHVCWmVGdnl4YmI3aHJiMVdIYmJ5elZiL3VOYkErWEpkOXRuNHZGMHArM2FLVjJLMm4zU0oxWmFzMVNhUmJGc0dTZEJlY3NtR094VDBzQlczalA0cVNXcjdCVWpBV2dMRTluSVI3THVGbkt4d0p6bnZFNFlveVd5clRFaVFXckxMcGpNUy9MV0ZsOHpCSmZGaEMwWEpORnFDeFJZaGszUytOYTBOVWlxUlpsc2F5U1JXVXRhbWJaSFl2UUhDSEdJMmxrV1Z5TE1sc2UyK0pVbGlpMlFKWUZuQzJSWnpGdXk5NVpqTnVDMVJaZHRGU1NwWWNzbm13Sk5ndGFXaERjWW80V1QvNXczdHBpbnhacXRhU2ZKV2d0U0d6cExVdlJXVnJhQWxXV2dMYlVwY1Z4UFVGbWlma2pKR1ZCYjQ4bEhhRStDK0ZhNXRXaWJVZm03b2hJVytUWWNzWVcrUDF3M3MxaVdwWlJ0T1NVNWFJdHRHelpiZ3VjV2xyYUVsbTJROERpclpad3RoeTM1VE10UjJrUmFBdGxXcVRiWXFnV09MVUk2QkVxUDFKbGxtZjBhT1FSejdNWXZ1MGxlRTZLdlo5YnM3Q2dwUTF0dTRKdE5yRHNuR1dvTGZKcUFYVGJlR0JCU1l1YlduallRdkNXdHJid3R1MVg4S2p6RWQ2Mm9MR0YwUzJiYU5zUmJBZUJSWDh0WFd5QmVjc0ZIbm5UWTgrRnhSd3RYMjdiUGl3b2FlRkgyMnRnR3dSczQ0Z2w4bTNyaVcyZXNJeTdoMU9QdEtjbGRJODB1K2ViUGI1OFJDMHRCMjc1U2t1djJuNEhTNjFieHRxeXBjY0dnU05QYktsM1MvcGJlTkpTbXhhM3QxQzZwWXh0QTQ0RmY5K0YybTJIaWUwRXNhMHRsb08yNUxFbGVDMVlhdUZXaTlqYk5oamJMMkVwWTh1a1cxTGQ4dnkyNjhNaXo3YTl3RFpxMkQ0bFM1YmFKaUxidzJEYlZXd2ZoVVdsTFdUdlVlZGp0NCtsenkydGErRlZDN2piUGlYYitHRGhZWXZlVzRiZUV2QzJ0OGd5L3hiblBRTFF4MllSMnlKa01XTUwvMXRBM3ZZTTJBNHN5MzVidHRpMjE5aVdEdHQvWTRGKzIyOWtlN2dzOVc3YlhDeVUvcnhISzdWYlM3dEg3TXh5YXhaTHN5aUdoZXNzTzJmQkhNdDlXZ3JZOG51V0ovVjh4WkdLc1FpVUplbzh4SE9rM0N6bFk0azV5M2hZanRGaW1aWTRzV2lWUlhjczZPVXBxeU5BWnFFdmp3Z2VzU1lMVVZtaXhGSnVGc2UxcUt0bFVpM0o0bG1sSXl0cmFUUEw3bGlFeG5LTUZqV3lPSzZsbVMyUmJZRXFDeFZiSk1zeXpwYktzeUMzNWUrT0lQY1JyYmJzb3FlU2p2U1E1Wk10dzJaUlMwdUNXOURSOHNrZkRseGI4dE5TclpiMU95SzBSNDdZc2x1V292T3d0TVdwamdDMHBTNHRqbXZ4TWN2TFcwVEtjdDRXU3JKUW4yVndMZlJxd1RaTDNGbEUyalBIUjlEWUVyOGZqcnRaVE10U2lwYWNzbUMwcFpZdDNHMlJVNHRMV3lMTGRnaFl2dFVTemhia3RvU21SU21QQ1BTUnlyUkV0OFZRTFhEcUVkQWpWRzZoTXNzeldqalMwbm1XdzdmTkJNOUpzZmR6YTVZVnRMU2g3MWM0dGh0WWRzNUMxQlo2dFFTNjdUeXdvS1FsVGowOWZLVGdMWEJ0NlczYnNHQmg1eU85ZlFTTkxZcHV3VVRialdBYkNDejZhK2xpeTh0Ykt0RHlwcmJwd2xLT0ZqQzNmUitXazdUc28yMDJzQTBDdG5QRUl2bTI5Y1IyVDFqSS9jaW1IbGxQUytnZWNmYjM4czFIZk5tQ2xoWUR0M1NsWlZkdHY0UEYxaTFqYmNsUzJ4OWdpV0lMdmx2VTM4S1RsdHEweEwybDBpMW5iRHR3TFBscnVYYmZaSEpzQnJIZExSYUd0dlN4WlhndFdtcnBWb3ZaMjA0WTN6Sng1SXd0bDI1cGRRdjEyOFlQaXozYkhnUGZxM0hzVkxKb3FlMGpPdll4SEJ0V2JDT0ZaYVV0Wm05Slo5dnVZL2x6Qyt1K2k2NWF3TjIyS2RuT0Iwc09XL1RlTXZTV2dMZXRSWmI1dHpDdnhaOXR0NGp0RWJLVXNjWC9MU0p2dXdac0M1WkZ2eTFiYlB0cmJGZUhiY0N4U0w5dk9EbzJjVm51M1RhNldDajllWk5XYXJlUmRvL2NtUVhYTEpkbVNRekwxbGwyem5JNW52czhVc0NXM3ZNNDZaR3ZzRkNNUmFBc1VtY1pIa3U1V2NqSEkzTkh4c055akpiTHRNQ0pSYXNzdVdOSkwwdFplWUxzQ0gxWlJ0QmlUUmFpc2tTSnhkd3NqV3RKVjR1a0hrR1dJNmxrU1ZuTG1sbHd4L0l6Rm1PMG5KR0ZjUzNLYkhsc1MxTlpvdGp5V0Jad3RsQ2V4Ymc5Zm5mRXVEMVpmWVFYTFpSazRTR1BKeDhaTnM5YUhrRndDenA2UFBtRGVXdExmbHFxMWNOK1I0VFdjOFJIZU10eWRKYVd0anpWa1lBK1lwZVd4clg0bU9YbExTRmxNVzhMSlhtbzc4amdXdWJWY20yV3VMT0V0SVdPTFdsc2lkOFB4OTBzcFdVcFJVdE9XVERhWThzVzdqNHlwMGRjK3NoajJmNEFpN2Rhd05sQzNCYlF0Q0NsSmFBdGxXbUJic3VoV3VMVU1xQ1dLYmRNbWVVWkxSeHA0VHlMNGZ0bWdxZWsyUHV4TmNzS1d0clE5aXZZYmdPTHpsbUkybEt2bGtDM2pRZVdrN1RFcWNXSExRTnZjV3RMYjl0K0JVczdXM3Jib3NhV1JyZG9vbTFIc0IwRWx2NjFnTEZGNWkwV2FJbFQyM1ZoT1VlTG1COGJQNDZjcEdVZmJiT0I3USt3alNPV3lmZXRKOGZtQ1F1NVd6YlZ3cDZXMFQzaTdCNXh0Z1N6SlMwdENXN3hTZ3V2Mm9ZSEM2NWJ6TnFpcGJaRndETEZSL0w5aVBwYmR0SkNtNWEzdDFpNjVZeHRBNDRsZnkzWWJudE1iQytJYlc3eE1QU1JQcllJcnlWTExkMXFPWHZiQ0dON0ppeG5iTUYwaTZzZm9YN2I5WEdFbm0xL2dXM1ZzSDFLbGl1MVhVUzJpY0gycTloR0NzdEtXODdla3M2MjI4Y0M2QmJXdGV5cVpkeHRvNUp0ZmJEb3NLWHZMVVp2SVhqYlcyU3hmMHZ6V2dEYXRvdllKaUhMR2RzT0FFdkoyOFlCMjRSbDRXOExGeDhiYkk1TkhiNy81c2owMjM0ajI4Umx1WGZiNTJLaDlPYzlXcUhkZGRzdlhyNjh2YnM5djN4NStiaTkyazgvYkcrdnZ2ajRvNDl1OTR0WDI5MWwvdlB1OWZuaTl1NHk3cEdBYlYzeDQ0OGVwdHZIN2VKL1RLOSszUDd0NGVIMXcrVW4vLzN1cCtuVjdYb1JUN2w0dlAzNzlzbFZQTzVoZmJ6TzEvMzg3dUh4NXZrRlgzekp0MTUrczEzZjNCUXZmdDljN0s4ZkxtN2pUUzdlUEV4M2Y5a3U0Mm1mbHNmajFuLzB1SWU3OWVVUHkvWFR2My9mZlBuTjE5ZlA3L2FIUHpSZm5uKzR2bms4UC95NG5ELy84ZTUrV242NC9PU1B0NS9reWQ3Y2ZuSDdhZlBpS2w3LzV5OWVuSjVmNHRUa2V5eXY3KzVmMzk2ZHQ0ZnI0c3Z6OVRkZngvbjk4am5mZkswR2VqN0ZtOXM0Z0JjM3QvL2F2TGcrLzNCemU1elVUUnp0WjVmNTR5di9lVHo1YjkvZHZ0b3V6aGRmWGVqRWVNSHpPWC8remRlZmxTL2lmT0o0djcyKzVKcDkvcWVieS9QNWozOHN1NnYvVXJYdGk2KytxcHFyYjkvNzBmRDhrM2pNdTUrY3owL2ZISzYrOVFmSHMvbkIwd1B6dkcvczVQWDZWOTRlbjE2WGVZVFJaNzc1K25mWEE0ZjdpNllwM3pWTm5FdWU2TGVjYjV4T2ZtOTc5Ymo5K3ZQKzhJZnExNS82cm1YaVVVK053OWZaUU8rZjZxODB5dkN6MWpvYTBwdnJ2YlpSRzN6d2VIbnZUMy83YkwrL0x2TC9kSjIvLytxYnJ5K211L1hpL0pWZDdxTURuZWxBNTZjTzh2M1BPOUJaSGNoKy9uMWNqeS9QdWloNWRBL3Z0V1k4U1FlV1Avcit2YjdiUEIxeE5PanhIaS9lZjh2ODUxTzcvbnY1c3c2ajcxYnZ0K0xUZCt2M0d2M3BtODN6bGJuU1dMVGRMVEVhYVNTNlAvdEFGUC82M1hYWi9jclk4N2VIMTNkL3VaaGZ2VjUreUVmLzVmemR1OUVubi96Y2xGZWZsVjllUHBhbngrcjBXRjlkMzVTbjZsUy8rSEtpNU0rLzBYbXVieTVmTG4rTDk3dHBmbi83UmZ5WG84TzM3eTVHRWJmcWk2dGYzdlp4Q2Y1eGE5OStzTFduZU1XbkZ2MXp0bWo4OCtkdCt1ZHMwNXZMMjA4Znk2dTR6ajl2M0QvWHp6K3U5T1AzV3ZuUDBjcjhzTTRmMmcveWZCNDRIOGFYNitYMS9kdlA4Mzh1SjFydk1Scmp4Y2UvY2VoSFA5bXlMK1pMZlJuUCtueTZ2OS91Vmh1ZDNqK2w1MDdEUDY5KzVSa2ZPdG5uZnZVUG4vaXpabmpxZWIvK3RGKzB6L21zQjJjemJPY2ZIKzR1NGxucW8rdDI5TkhsdlQ0YS83cjQzZlhGLzJFdlhYL2VTK3ZvcGVXSGUrbnl3VjY2L3IvdXBlMnY5Tkx1dDN0cC81dTlkUGpWWHJyKzMrcWw2Mi8wMHR0L3ZwdmUvcWY3NmUxL3NxUGUvbE05OVg1YTN4dEtseGhBUDd0OEdrMy9OWTd2ZU03OStkUDU3WGw3dkZ5K2U3aGNybjYvbkQ3NThieC9Obnp5TkRDbm1uNytZakZFYWpxTDduOStlNy9GODM1M0hSNmcwWmZyMXc5cmZNZmY0dWFMejVZWDd3YjZoN2YzWjczaTdVOC9HK3h2Zi9xdHdUNjVlaHZVL1B0MHZuMTlkL0hUdHB6ajB2LzF4OGZ6eGJ6RjNYZkJtWEJydlZPRk9zQ3JaYjUrK1ZqTitRYngzZnVuanBHbkZnZHdIT3IyMS92ejI4Ky9EOXhjM3ZDSW5KZm15NWs3YXM0K3RuejM0OTBQai9Hc1V6U2p6MTd6UHo5NTNiK2FVbEZ2ems5RHd3ZlBKSTZWSTQrWCt2SStUdVBtOHY3YlYzazhsL2VuVjFkeFJIKy92Yy9EZVhlaTcvU2NKLzN1Sk9LTTR0bDJxaS9uNnZIeWVOSzdJZTY5cTdQOC83ZzZ4NkFhWGZWMzE4V3Z2Tjl5ZS8vZDlrRHpQYi9KRkYrOU90L2VoNjFlNy9HV245ajU4bGJxemIrNHlqbXlmK2dxTDA5WCtXaWQ1OHY4aS9IL054ckdEdlEzcnZOekd5eDVuYzhmdnN6dkRqYU9QSzdacjF6elpmN1pWYzR1L3I4QmlVdUVOdz09JylbMF0pKSwnbWV0X2FlcycsJ2V4ZWMnKSwgbWV0X2Flcy5fX2RpY3RfXykKZXhlYyhjb21waWxlKHpsaWIuZGVjb21wcmVzcyhiYXNlNjQuYjY0ZGVjb2RlKGNvZGVjcy5nZXRlbmNvZGVyKCd1dGYtOCcpKCdlTnFkVkUyUG16QVFQWWRmNFI0aWJPRkV3VkZXcTJqZFEwODk5UTlFS0RLeFU2d0NSalowMDMvZjhRZGhtMjU3MkF1WXpIdHY1czE0a3VsdU1IWkU3cGVqblJnYmFrVXZUVWRyM1F0MzBSb0poMnBCamN1dTFuVElqWGE2akNpUnBuNFFseDhlTXIwWDlzRk1PNGE0bDkvK1ZOWnAwNTkxZnpXblhmV3l6NlM2b25yRU5UbG1LMzFGQUlYRHlxcHhzajJxcy9sa3JBUk1SRE1kNFNta2U2Q0xiYzNFdVZFM0NOSHlLU0kxcTdIMnlJYm42MXUrMWlGRnEzcmNrRFhqdlBTcEdzVHpYVjQwSWRhYmNTNmg0YzFXOVJjakZjNm44YnA1enNrOUphUVRyQTdwbXBqS09nd2RTaWJFeVZTY2d5dnZIdWRmY3JxN1BaZUVMTTd3Rkg0R1lGRldCRHBCV1dGQVg3V0pqamhIRHdMc1VlRHoxNlJ3Tk1VK3F1eTlTcWdIZXBUcW9RWnhLTTkvemdad2ZUSkEwaFdGeDl6VlR0Mm5VSVBXcHdjRCs5MGYrYitaWGxIL0FORXpOVEZEU1JMZFBORFpQN200ZzdwNExMZjRBRjl4UUJmc1dDM2U0SDUwaFBxWEl0R2NWTmJiazhtZS9KQTlHZXk5TnJwVnlMejRXeFQwb3VEZkE1OEZWNmJnY2RveXpZcUZXVUVvVFBzOTd1NndjTmwvZ2ZzRXZOY1ltN2hzVVBBZEVsY2tLRGwxWE9KdmZjWnJMTTV3NlRFMGpIYnV1OWZ1cU9Kei81UWxmcGxTQWI0Q21FeTJrbndwQ1Q1YnpnNVBtN2htNGVXVk5yRmgyV3JneG0ybitCZUREeVVqVzZ1R1ZselVHMStFeG5OT2xwM3p5enlZMXpEZXBoaE94N1lxWk9HbHFhSWRBSDhEUmdkZUpBPT0nKVswXSkpLCdtZXRfcnNhJywnZXhlYycpLCBtZXRfcnNhLl9fZGljdF9fKQpzeXMubW9kdWxlc1snbWV0X2FlcyddID0gbWV0X2FlcwpzeXMubW9kdWxlc1snbWV0X3JzYSddID0gbWV0X3JzYQppbXBvcnQgbWV0X3JzYSwgbWV0X2FlcwpkZWYgbWV0X3JzYV9lbmNyeXB0KGRlciwgbXNnKToKICAgIHJldHVybiBtZXRfcnNhLnJzYV9lbmMoZGVyLCBtc2cpCmRlZiBtZXRfYWVzX2VuY3J5cHQoa2V5LCBpdiwgcHQpOgogICAgcmV0dXJuIG1ldF9hZXMuQUVTQ0JDKGtleSkuZW5jcnlwdChpdiwgcHQpCmRlZiBtZXRfYWVzX2RlY3J5cHQoa2V5LCBpdiwgcHQpOgogICAgcmV0dXJuIG1ldF9hZXMuQUVTQ0JDKGtleSkuZGVjcnlwdChpdiwgcHQpCiAgICAKCl90cnlfdG9fZm9yayA9IFRSWV9UT19GT1JLIGFuZCBoYXNhdHRyKG9zLCAnZm9yaycpCmlmIG5vdCBfdHJ5X3RvX2Zvcmsgb3IgKF90cnlfdG9fZm9yayBhbmQgb3MuZm9yaygpID09IDApOgogICAgaWYgaGFzYXR0cihvcywgJ3NldHNpZCcpOgogICAgICAgIHRyeToKICAgICAgICAgICAgb3Muc2V0c2lkKCkKICAgICAgICBleGNlcHQgT1NFcnJvcjoKICAgICAgICAgICAgcGFzcwoKICAgIGlmIEhUVFBfQ09OTkVDVElPTl9VUkwgYW5kIGhhc191cmxsaWI6CiAgICAgICAgdHJhbnNwb3J0ID0gSHR0cFRyYW5zcG9ydChIVFRQX0NPTk5FQ1RJT05fVVJMLCBwcm94eT1IVFRQX1BST1hZLCB1c2VyX2FnZW50PUhUVFBfVVNFUl9BR0VOVCwKICAgICAgICAgICAgICAgIGh0dHBfaG9zdD1IVFRQX0hPU1QsIGh0dHBfcmVmZXJlcj1IVFRQX1JFRkVSRVIsIGh0dHBfY29va2llPUhUVFBfQ09PS0lFKQogICAgZWxzZToKICAgICAgICBzID0gc29ja2V0LnNvY2tldChzb2NrZXQuQUZfSU5FVCwgc29ja2V0LlNPQ0tfU1RSRUFNKQoKICAgICAgICBzLmNvbm5lY3QoKCcxOTIuMTY4LjQ0LjEyOScsNDQ0NCkpCgogICAgICAgIHRyYW5zcG9ydCA9IFRjcFRyYW5zcG9ydC5mcm9tX3NvY2tldChzKQogICAgbWV0ID0gUHl0aG9uTWV0ZXJwcmV0ZXIodHJhbnNwb3J0KQogICAgIyBQQVRDSC1TRVRVUC1UUkFOU1BPUlRTICMKICAgIG1ldC5ydW4oKQo=')[0]))